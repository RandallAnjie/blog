<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CloudFlare反向代理api</title>
      <link href="/2023/03/20/CloudFlare%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86api/"/>
      <url>/2023/03/20/CloudFlare%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86api/</url>
      
        <content type="html"><![CDATA[<h1 id="CloudFlare反向代理api（以api-openai-com为例）"><a href="#CloudFlare反向代理api（以api-openai-com为例）" class="headerlink" title="CloudFlare反向代理api（以api.openai.com为例）"></a>CloudFlare反向代理api（以api.openai.com为例）</h1><h2 id="注册CloudFlare并且登录"><a href="#注册CloudFlare并且登录" class="headerlink" title="注册CloudFlare并且登录"></a>注册CloudFlare并且登录</h2><p>好像还要先完成邮箱验证（反正也是点个链接的事情）</p><p>ATT：CF不需要挂梯子即可注册登录</p><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>点击左侧Workers按钮</p><p><img src="https://blog.zhuanjie.ltd/img/uploads/2023/03/CFworker.png" alt="CFworker"></p><p>直接创建helloword worker</p><p><img src="https://blog.zhuanjie.ltd/img/uploads/2023/03/hellowordworker.png" alt="hellowordworker"></p><h3 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h3><p>删除左侧代码后将新的反向代理代码粘贴至左侧，然后点击保存并且部署（Save and deploy），最后点击左上角返回，记得要保存</p><p>这里我给出openai的api的借口反代代码（见文末）</p><p><img src="https://blog.zhuanjie.ltd/img/uploads/2023/03/editworker.png" alt="editworker"></p><p>在worker的面板点进去刚刚的项目可以看到反代后的网站的url</p><p><img src="https://blog.zhuanjie.ltd/img/uploads/2023/03/workdash.png" alt="workdash"></p><h3 id="自定义域名（可选）"><a href="#自定义域名（可选）" class="headerlink" title="自定义域名（可选）"></a>自定义域名（可选）</h3><p>当你把你的域名托管到CloudFlare的时候，你可以自己添加域名替代反代后的url</p><p>在点进worker项目里面的时候选择触发器（Triggers），选择添加域名，CF会自动配置好SSL以及DSN解析</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// Website you intended to retrieve for users.</span><br><span class="hljs-keyword">const</span> upstream = <span class="hljs-string">&#x27;api.openai.com&#x27;</span><br><br><span class="hljs-comment">// Custom pathname for the upstream website.</span><br><span class="hljs-keyword">const</span> upstream_path = <span class="hljs-string">&#x27;/&#x27;</span><br><br><span class="hljs-comment">// Website you intended to retrieve for users using mobile devices.</span><br><span class="hljs-keyword">const</span> upstream_mobile = upstream<br><br><span class="hljs-comment">// Countries and regions where you wish to suspend your service.</span><br><span class="hljs-keyword">const</span> blocked_region = []<br><br><span class="hljs-comment">// IP addresses which you wish to block from using your service.</span><br><span class="hljs-keyword">const</span> blocked_ip_address = [<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>]<br><br><span class="hljs-comment">// Whether to use HTTPS protocol for upstream address.</span><br><span class="hljs-keyword">const</span> https = <span class="hljs-literal">true</span><br><br><span class="hljs-comment">// Whether to disable cache.</span><br><span class="hljs-keyword">const</span> disable_cache = <span class="hljs-literal">false</span><br><br><span class="hljs-comment">// Replace texts.</span><br><span class="hljs-keyword">const</span> replace_dict = &#123;<br>    <span class="hljs-string">&#x27;$upstream&#x27;</span>: <span class="hljs-string">&#x27;$custom_domain&#x27;</span>,<br>&#125;<br><br>addEventListener(<span class="hljs-string">&#x27;fetch&#x27;</span>, <span class="hljs-keyword">event</span> =&gt; &#123;<br>    <span class="hljs-keyword">event</span>.respondWith(fetchAndApply(<span class="hljs-keyword">event</span>.request));<br>&#125;)<br><br><span class="hljs-function"><span class="hljs-keyword">async</span> function <span class="hljs-title">fetchAndApply</span>(<span class="hljs-params">request</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> region = request.headers.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;cf-ipcountry&#x27;</span>).toUpperCase();<br>    <span class="hljs-keyword">const</span> ip_address = request.headers.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;cf-connecting-ip&#x27;</span>);<br>    <span class="hljs-keyword">const</span> user_agent = request.headers.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;user-agent&#x27;</span>);<br><br>    <span class="hljs-keyword">let</span> response = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">let</span> url = <span class="hljs-keyword">new</span> URL(request.url);<br>    <span class="hljs-keyword">let</span> url_hostname = url.hostname;<br><br>    <span class="hljs-keyword">if</span> (https == <span class="hljs-literal">true</span>) &#123;<br>        url.protocol = <span class="hljs-string">&#x27;https:&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        url.protocol = <span class="hljs-string">&#x27;http:&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">await</span> device_status(user_agent)) &#123;<br>        <span class="hljs-keyword">var</span> upstream_domain = upstream;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">var</span> upstream_domain = upstream_mobile;<br>    &#125;<br><br>    url.host = upstream_domain;<br>    <span class="hljs-keyword">if</span> (url.pathname == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>        url.pathname = upstream_path;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        url.pathname = upstream_path + url.pathname;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (blocked_region.includes(region)) &#123;<br>        response = <span class="hljs-keyword">new</span> Response(<span class="hljs-string">&#x27;Access denied: WorkersProxy is not available in your region yet.&#x27;</span>, &#123;<br>            status: <span class="hljs-number">403</span><br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (blocked_ip_address.includes(ip_address)) &#123;<br>        response = <span class="hljs-keyword">new</span> Response(<span class="hljs-string">&#x27;Access denied: Your IP address is blocked by WorkersProxy.&#x27;</span>, &#123;<br>            status: <span class="hljs-number">403</span><br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">let</span> method = request.method;<br>        <span class="hljs-keyword">let</span> request_headers = request.headers;<br>        <span class="hljs-keyword">let</span> new_request_headers = <span class="hljs-keyword">new</span> Headers(request_headers);<br><br>        new_request_headers.<span class="hljs-keyword">set</span>(<span class="hljs-string">&#x27;Host&#x27;</span>, upstream_domain);<br>        new_request_headers.<span class="hljs-keyword">set</span>(<span class="hljs-string">&#x27;Referer&#x27;</span>, url.protocol + <span class="hljs-string">&#x27;//&#x27;</span> + url_hostname);<br><br>        <span class="hljs-keyword">let</span> original_response = <span class="hljs-keyword">await</span> fetch(url.href, &#123;<br>            method: method,<br>            headers: new_request_headers,<br>            body: request.body<br>        &#125;)<br><br>        connection_upgrade = new_request_headers.<span class="hljs-keyword">get</span>(<span class="hljs-string">&quot;Upgrade&quot;</span>);<br>        <span class="hljs-keyword">if</span> (connection_upgrade &amp;&amp; connection_upgrade.toLowerCase() == <span class="hljs-string">&quot;websocket&quot;</span>) &#123;<br>            <span class="hljs-keyword">return</span> original_response;<br>        &#125;<br><br>        <span class="hljs-keyword">let</span> original_response_clone = original_response.clone();<br>        <span class="hljs-keyword">let</span> original_text = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">let</span> response_headers = original_response.headers;<br>        <span class="hljs-keyword">let</span> new_response_headers = <span class="hljs-keyword">new</span> Headers(response_headers);<br>        <span class="hljs-keyword">let</span> status = original_response.status;<br><br><span class="hljs-keyword">if</span> (disable_cache) &#123;<br>new_response_headers.<span class="hljs-keyword">set</span>(<span class="hljs-string">&#x27;Cache-Control&#x27;</span>, <span class="hljs-string">&#x27;no-store&#x27;</span>);<br>    &#125;<br><br>        new_response_headers.<span class="hljs-keyword">set</span>(<span class="hljs-string">&#x27;access-control-allow-origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>);<br>        new_response_headers.<span class="hljs-keyword">set</span>(<span class="hljs-string">&#x27;access-control-allow-credentials&#x27;</span>, <span class="hljs-literal">true</span>);<br>        new_response_headers.delete(<span class="hljs-string">&#x27;content-security-policy&#x27;</span>);<br>        new_response_headers.delete(<span class="hljs-string">&#x27;content-security-policy-report-only&#x27;</span>);<br>        new_response_headers.delete(<span class="hljs-string">&#x27;clear-site-data&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (new_response_headers.<span class="hljs-keyword">get</span>(<span class="hljs-string">&quot;x-pjax-url&quot;</span>)) &#123;<br>            new_response_headers.<span class="hljs-keyword">set</span>(<span class="hljs-string">&quot;x-pjax-url&quot;</span>, response_headers.<span class="hljs-keyword">get</span>(<span class="hljs-string">&quot;x-pjax-url&quot;</span>).replace(<span class="hljs-string">&quot;//&quot;</span> + upstream_domain, <span class="hljs-string">&quot;//&quot;</span> + url_hostname));<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> content_type = new_response_headers.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;content-type&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (content_type != <span class="hljs-literal">null</span> &amp;&amp; content_type.includes(<span class="hljs-string">&#x27;text/html&#x27;</span>) &amp;&amp; content_type.includes(<span class="hljs-string">&#x27;UTF-8&#x27;</span>)) &#123;<br>            original_text = <span class="hljs-keyword">await</span> replace_response_text(original_response_clone, upstream_domain, url_hostname);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            original_text = original_response_clone.body<br>        &#125;<br><br>        response = <span class="hljs-keyword">new</span> Response(original_text, &#123;<br>            status,<br>            headers: new_response_headers<br>        &#125;)<br>    &#125;<br>    <span class="hljs-keyword">return</span> response;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">async</span> function <span class="hljs-title">replace_response_text</span>(<span class="hljs-params">response, upstream_domain, host_name</span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> text = <span class="hljs-keyword">await</span> response.text()<br><br>    <span class="hljs-keyword">var</span> i, j;<br>    <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> replace_dict) &#123;<br>        j = replace_dict[i]<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-string">&#x27;$upstream&#x27;</span>) &#123;<br>            i = upstream_domain<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-string">&#x27;$custom_domain&#x27;</span>) &#123;<br>            i = host_name<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-string">&#x27;$upstream&#x27;</span>) &#123;<br>            j = upstream_domain<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == <span class="hljs-string">&#x27;$custom_domain&#x27;</span>) &#123;<br>            j = host_name<br>        &#125;<br><br>        <span class="hljs-keyword">let</span> re = <span class="hljs-keyword">new</span> RegExp(i, <span class="hljs-string">&#x27;g&#x27;</span>)<br>        text = text.replace(re, j);<br>    &#125;<br>    <span class="hljs-keyword">return</span> text;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">async</span> function <span class="hljs-title">device_status</span>(<span class="hljs-params">user_agent_info</span>)</span> &#123;<br>    <span class="hljs-keyword">var</span> agents = [<span class="hljs-string">&quot;Android&quot;</span>, <span class="hljs-string">&quot;iPhone&quot;</span>, <span class="hljs-string">&quot;SymbianOS&quot;</span>, <span class="hljs-string">&quot;Windows Phone&quot;</span>, <span class="hljs-string">&quot;iPad&quot;</span>, <span class="hljs-string">&quot;iPod&quot;</span>];<br>    <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> v = <span class="hljs-number">0</span>; v &lt; agents.length; v++) &#123;<br>        <span class="hljs-keyword">if</span> (user_agent_info.indexOf(agents[v]) &gt; <span class="hljs-number">0</span>) &#123;<br>            flag = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVA继承问题</title>
      <link href="/2023/03/14/java%E7%BB%A7%E6%89%BF%E9%97%AE%E9%A2%98/"/>
      <url>/2023/03/14/java%E7%BB%A7%E6%89%BF%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="子类拥有父类非private的属性，方法；子类可以拥有自己的属性和方法，即子类可以对父类进行扩展；子类可以用自己的方式实现父类的方法（重定义）。"><a href="#子类拥有父类非private的属性，方法；子类可以拥有自己的属性和方法，即子类可以对父类进行扩展；子类可以用自己的方式实现父类的方法（重定义）。" class="headerlink" title="子类拥有父类非private的属性，方法；子类可以拥有自己的属性和方法，即子类可以对父类进行扩展；子类可以用自己的方式实现父类的方法（重定义）。"></a>子类拥有父类非private的属性，方法；子类可以拥有自己的属性和方法，即子类可以对父类进行扩展；子类可以用自己的方式实现父类的方法（重定义）。</h2><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;add function in Class A is running...&quot;</span>);<br>i = i + <span class="hljs-number">2</span>;<br>System.out.print(<span class="hljs-string">&quot;i = &quot;</span> + i);<br>&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br><span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>System.out.println(<span class="hljs-string">&quot;before running function add: a.i = &quot;</span> + a.i);<br>    a.add();<br>    System.out.println(<span class="hljs-string">&quot;after running function add: a.i = &quot;</span> + a.i);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;add function in Class B is running...&quot;</span>);<br>i = i + <span class="hljs-number">3</span>;<br>System.out.print(<span class="hljs-string">&quot;i = &quot;</span>+i);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">before running function add: a.i = 10<br>add function in Class B is running...<br>i = 23after running function add: a.i = 10<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode刷题记录1-两数之和</title>
      <link href="/2023/02/15/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2023/02/15/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><p><a href="https://leetcode.cn/problems/two-sum/description/">原题传送门</a></p><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出<strong>和</strong>为目标值 <code>target</code>  的那<strong>两个</strong>整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入：nums = [2,7,11,15], target = 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</p><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><p>输入：nums = [3,2,4], target = 6<br>输出：[1,2]</p><h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><p>输入：nums = [3,3], target = 6<br>输出：[0,1]</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="C-1——暴力破解法"><a href="#C-1——暴力破解法" class="headerlink" title="C++1——暴力破解法"></a>C++1——暴力破解法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-comment">// 将nums的宽度直接保存下来</span><br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-comment">// 遍历循环解题</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i+<span class="hljs-number">1</span>; j &lt; n; j++)&#123;<br>                <span class="hljs-keyword">if</span>(nums[i] + nums[j] == target)&#123;  <span class="hljs-comment">//如果i和j指向的数和为target就是答案 </span><br>                    <span class="hljs-keyword">return</span> &#123;i,j&#125;;  <span class="hljs-comment">// 返回vector类型值</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>leetcode运行时间：264 ms；内存：9.9 MB</p></blockquote><h3 id="C-2——引入二分查找和线性查找"><a href="#C-2——引入二分查找和线性查找" class="headerlink" title="C++2——引入二分查找和线性查找"></a>C++2——引入二分查找和线性查找</h3><p>将数组先拷贝一份，将备份排序，由小到大遍历，看target和当前数的差值是不是在数组中，如果在就利用线性查找去找到下标，如果不在就继续往后遍历。</p><p>在线性遍历中要防止遍历到两个相同的值，【x的值对应的下标】可以在【0到n-1】中遍历，target-x的值只能先在【【x的值对应的下标+1】到n-1】中遍历，如果没有就只能在【0到【x的值对应的下标-1】】中遍历了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 实现二分查找</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">binSearch</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span> value)</span></span>&#123;<br>        <span class="hljs-keyword">while</span>(left &lt;= right)&#123;<br>            <span class="hljs-type">int</span> mid = (left + right) &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 右移运算符&gt;&gt;,运算结果正好能对应一个整数的二分之一值</span><br>            <span class="hljs-comment">// 这就正好能代替数学上的除2运算，但是比除2运算要快</span><br>            <span class="hljs-comment">// 如mid=(left+right)&gt;&gt;1相当于mid=(left+right)/2</span><br>            <span class="hljs-keyword">if</span>(value == arr[mid])&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(value &gt; arr[mid])&#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 线性查找</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">linearSearch</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span> value)</span></span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = left; i &lt;= right; ++i)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i] == value)&#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-comment">// 拷贝一份数组</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">numsCopy</span><span class="hljs-params">(nums)</span></span>;<br>        <span class="hljs-comment">// 将新的数组强制排序</span><br>        <span class="hljs-built_in">sort</span>(numsCopy.<span class="hljs-built_in">begin</span>(),numsCopy.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-comment">// 将nums的宽度直接保存下来</span><br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)&#123;<br>            x = numsCopy[i];<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">binSearch</span>(numsCopy, i+<span class="hljs-number">1</span>, n<span class="hljs-number">-1</span>, target - x))&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 找到</span><br>        <span class="hljs-type">int</span> firstNum = <span class="hljs-built_in">linearSearch</span>(nums, <span class="hljs-number">0</span>, n<span class="hljs-number">-1</span>, x);<br>        <span class="hljs-type">int</span> secondNum = <span class="hljs-built_in">linearSearch</span>(nums, firstNum+<span class="hljs-number">1</span>, n<span class="hljs-number">-1</span>, target - x);<br>        <span class="hljs-keyword">if</span>(secondNum == <span class="hljs-number">-1</span>)&#123;<br>            secondNum = <span class="hljs-built_in">linearSearch</span>(nums, <span class="hljs-number">0</span>, firstNum<span class="hljs-number">-1</span>, target - x);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(firstNum == <span class="hljs-number">-1</span> || secondNum == <span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-keyword">return</span> &#123;&#125;;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> &#123;firstNum, secondNum&#125;;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>leetcode运行时间：12 ms；内存：10.2 MB</p></blockquote><h3 id="C-3——map法"><a href="#C-3——map法" class="headerlink" title="C++3——map法"></a>C++3——map法</h3><p>先定义一个map，如果has这个map有x，has[x]表示在枚举这个数之前，x就是这个数字的下标。先枚举每个数，如果能找到target-nums[i]，就说明map中有这个数字，返回这两个下标，否则就把nums[i]的下标置为i，如果一直没有找到就返回空</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; has;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; --i)&#123;<br>            <span class="hljs-keyword">if</span>(has.<span class="hljs-built_in">find</span>(target - nums[i]) != has.<span class="hljs-built_in">end</span>())&#123;<br>                <span class="hljs-keyword">return</span> &#123;has[target-nums[i]],i&#125;;<br>            &#125;<br>            has[nums[i]]=i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>leetcode运行时间：8 ms；内存：11.1 MB</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 每日一题 </category>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode刷题记录1-两数之和</title>
      <link href="/2023/02/15/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952-%E5%9B%9E%E6%96%87%E6%95%B0/"/>
      <url>/2023/02/15/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952-%E5%9B%9E%E6%96%87%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h2><p><a href="https://leetcode.cn/problems/palindrome-number/description/">原题传送门</a></p><p>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><ul><li>例如，<code>121</code> 是回文，而 <code>123</code> 不是。</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入：x = 121<br>输出：true</p><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><p>输入：x = -121<br>输出：false<br>解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</p><h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><p>输入：x = 10<br>输出：false<br>解释：从右向左读, 为 01 。因此它不是一个回文数。</p><p>提示：</p><ul><li><code>-231 &lt;= x &lt;= 231 - 1</code></li></ul><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="C-1——暴力破解法"><a href="#C-1——暴力破解法" class="headerlink" title="C++1——暴力破解法"></a>C++1——暴力破解法</h3><p>将x反转后和自身比较大小</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> reverse = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> original = x;<br>        <span class="hljs-keyword">while</span>(x &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-type">int</span> tmp = x % <span class="hljs-number">10</span>;<br>            reverse = reverse * <span class="hljs-number">10</span> + tmp;<br>            x/=<span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(reverse == original)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>leetcode运行时间：12 ms；内存：5.7 MB</p></blockquote><h3 id="C-2——由于数字对称性，即可取一半进行计算"><a href="#C-2——由于数字对称性，即可取一半进行计算" class="headerlink" title="C++2——由于数字对称性，即可取一半进行计算"></a>C++2——由于数字对称性，即可取一半进行计算</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(x == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> n = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-built_in">log10</span>(x)) + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 取数字以10为底的对数，获取位数信息</span><br>        <span class="hljs-comment">/* log10函数在cmath头文件中 */</span><br>        <span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">while</span>(n&gt;<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-type">int</span> hight = x / <span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>, n - <span class="hljs-number">1</span>);  <span class="hljs-comment">// 取10的n-1次方</span><br>            <span class="hljs-comment">/* pow函数在cmath头文件中 */</span><br>            <span class="hljs-type">int</span> low = x%<span class="hljs-number">10</span>;<br>            <span class="hljs-keyword">if</span>(hight != low)&#123;<br>                flag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            x = (x - hight * <span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>, n - <span class="hljs-number">1</span>))/<span class="hljs-number">10</span>;<br>            n-=<span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>leetcode运行时间：8 ms；内存：5.9 MB</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 每日一题 </category>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Traffmonetizer使用教程</title>
      <link href="/2023/02/01/traffmonetizer%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2023/02/01/traffmonetizer%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>直达一键运行脚本→<a href="https://blog.zhuanjie.ltd/2023/02/01/traffmonetizer%e4%bd%bf%e7%94%a8%e6%95%99%e7%a8%8b/#2.-%E4%BD%BF%E7%94%A8%E5%AE%98%E6%96%B9%E6%8F%90%E4%BE%9B%E7%9A%84%20Windows%2C%20Mac%2C%20Android%2C%20Docker%20%E8%BF%90%E8%A1%8C">传送门</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Traffmonetizer是一个来自欧洲的流量挂机平台，类似Peer2profit，满10刀可提现(Paypal、BTC、Payoneer)</p><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p>Traffmonetizer官网：<a href="https://app.traffmonetizer.com/">https://app.traffmonetizer.com/</a></p><p>Docker：<a href="https://hub.docker.com/r/traffmonetizer/cli">https://hub.docker.com/r/traffmonetizer/cli</a></p><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><h3 id="1-获取application-token"><a href="#1-获取application-token" class="headerlink" title="1. 获取application token"></a>1. 获取application token</h3><p>在 <a href="https://app.traffmonetizer.com/dashboard">https://app.traffmonetizer.com/dashboard</a> 左上角复制 application token</p><h3 id="2-使用官方提供的-Windows-Mac-Android-Docker-运行"><a href="#2-使用官方提供的-Windows-Mac-Android-Docker-运行" class="headerlink" title="2. 使用官方提供的 Windows, Mac, Android, Docker 运行"></a>2. 使用官方提供的 Windows, Mac, Android, Docker 运行</h3><p>这里我提供<strong>一键运行脚本</strong>如下（**注意：将<code>xxxxxxxxxx</code>替换为你的 <code>application token</code>**）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://startpage.zhuanjie.ltd/download/randall-traffmonetizer.sh &amp;&amp; chmod +x ./randall-traffmonetizer.sh &amp;&amp; bash ./randall-traffmonetizer.sh xxxxxxxxxx<br></code></pre></td></tr></table></figure><h2 id="附-脚本文件"><a href="#附-脚本文件" class="headerlink" title="附-脚本文件"></a>附-脚本文件</h2><p>初学shell，脚本臃肿，仅适配Ubuntu和Centos</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># @Author : 转接</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@Date : 23/02/01</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#/*传入参数 traffmonetizer 中的 application token,</span></span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">*在 https://app.traffmonetizer.com/dashboard 中获取</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">*/</span><br><br>get_arch=`uname  -a`<br><br>if [[ $get_arch =~ &quot;x86_64&quot; ]];then<br>    echo &quot;ARM64机器&quot;<br>    if [[ $get_arch =~ &quot;ubuntu&quot; ]];then<br>        echo &quot;ubuntu系统&quot;<br>        sudo apt-get update<br>        sudo apt install docker.io -y<br>    elif [[ $get_arch =~ &quot;centos&quot; ]];then<br>        echo &quot;centos系统&quot;<br>        yum -y update<br>        yum -y install docker<br>    else<br>        echo &quot;未适配系统&quot;<br>        exit 2<br>    fi<br>    echo &quot;开始安装……请等待&quot;<br>    if [[ -n $(docker ps -q -f &quot;name=^ra-tm$&quot;) ]];then<br>        echo &quot;存在同名镜像，执行删除&quot;<br>        sudo docker stop ra-tm<br>        sudo docker rm ra-tm<br>    fi<br>    sudo docker run -d --name ra-tm traffmonetizer/cli start accept --token $1<br><br>elif [[ $get_arch =~ &quot;aarch64&quot; ]];then<br>    echo &quot;ARM64机器&quot;<br>    if [[ $get_arch =~ &quot;ubuntu&quot; ]];then<br>        echo &quot;ubuntu系统&quot;<br>        sudo apt-get update<br>        sudo apt install docker.io -y<br>    elif [[ $get_arch =~ &quot;centos&quot; ]];then<br>        echo &quot;centos系统&quot;<br>        yum -y update<br>        yum -y install docker<br>    else<br>        echo &quot;未适配系统&quot;<br>        exit 2<br>    fi<br>    echo &quot;开始安装……请等待&quot;<br>    if [[ -n $(docker ps -q -f &quot;name=^ra-tm$&quot;) ]];then<br>        echo &quot;存在同名镜像，执行删除&quot;<br>        sudo docker stop ra-tm<br>        sudo docker rm ra-tm<br>    fi<br>    sudo docker run -d --name ra-tm traffmonetizer/cli:arm64v8 start accept --token $1<br>    <br>elif [[ $get_arch =~ &quot;mips64&quot; ]];then<br>    echo &quot;this is mips64&quot;<br>else<br>    echo &quot;未知架构!!&quot;<br>    exit 1<br>fi<br>exit 0<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Linux </category>
          
          <category> shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浅读算法导论——3.1渐近记号</title>
      <link href="/2022/12/26/%E6%B5%85%E8%AF%BB%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA-3-1%E6%B8%90%E8%BF%91%E8%AE%B0%E5%8F%B7/"/>
      <url>/2022/12/26/%E6%B5%85%E8%AF%BB%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA-3-1%E6%B8%90%E8%BF%91%E8%AE%B0%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>渐近记号适用于函数，Θ(n2)就是函数an2+bn+c。渐近记号适用于刻画算法运行时间、算法使用的空间数量等的函数</p><p>O(1)&lt;O(log2(n))&lt;O(n)&lt;O(nlog2(n))&lt;O(n2)&lt;O(2n)&lt;O(n!)&lt;O(nn)</p><h2 id="Θ记号、O记号、Ω记号"><a href="#Θ记号、O记号、Ω记号" class="headerlink" title="Θ记号、O记号、Ω记号"></a>Θ记号、O记号、Ω记号</h2><p><img src="https://blog.zhuanjie.ltd/img/uploads/2022/12/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTYxMTI2MTc0NjE0MjE4-1024x328.png"></p><h3 id="Θ记号"><a href="#Θ记号" class="headerlink" title="Θ记号"></a>Θ记号</h3><p>Θ记号限制一个函数在常量因子内，对所有n≥n0时，函数f(n)在一个常量因子内等于g(n)，我们称g(n)是f(n)的一个<strong>渐近紧确界</strong></p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>对一个给定的函数g(n)，用Θ(g(n))表示以下函数集合</p><blockquote><p><code>Θ(g(n)) = &#123;f(n) 存在正常量c1，c2和n0，使得对于所有的n≥n0，有0≤c1g(n)≤f(n)≤c2g(n)&#125;</code></p></blockquote><p>若存在正常量c1和c2，使得对于足够大的n，函数f(n)能夹入c1g(n)和c2g(n)之间，则f(n)属于集合Θ(g(n))。所以可以记<code>f(n)∈Θ(g(n))</code>，通常记为<code>f(n)=Θ(g(n))</code></p><p>我们称g(n)是f(n)的一个<strong>渐进紧确界</strong></p><p>Θ(g(n))的定义要求每个成员f(n)∈Θ(g(n))<strong>均渐近非负</strong>，即当n足够大时，f(n)非负，否则集合Θ(g(n))为空</p><h4 id="非形式化概念"><a href="#非形式化概念" class="headerlink" title="非形式化概念"></a>非形式化概念</h4><p>对于Θ记号的非形式化概念：扔掉低阶项，并忽略最高项前的系数</p><p>原因：当n足够大时，即使最高项的一个很小的部分都足够支配所有的低级项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs other">e.g.证明(1/2)n2-3n=Θ(n2)<br>解：根据Θ记号定义，假设存在c1，c2和n0使得对所有的n≥n0，有：<br>    0 ≤ c1n2 ≤ (1/2)n2-3n ≤ c2n2<br>    两边同时除以n2得：<br>    c1 ≤ (1/2)-(3/n) ≤ c2<br>    对于c1=1/14， c2=1/2， n0=7时，不等式恒成立，原式得证。<br></code></pre></td></tr></table></figure><p>对于任意二次函数f(n)=an2+bn+c，其中a、b和c均为常量且a&gt;0。根据非形式化概念可得f(n)=Θ(n2)，证明时取<code>c1=a/4</code>， <code>c2=7a/4</code>， <code>n0=2*max&#123; b/a, √(c/a) &#125;</code>，可证明对于所有的n≥n0，有0≤c1n2≤an2+bn+c≤c2n2</p><h3 id="O记号"><a href="#O记号" class="headerlink" title="O记号"></a>O记号</h3><p>O记号为函数给出一个在常量因子内的上界</p><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>Θ记号渐进地给出一个函数的上界和下界，当只有一个<strong>渐进上界</strong>时，用O记号表示</p><blockquote><p><code>O(g(n)) = &#123;f(n) 存在正常量c和n0，使得对于所有的n≥n0，有0≤f(n)≤cg(n)&#125;</code></p></blockquote><p>对在n0及其右边的所有值n，函数f(n)的值总小于或等于cg(n)</p><p>f(n)=Θ(g(n))里面蕴含着f(n)=O(g(n))，在集合中有Θ(g(n))⊆O(g(n))</p><p>对于任意二次函数an2+bn+c，其中a&gt;0，在Θ(n2)中的证明也证明了在O(n2)中</p><p>ESP.当a&gt;0时，对于任意线性函数an+b也在O(n2)中，证明取<code>c=a+b</code>，<code>n0=max&#123; 1, -b/a &#125;</code>，有(a+b)n2 ≥ an+b ≥ 0</p><p>我们仅仅要求g(n)的某个常量倍数是f(n)的渐进上界，而不是要求他是一个多么紧确的上界</p><p>O记号是描述上界的，当它用来限制算法的最坏情况运行时间，我们说运行时间为O(n2)时，指的是存在一个O(n2)的函数f(n)，使得对于n的任意值，不管选择什么特定的规模为n的输入，运行时间上界都是f(n)，也就是说最坏情况运行时间是O(n2)</p><h3 id="Ω记号"><a href="#Ω记号" class="headerlink" title="Ω记号"></a>Ω记号</h3><p>Ω记号为函数给出一个在常量因子内的下界</p><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p>Ω记号提供了<strong>渐进下界</strong></p><blockquote><p><code>Ω(g(n)) = &#123;f(n) 存在正常量c和n0，使得对于所有的n≥n0，有0≤cg(n)≤f(n)&#125;</code></p></blockquote><p>对在n0及其右边的所有值n，函数f(n)的值总大于或等于cg(n)</p><p>对于任意两个函数f(n)和g(n)，有：<code>f(n)=Θ(g(n))⇔f(n)=O(g(n))且f(n)=Ω(g(n))</code></p><h2 id="等式中的渐进记号"><a href="#等式中的渐进记号" class="headerlink" title="等式中的渐进记号"></a>等式中的渐进记号</h2><p>当渐进记号独立于等式（或不等式）的右边时，表示集合成员关系</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">e.g.n=<span class="hljs-constructor">O(<span class="hljs-params">n2</span>)</span>表示n∈<span class="hljs-constructor">O(<span class="hljs-params">n2</span>)</span><br></code></pre></td></tr></table></figure><p>当渐进记号出现于某个公式里时，它表示某个我们不关注名称的匿名函数</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">e</span>.g.公式<span class="hljs-number">2</span>n2+<span class="hljs-number">3</span>n+<span class="hljs-number">1</span>=<span class="hljs-number">2</span>n2+Θ(n)表示<span class="hljs-number">2</span>n2+<span class="hljs-number">3</span>n+<span class="hljs-number">1</span>=<span class="hljs-number">2</span>n2+f(n)，其中f(n)为我们不需要关注的匿名函数<br></code></pre></td></tr></table></figure><p>渐进记号出现在等式左边表示无论怎样选择等号左边的匿名函数，总有一种办法来选择等号右边的匿名函数使得等号成立。对于任意函数f(n)∈Θ(n)，存在某个函数g(n)∈Θ(n2)，使得对于所有的n有2n2+f(n)=g(n)，即等式右边比等式左边提供的细节更粗糙</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">e</span>.g.<span class="hljs-number">2</span>n2+<span class="hljs-number">3</span>n+<span class="hljs-number">1</span> = <span class="hljs-number">2</span>n2+Θ(n) = Θ(n2)<br></code></pre></td></tr></table></figure><h2 id="o记号和ω记号"><a href="#o记号和ω记号" class="headerlink" title="o记号和ω记号"></a>o记号和ω记号</h2><h3 id="o记号"><a href="#o记号" class="headerlink" title="o记号"></a>o记号</h3><p>由O记号提供的渐进上界可能是也可能不是渐进紧确的。如界2n2=O(n2)是渐进紧确的，但是2n=O(n2)不是</p><h4 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h4><p>o记号表示<strong>非渐进紧确</strong>的上界</p><blockquote><p><code>o(g(n)) = &#123;f(n) 存在正常量c和n0，使得对于所有的n≥n0，有0≤f(n)≤cg(n)&#125;</code></p></blockquote><p>当n趋向于无穷时，函数f(n)相对于g(n)来说变得微不足道了</p><p><img src="https://blog.zhuanjie.ltd/img/uploads/2022/12/MommyTalk1672044474587-300x123.png"></p><h3 id="ω记号"><a href="#ω记号" class="headerlink" title="ω记号"></a>ω记号</h3><h4 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h4><p>ω记号来表示非渐进紧确的下界，定义方式是：f(n)∈ω(g(n))当且仅当g(n)∈o(f(n))</p><blockquote><p><code>ω(g(n)) = &#123;f(n) 存在正常量c和n0，使得对于所有的n≥n0，有0≤cg(n)≤f(n)&#125;</code></p></blockquote><p>例如，n2/2=ω(n)，但是n2/2≠ω(n2)，关系f(n)=ω(g(n))蕴含着</p><p><img src="https://blog.zhuanjie.ltd/img/uploads/2022/12/MommyTalk1672044553642-300x114.png"></p><h2 id="渐近记号Θ、Ο、Ω、o、ω之间的关系"><a href="#渐近记号Θ、Ο、Ω、o、ω之间的关系" class="headerlink" title="渐近记号Θ、Ο、Ω、o、ω之间的关系"></a>渐近记号Θ、Ο、Ω、o、ω之间的关系</h2><p><img src="https://blog.zhuanjie.ltd/img/uploads/2022/12/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTYxMTI2MjE0OTM0NTk4.png"></p><p>假定f(n)和g(n)渐进为正</p><h3 id="传递性"><a href="#传递性" class="headerlink" title="传递性"></a>传递性</h3><p>f(n) = Θ(g(n)) 且 g(n) = Θ(h(n)) 则 f(n) = Θ(h(n))</p><p>f(n) = Ο(g(n)) 且 g(n) = Ο(h(n)) 则 f(n) = Ο(h(n))</p><p>f(n) = Ω(g(n)) 且 g(n) = Ω(h(n)) 则 f(n) = Ω(h(n))</p><p>f(n) = o(g(n)) 且 g(n) = o(h(n)) 则 f(n) = o(h(n))</p><p>f(n) = ω(g(n)) 且 g(n) = ω(h(n)) 则 f(n) = ω(h(n))</p><h3 id="自反性"><a href="#自反性" class="headerlink" title="自反性"></a>自反性</h3><p>f(n) = Θ(f(n))</p><p>f(n) = Ο(f(n))</p><p>f(n) = Ω(f(n))</p><h3 id="对称性"><a href="#对称性" class="headerlink" title="对称性"></a>对称性</h3><p>f(n) = Θ(g(n)) 当且仅当 g(n) = Θ(f(n))</p><h3 id="转置对称性"><a href="#转置对称性" class="headerlink" title="转置对称性"></a>转置对称性</h3><p>f(n) = Ο(g(n)) 当且仅当 g(n) = Ω(f(n))</p><p>f(n) = o(g(n)) 当且仅当 g(n) = ω(f(n))</p><table><thead><tr><th align="center">符号</th><th align="center">含义</th><th align="center">类比</th></tr></thead><tbody><tr><td align="center">Θ</td><td align="center">渐进紧确界</td><td align="center">相当于“=”</td></tr><tr><td align="center">O</td><td align="center">渐进上界</td><td align="center">相当于“≤”</td></tr><tr><td align="center">Ω</td><td align="center">渐进下界</td><td align="center">相当于”≥”</td></tr><tr><td align="center">o</td><td align="center">渐进非紧的上界</td><td align="center">相当于”&lt;”</td></tr><tr><td align="center">ω</td><td align="center">渐进非紧的下界</td><td align="center">相当于”&gt;”</td></tr></tbody></table><p>若f(n) = o(g(n))则称f(n)<strong>渐进小于</strong>g(n)，若f(n) = ω(g(n))则称f(n)<strong>渐进大于</strong>g(n)</p><h3 id="三分性"><a href="#三分性" class="headerlink" title="三分性"></a>三分性</h3><p>虽然所有实数都可以比较，但是不是所有函数都可以渐进比较的。两个函数f(n)和g(n)可能<code>f(n) = Ο(g(n))</code>和<code>f(n) = Ω(g(n))</code>都不成立</p><p>如：n和n1+sin(n)，因为1+sin(n)在0到2之间摆动</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渐近记号 </tag>
            
            <tag> 算法导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题——最大差值</title>
      <link href="/2022/12/10/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-%E6%9C%80%E5%A4%A7%E5%B7%AE%E5%80%BC/"/>
      <url>/2022/12/10/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-%E6%9C%80%E5%A4%A7%E5%B7%AE%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>在数组中，某个数字减去它右边的数字得到一个数对之差。求所有数对之差的最大值。 例如，在数组｛2，4，1，16，7，5，11，9｝中，数对之差的最大值是11，是16减去5的结果。 给出一个数组，求其满足要求的最大差值</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="方法1（存在问题）"><a href="#方法1（存在问题）" class="headerlink" title="方法1（存在问题）"></a>方法1（存在问题）</h3><p>采用两个指针进行扫描，前指针往后扫描，后指针往前扫描；前指针只停留在后一个比指针指向的大的数字上，后指针只停留在前一个比指针大的数字上；</p><p>前指针上的数字减去后指针上的数字与储存值进行判断取其大值</p><p>当两个前指针大于等于后指针时候结束</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">maxDif</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr, <span class="hljs-type">int</span> n)</span>&#123; <span class="hljs-comment">// arr表示数组，n表示数组长度</span><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = n<span class="hljs-number">-1</span>, temp = arr[i] - arr[j];<br>    <span class="hljs-keyword">while</span>(i &lt; j)&#123;<br>        <span class="hljs-keyword">while</span>(arr[i] &lt;= arr[i+<span class="hljs-number">1</span>])&#123;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(arr[j] &gt;= arr[j<span class="hljs-number">-1</span>])&#123;<br>            j--;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i &lt; j &amp;&amp; arr[i] - arr[j] &gt; temp)&#123;<br>            temp = arr[i] - arr[j];<br>        &#125;<br>        i++;<br>        j--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h4><p>出现类似{5, 4, 6, 3, 2, 1}的数组将会丢失信息</p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>把数组分成两个子数组，其实没有必要拿左边子数组中较小的数字去和右边子数组中较大的数字相减。可以想象，数对之差的最大值只可能是下面三种情况之一：</p><p>①被减数和减数都在 第一个子数组中，即第一个子数组中的数对之差的最大值；②被减数和减数都在第二个子数组中，即第二个子数组中数对之差的最大值；③被减数在第一个子数组中，是第一个子数组的最大值。减数在第二个子数组中，是第二个子数组的最小值。这三个差值的最大者就是整个数组中数对之差的最大值。在前面提到的三种情况中，得到第一个子数组的最大值和第二子数组的最小值不是一件难事，但如何得到两个子数组中的数对之差的最大值？这其实是原始问题的子问题，可以递归地解决。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">core</span><span class="hljs-params">(<span class="hljs-type">int</span>* start, <span class="hljs-type">int</span>* end, <span class="hljs-type">int</span>* max, <span class="hljs-type">int</span>* min)</span>&#123; <span class="hljs-comment">// core function</span><br>    <span class="hljs-keyword">if</span>(end == start)&#123; <span class="hljs-comment">// if the array is empty</span><br>        *max = *min = *start; <span class="hljs-comment">// set max and min to the only element</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span>* mid = start + (end - start) / <span class="hljs-number">2</span>; <span class="hljs-comment">// find the middle of the array</span><br>    <span class="hljs-type">int</span> maxLeft, minLeft, maxRight, minRight; <span class="hljs-comment">// declare variables for the max and min of the left and right subarrays</span><br>    <span class="hljs-type">int</span> leftDiff = core(start, mid, &amp;maxLeft, &amp;minLeft); <span class="hljs-comment">// find the max and min of the left subarray</span><br>    <span class="hljs-type">int</span> rightDiff = core(mid + <span class="hljs-number">1</span>, end, &amp;maxRight, &amp;minRight); <span class="hljs-comment">// find the max and min of the right subarray</span><br>    <span class="hljs-type">int</span> crossDiff = maxRight - minLeft; <span class="hljs-comment">// find the difference between the max of the right subarray and the min of the left subarray</span><br>    *max = (maxLeft &gt; maxRight)? maxLeft : maxRight; <span class="hljs-comment">// set max to the max of the left and right subarrays</span><br>    *min = (minLeft &lt; minRight)? minLeft : minRight; <span class="hljs-comment">// set min to the min of the left and right subarrays</span><br>    <span class="hljs-type">int</span> maxDiff = (leftDiff &gt; rightDiff)? leftDiff : rightDiff; <span class="hljs-comment">// set maxDiff to the max of the left and right differences</span><br>    maxDiff = (maxDiff &gt; crossDiff)? maxDiff : crossDiff; <span class="hljs-comment">// set maxDiff to the max of the maxDiff and the crossDiff</span><br>    <span class="hljs-keyword">return</span> maxDiff; <span class="hljs-comment">// return the max difference</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">maxDif</span><span class="hljs-params">(<span class="hljs-type">int</span>* arr, <span class="hljs-type">int</span> n)</span>&#123; <span class="hljs-comment">// arr表示数组，n表示数组长度</span><br>    <span class="hljs-keyword">if</span>(arr == <span class="hljs-literal">NULL</span>  n &lt;= <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> max, min;<br>    <span class="hljs-keyword">return</span> core(arr, arr + n - <span class="hljs-number">1</span>, &amp;max, &amp;min);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>此处注释由Copilot生成</p></blockquote><h3 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h3><p>动态规划，定义diff[i]是以数组中第i个数字为减数的所有数对之差的最大值。也就是说，对于任意h(h&lt;i), diff[i] ≥ arr[h] - arr[i]。diff[i] (0≤i&lt;n) 的最大值就是整个数组最大的数对之差。假设已求出diff[i]，如何求dififf[i+1]?对于diff[i]，肯定存在一个h(h&lt;i)，满足 arr[h]减 去number[i]之差是最大的，即arr[h]应是arr[i]之前的所有数字的最大值。求diff[i+1]时，需要找到第i＋1个数字之前的最大值。第i＋1个数字之前的最大值只有两种可能：这个最大值可能是第i个数字之前的最大值，也可能是第i个数字。第i＋1个数字之前的最大值肯定是这两者的较大者。我们只要拿第i＋1个数字之前的最大值减去 arr[i＋1]，就得到了 diff[i＋1]。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">maxDif</span><span class="hljs-params">(<span class="hljs-type">int</span>* arr, <span class="hljs-type">int</span> n)</span>&#123; <span class="hljs-comment">// arr表示数组，n表示数组长度</span><br>    <span class="hljs-keyword">if</span>(arr == <span class="hljs-literal">NULL</span>  n &lt;= <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> max = arr[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 第i个元素之前的最大值</span><br>    <span class="hljs-type">int</span> maxDiff = arr[<span class="hljs-number">0</span>] - arr[<span class="hljs-number">1</span>]; <span class="hljs-comment">// 最大差值</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i<span class="hljs-number">-1</span>] &gt; max)&#123; <span class="hljs-comment">// 第i个数和之前最大的数字比较，更新max</span><br>            max = arr[i<span class="hljs-number">-1</span>];<br>        &#125;<br>        <span class="hljs-type">int</span> curDiff = max - arr[i];<br>        <span class="hljs-keyword">if</span>(curDiff &gt; maxDiff)&#123;<br>            maxDiff = curDiff;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxDiff;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下x-ui面板搭建</title>
      <link href="/2022/12/09/ubuntu%E4%B8%8Bx-ui%E9%9D%A2%E6%9D%BF%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/12/09/ubuntu%E4%B8%8Bx-ui%E9%9D%A2%E6%9D%BF%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>原始仓库：<a href="https://github.com/vaxilu/x-ui">https://github.com/vaxilu/x-ui</a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>x-ui面板支持vmess、vless、trojan、shadowsocks、dokodemo-door、socks、http等协议</p><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p>安装面板需要关闭防火墙，运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo iptables -P INPUT ACCEPT<br>sudo iptables -P FORWARD ACCEPT<br>sudo iptables -P OUTPUT ACCEPT<br>sudo iptables -F<br></code></pre></td></tr></table></figure><p>卸载netfilter-persistent</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get purge netfilter-persistent<br></code></pre></td></tr></table></figure><p>删除iptables并重启服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -rf /etc/iptables &amp;&amp; reboot<br></code></pre></td></tr></table></figure><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h3 id="自动安装"><a href="#自动安装" class="headerlink" title="自动安装"></a>自动安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bash &lt;(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)<br></code></pre></td></tr></table></figure><h3 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h3><p>从release页面下载最新安装包，并且上传至<code>/root/</code>文件夹并且解压，运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /root/<br>rm x-ui/ /usr/local/x-ui/ /usr/bin/x-ui -rf<br>tar zxvf x-ui-linux-amd64.tar.gz # 替换为你对应设备的对应压缩包<br>chmod +x x-ui/x-ui x-ui/bin/xray-linux-* x-ui/x-ui.sh<br>cp x-ui/x-ui.sh /usr/bin/x-ui<br>cp -f x-ui/x-ui.service /etc/systemd/system/<br>mv x-ui/ /usr/local/<br>systemctl daemon-reload<br>systemctl enable x-ui<br>systemctl restart x-ui<br></code></pre></td></tr></table></figure><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>使用安装时的<code>ip:端口</code>或者<code>域名:端口</code>进入面板</p><p><img src="https://blog.zhuanjie.ltd/img/uploads/2022/12/image-2-1024x384.png"></p><p>入站列表中添加结点</p><h2 id="特殊说明"><a href="#特殊说明" class="headerlink" title="特殊说明"></a>特殊说明</h2><p>tls支持密钥+公钥文件或者直接输入，可用acme申请</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>动态ip配置阿里云DDNS</title>
      <link href="/2022/12/09/%E5%8A%A8%E6%80%81ip%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91ddns/"/>
      <url>/2022/12/09/%E5%8A%A8%E6%80%81ip%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91ddns/</url>
      
        <content type="html"><![CDATA[<p>使用仓库：<a href="https://github.com/mgsky1/DDNS">利用Python+阿里云云解析API实现DDNS (github.com)</a></p><p>仓库文件：<a href="https://cloudreve.zhuanjie.ltd/s/OKCP">https://cloudreve.zhuanjie.ltd/s/OKCP</a></p><p>家庭等动态ip绑定域名需要实时更新域名指向的ip</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在阿里云控制台创建一个拥有使用DNS解析权限的AccessKey，记住AccessKeyId和AccessKeySecret，所需权限如下图</p><p><img src="https://blog.zhuanjie.ltd/img/uploads/2022/12/image-1-1024x460.png"></p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>服务器端需要<code>python3</code>和<code>aliyun-python-sdk-core</code>库，在服务器上运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install python3 python3-pip -y<br>sudo pip3 install aliyun-python-sdk-core<br></code></pre></td></tr></table></figure><p>在服务器上下载文件并解压或直接git拉去</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/mgsky1/DDNS.git<br></code></pre></td></tr></table></figure><p>编辑配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim ./DDNS/src/config.json<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;AccessKeyId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Your_AccessKeyId&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//你的阿里云AccessKeyId</span><br>    <span class="hljs-attr">&quot;AccessKeySecret&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Your_AccessKeySecret&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//你的阿里云AccessKeySecret</span><br>    <span class="hljs-attr">&quot;First-level-domain&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Your_First-level-domain&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//一级域名，例如 example.com</span><br>    <span class="hljs-attr">&quot;Second-level-domain&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Your_Second-level-domain&quot;</span><span class="hljs-comment">//二级域名，例如 ddns.example.com 填入ddns即可</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>最后运行即可</p><p>成功案例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@22-12-9-0643:~/DDNS/src# python3 DDNS.py <br>&#123;&#x27;type&#x27;: &#x27;A&#x27;, &#x27;ip&#x27;: &#x27;##.##.##.##&#x27;&#125;<br>成功！<br></code></pre></td></tr></table></figure><p>失败案例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@instance-20221206-1430:~/DDNS/src# python3 DDNS.py <br>&#123;&#x27;type&#x27;: &#x27;A&#x27;, &#x27;ip&#x27;: &#x27;##.##.##.##&#x27;&#125;<br>失败！原因为<br>The DNS record already exists.<br>可参考:https://help.aliyun.com/document_detail/29774.html?spm=a2c4g.11186623.2.20.fDjexq#%E9%94%99%E8%AF%AF%E7%A0%81<br>或阿里云帮助文档<br></code></pre></td></tr></table></figure><p>此处为已经存在相同名称相同ip的解析</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu开启crontab执行日志</title>
      <link href="/2022/12/09/ubuntu%E5%BC%80%E5%90%AFcrontab%E6%89%A7%E8%A1%8C%E6%97%A5%E5%BF%97/"/>
      <url>/2022/12/09/ubuntu%E5%BC%80%E5%90%AFcrontab%E6%89%A7%E8%A1%8C%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<p>Ubuntu默认不开启crontab的日志，但是在启动项里面有注释</p><p>未开启状态时，日志文件夹是这样的：</p><p><img src="https://blog.zhuanjie.ltd/img/uploads/2022/12/image-1024x100.png" alt="日志文件夹"></p><h2 id="开启方式"><a href="#开启方式" class="headerlink" title="开启方式"></a>开启方式</h2><ol><li> 编辑 <code>/etc/rsyslog.d/50-default.conf</code> 文件</li><li> 取消注释 <code>cron.* /var/log/cron.log</code> 这一行</li><li> 保存文件后运行 <code>sudo service rsyslog restart</code> 重启日志服务</li><li> 之后crontab运行的日志就放在 <code>/var/log/cron.log</code> 里面了</li></ol><h2 id="运行日志"><a href="#运行日志" class="headerlink" title="运行日志"></a>运行日志</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@22-12-9-0643:~# sudo vim /etc/rsyslog.d/50-default.conf<br>root@22-12-9-0643:~# sudo service rsyslog restart<br></code></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>crontab所有作业均由外壳执行，因此需要过命令启动该外壳片段以更改目录，如每10分钟在 <code>/root/DDNS/src</code> 下运行 <code>python3 DDNS.py</code>则需在crontab中写成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">*/10 *  * * *   cd /root/DDNS/src/ &amp;&amp; python3 /root/DDNS/src/DDNS.py<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>随机图片API</title>
      <link href="/2022/10/08/random-api/"/>
      <url>/2022/10/08/random-api/</url>
      
        <content type="html"><![CDATA[<h2 id="岁月小筑随机图片API接口"><a href="#岁月小筑随机图片API接口" class="headerlink" title="岁月小筑随机图片API接口"></a><a href="https://img.xjh.me/">岁月小筑随机图片API接口</a></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#https调用</span><br>https:<span class="hljs-regexp">//img</span>.xjh.me/random_img.php<br><span class="hljs-comment">#http调用</span><br>http:<span class="hljs-regexp">//img</span>.xjh.me/random_img.php<br></code></pre></td></tr></table></figure><p><img src="http://img.xjh.me/random_img.php" alt="当你只看到了这句话就说明这个API没啦！"></p><h2 id="樱道随机图片API"><a href="#樱道随机图片API" class="headerlink" title="樱道随机图片API"></a><a href="https://img.r10086.com/">樱道随机图片API</a></h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-attr">#接口略多，自己去官网看把</span><br><span class="hljs-attr">https://api.r10086</span>.com/img-api.php?type=<span class="hljs-meta">%</span>E<span class="hljs-number">5</span><span class="hljs-meta">%</span><span class="hljs-number">8</span>A<span class="hljs-meta">%</span>A<span class="hljs-number">8</span><span class="hljs-meta">%</span>E<span class="hljs-number">6</span><span class="hljs-meta">%</span>BC<span class="hljs-meta">%</span>AB<span class="hljs-meta">%</span>E<span class="hljs-number">7</span><span class="hljs-meta">%</span>BB<span class="hljs-meta">%</span>BC<span class="hljs-meta">%</span>E<span class="hljs-number">5</span><span class="hljs-meta">%</span><span class="hljs-number">90</span><span class="hljs-meta">%</span><span class="hljs-number">881</span><br></code></pre></td></tr></table></figure><p><img src="https://api.r10086.com/img-api.php?type=%E5%8A%A8%E6%BC%AB%E7%BB%BC%E5%90%881" alt="当你只看到了这句话就说明这个API没啦！"></p><h2 id="搏天api"><a href="#搏天api" class="headerlink" title="搏天api"></a><a href="https://api.btstu.cn/doc/sjbz.php">搏天api</a></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">请求方式：get<br>请求地址：https:<span class="hljs-regexp">//</span>api.btstu.cn<span class="hljs-regexp">/sjbz/</span>api.php<br>返回格式：json/images<br>请求示例：https:<span class="hljs-regexp">//</span>api.btstu.cn<span class="hljs-regexp">/sjbz/</span>api.php?lx=dongman&amp;format=images<br></code></pre></td></tr></table></figure><p><img src="https://api.btstu.cn/sjbz/api.php?lx=dongman&format=images" alt="当你只看到了这句话就说明这个API没啦！"></p><h2 id="小歪API"><a href="#小歪API" class="headerlink" title="小歪API"></a><a href="https://api.ixiaowai.cn/">小歪API</a></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk">图片API基本调用格式：<br>https:<span class="hljs-regexp">//</span>api.ixiaowai.cn<span class="hljs-regexp">/api/</span>api.php（二次元动漫）<br>https:<span class="hljs-regexp">//</span>api.ixiaowai.cn<span class="hljs-regexp">/mcapi/m</span>capi.php（mc酱动漫）<br>https:<span class="hljs-regexp">//</span>api.ixiaowai.cn<span class="hljs-regexp">/gqapi/g</span>qapi.php（高清壁纸）<br><br>JSON调用格式<br>图片列：https:<span class="hljs-regexp">//</span>api.ixiaowai.cn<span class="hljs-regexp">/api/</span>api.php?return=json<br>文字列：https:<span class="hljs-regexp">//</span>api.ixiaowai.cn<span class="hljs-regexp">/ylapi/i</span>ndex.php/?code=js<br><br>JSON数据<br>&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-comment">#图片状态码</span><br>    <span class="hljs-string">&quot;acgurl&quot;</span>:<span class="hljs-string">&quot;https:\/\/ws1.sinaimg.cn\/large\/0072Vf1pgy1foxkjcneg1j31kw0w0hbs.jpg&quot;</span> <span class="hljs-comment">#图片地址</span><br>    <span class="hljs-string">&quot;width&quot;</span>:<span class="hljs-string">&quot;2048&quot;</span> <span class="hljs-comment">#图片宽</span><br>    <span class="hljs-string">&quot;height&quot;</span>:<span class="hljs-string">&quot;1152&quot;</span> <span class="hljs-comment">#图片高</span><br>&#125;<br><br>文字API基本调用格式：<br>https:<span class="hljs-regexp">//</span>api.ixiaowai.cn<span class="hljs-regexp">/ylapi/i</span>ndex.php（一言语录）<br>https:<span class="hljs-regexp">//</span>api.ixiaowai.cn<span class="hljs-regexp">/tgrj/i</span>ndex.php（舔狗日记）<br><br>二维码API基本调用格式：<br>https:<span class="hljs-regexp">//</span>api.ixiaowai.cn/ewm（网址转二维码）<br></code></pre></td></tr></table></figure><p><img src="https://api.ixiaowai.cn/api/api.php" alt="当你只看到了这句话就说明这个API没啦！"></p><p>一言</p><p>舔狗语录</p><h2 id="墨天逸API"><a href="#墨天逸API" class="headerlink" title="墨天逸API"></a><a href="https://api.mtyqx.cn/">墨天逸API</a></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">API基本调用格式：<br>https:<span class="hljs-regexp">//</span>api.mtyqx.cn<span class="hljs-regexp">/api/</span>random.php（二次元动漫）丨https:<span class="hljs-regexp">//</span>api.mtyqx.cn<span class="hljs-regexp">/tapi/</span>random.php（二次元动漫）<br><br>参数：<br>type=json<br><br>JSON调用格式<br>列：https:<span class="hljs-regexp">//</span>api.mtyqx.cn<span class="hljs-regexp">/api/</span>random.php?return=json 丨https:<span class="hljs-regexp">//</span>api.mtyqx.cn<span class="hljs-regexp">/tapi/</span>random.php?return=json<br><br>JSON数据<br>&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-comment">#图片状态码</span><br>    <span class="hljs-string">&quot;acgurl&quot;</span>:<span class="hljs-string">&quot;https:\/\/ws1.sinaimg.cn\/large\/0072Vf1pgy1foxkjcneg1j31kw0w0hbs.jpg&quot;</span> <span class="hljs-comment">#图片地址</span><br>    <span class="hljs-string">&quot;width&quot;</span>:<span class="hljs-string">&quot;2048&quot;</span> <span class="hljs-comment">#图片宽</span><br>    <span class="hljs-string">&quot;height&quot;</span>:<span class="hljs-string">&quot;1152&quot;</span> <span class="hljs-comment">#图片高</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://api.mtyqx.cn/api/random.php" alt="当你只看到了这句话就说明这个API没啦！"></p><h2 id="姬长信API"><a href="#姬长信API" class="headerlink" title="姬长信API"></a><a href="https://api.isoyu.com/">姬长信API</a></h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">#emmm接口嘎嘎多，自己去看官方文档把</span><br></code></pre></td></tr></table></figure><p><img src="https://api.isoyu.com/bing_images.php" alt="当你只看到了这句话就说明这个API没啦！"></p><h2 id="Unsplash-Image-API"><a href="#Unsplash-Image-API" class="headerlink" title="Unsplash Image API"></a><a href="https://unsplash.com/developers">Unsplash Image API</a></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">官方文档：https:<span class="hljs-regexp">//u</span>nsplash.com/documentation<span class="hljs-comment">#get-a-random-photo</span><br>接口：https:<span class="hljs-regexp">//</span>source.unsplash.com<span class="hljs-regexp">/random/</span><br>Get <span class="hljs-regexp">/photos/</span>random<br></code></pre></td></tr></table></figure><p><img src="https://source.unsplash.com/random/1280x720" alt="当你只看到了这句话就说明这个API没啦！"></p><h2 id="后宫漫图"><a href="#后宫漫图" class="headerlink" title="后宫漫图"></a><a href="https://acg.sx/images">后宫漫图</a></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">直接使用该站URL即可：https:<span class="hljs-regexp">//</span>acg.sx/images<br></code></pre></td></tr></table></figure><p><img src="https://acg.sx/images" alt="当你只看到了这句话就说明这个API没啦！"></p><h2 id="樱花API"><a href="#樱花API" class="headerlink" title="樱花API"></a><a href="https://www.dmoe.cc/">樱花API</a></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">API基本调用格式：<br>https:<span class="hljs-regexp">//</span>www.dmoe.cc/random.php<br><br>参数：<br>type=json<br><br>JSON调用格式<br>https:<span class="hljs-regexp">//</span>www.dmoe.cc/random.php?return=json<br><br>JSON数据<br>&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-comment">#图片状态码</span><br>    <span class="hljs-string">&quot;acgurl&quot;</span>:<span class="hljs-string">&quot;https:\/\/ws1.sinaimg.cn\/large\/0072Vf1pgy1foxkfy08umj31kw0w0nng.jpg&quot;</span> <span class="hljs-comment">#图片地址</span><br>    <span class="hljs-string">&quot;width&quot;</span>:<span class="hljs-string">&quot;2048&quot;</span> <span class="hljs-comment">#图片宽</span><br>    <span class="hljs-string">&quot;height&quot;</span>:<span class="hljs-string">&quot;1152&quot;</span> <span class="hljs-comment">#图片高</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://www.dmoe.cc/random.php" alt="当你只看到了这句话就说明这个API没啦！"></p><h2 id="EEEDOG"><a href="#EEEDOG" class="headerlink" title="EEEDOG"></a><a href="https://www.dmoe.cc/random.php">EEEDOG</a></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk">API地址<br>https:<span class="hljs-regexp">//</span>api.yimian.xyz/img<br><br><br>随机二次元图片<br>GET<span class="hljs-regexp">/POST /img</span>?type=moe<br>示例：https:<span class="hljs-regexp">//</span>api.yimian.xyz/img?type=moe<br><br>随机Bing壁纸<br>GET<span class="hljs-regexp">/POST /img</span>?type=wallpaper<br>示例：https:<span class="hljs-regexp">//</span>api.yimian.xyz/img?type=wallpaper<br><br>随机二次元头像<br>GET<span class="hljs-regexp">/POST /img</span>?type=head<br>示例：https:<span class="hljs-regexp">//</span>api.yimian.xyz/img?type=head<br><br>随机图床图片<br>GET<span class="hljs-regexp">/POST /img</span>?type=imgbed<br>示例：https:<span class="hljs-regexp">//</span>api.yimian.xyz/img?type=imgbed<br><br>随机<span class="hljs-number">1920</span>x1080尺寸二次元图片<br>GET<span class="hljs-regexp">/POST /img</span>?type=moe&amp;size=<span class="hljs-number">1920</span>x1080<br>示例：https:<span class="hljs-regexp">//</span>api.yimian.xyz/img?type=moe&amp;size=<span class="hljs-number">1920</span>x1080<br></code></pre></td></tr></table></figure><p><img src="https://api.yimian.xyz/img" alt="当你只看到了这句话就说明这个API没啦！"></p><h2 id="东方ProjectAPI"><a href="#东方ProjectAPI" class="headerlink" title="东方ProjectAPI"></a><a href="https://img.paulzzh.com/">东方ProjectAPI</a></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//img</span>.paulzzh.com<span class="hljs-regexp">/touhou/</span>random<br></code></pre></td></tr></table></figure><p><img src="https://img.paulzzh.com/touhou/random" alt="当你只看到了这句话就说明这个API没啦！"></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>每日一题——RGB</title>
      <link href="/2022/10/05/day11/"/>
      <url>/2022/10/05/day11/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定两个由RGB组成的字符串，R代表红色，G代表绿色，B代表蓝色。Vasya有色盲症因此他无法分辨蓝色和绿色。问这两个字符串在Vasya眼里是否相同。</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入由多个测试用例组成。第一行包含一个整数t(1≤t≤100)测试用例的数量。测试用例的描述如下： 每个测试用例的第一行包含一个整数n(1≤n≤100)一网格的列数： 以下两行各包含一个字符串，有个字符，每个字符都是R、G或B,分别代表红色、绿色或蓝色单元格。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>对于每个测试用例，如果Vasya认为网格的两行相同，则输出“YES”,否则输出“NO”。 无论如何，您都可以输出答案（例如，字符串“yEs”、“yes”、“Yes”和“YES”将被识别为正确答案）。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h4 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh">6<br>2<br>RG<br>RB<br>4<br>GRBG<br>GBGB<br>5<br>GGGGG<br>BBBBB<br>7<br>BBBBBBB<br>RRRRRRR<br>8<br>RGBRRGBR<br>RGGRRBGR<br>1<br>G<br>G<br></code></pre></td></tr></table></figure><h4 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">YES<br>NO<br>YES<br>NO<br>YES<br>YES<br></code></pre></td></tr></table></figure><h4 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h4><p>在第一个测试用例中，Vasya认为每行的第二个单元格相同，因为第一行的第二个单元格是绿色的，第二行的第二个单元格是蓝色的，所以他无法区分这两个单元格。其余的行在颜色上是相等的。因此，Vasya会说这两行颜色相同，即使它们实际上并不相同。<br>在第二个测试用例中，Vasya可以看到这两行是不同的。<br>在第三个测试用例中，每个细胞都是绿色或蓝色的，所以Vasya会认为它们是一样的。</p><h2 id="代码及结果"><a href="#代码及结果" class="headerlink" title="代码及结果"></a>代码及结果</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Author: 转接</span><br><span class="hljs-comment"> * @Date: 2022-10-05 10:13:21</span><br><span class="hljs-comment"> * @LastEditors: 转接</span><br><span class="hljs-comment"> * @LastEditTime: 2022-10-05 10:40:08</span><br><span class="hljs-comment"> * @Description: RGB</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">day11</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">每日一题——RGB</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">给定两个由RGB组成的字符串，R代表红色，G代表绿色，B代表蓝色。Vasya有色盲症因此他无法分辨蓝色和绿色。问这两个字符串在Vasya眼里是否相同。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">fotmat0</span><span class="hljs-params">(<span class="hljs-type">char</span> a)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a &gt; <span class="hljs-number">90</span>)&#123;<br>        <span class="hljs-keyword">return</span> a-(<span class="hljs-string">&#x27;z&#x27;</span>-<span class="hljs-string">&#x27;Z&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-type">char</span> a, <span class="hljs-type">char</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fotmat0</span>(a) == <span class="hljs-built_in">fotmat0</span>(b))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fotmat0</span>(a) != <span class="hljs-string">&#x27;R&#x27;</span> &amp;&amp; <span class="hljs-built_in">fotmat0</span>(b) != <span class="hljs-string">&#x27;R&#x27;</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> t; <span class="hljs-comment">// 测试样例数量</span><br>    cin &gt;&gt; t;<br>    <span class="hljs-type">bool</span> result[t];<br>    <span class="hljs-keyword">if</span> (t &lt;= <span class="hljs-number">0</span>  t &gt; <span class="hljs-number">100</span>) &#123; <span class="hljs-comment">// 问题规模</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; t; i++)&#123; <span class="hljs-comment">// core</span><br>        <span class="hljs-type">int</span> n; <span class="hljs-comment">// 每个测试样例一行的个数</span><br>        cin &gt;&gt; n;<br>        <span class="hljs-type">char</span> arr1[n], arr2[n];<br>        cin &gt;&gt; arr1;<br>        cin &gt;&gt; arr2;<br>        <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(; j &lt; n; j++)&#123;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">judge</span>(arr1[j],arr2[j]))&#123;<br>                result[i] = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(j == n)&#123;<br>            result[i] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; t; i++)&#123; <span class="hljs-comment">// 输出</span><br>        <span class="hljs-keyword">if</span>(result[i])&#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; endl;<br>        &#125; <span class="hljs-keyword">else</span>&#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">6<br>2<br>RG<br>RB<br>4<br>GRBG<br>GBGB<br>5<br>GGGGG<br>BBBBB<br>7<br>BBBBBBB<br>RRRRRRR<br>8<br>RGBRRGBR<br>RGGRRBGR<br>1<br>G<br>G<br>YES<br>NO<br>YES<br>NO<br>YES<br>YES<br></code></pre></td></tr></table></figure><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul><li>  判读函数逻辑可以优化：可以将所有字符串组合后判断ASCII差值，取出不符合区间</li><li>如果将arr数组变为二维，输入会影响result数组<ul><li>  <img src="https://blog.zhuanjie.ltd/img/uploads/2022/10/image.png"></li><li>  <img src="https://blog.zhuanjie.ltd/img/uploads/2022/10/image-1.png"></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>马原</title>
      <link href="/2022/10/04/%E6%94%BF%E6%B2%BB-%E9%A9%AC%E5%8E%9F/"/>
      <url>/2022/10/04/%E6%94%BF%E6%B2%BB-%E9%A9%AC%E5%8E%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>源格式跳转</p><p><a href="https://blog.zhuanjie.ltd/img/uploads/2022/10/%E9%A9%AC%E5%8E%9F.html">马原.html (zhuanjie.ltd)</a></p></blockquote><blockquote><p>幕布分享跳转</p><p><a href="https://www.mubucm.com/doc/11Ml83E3pG-">文档链接: https://www.mubucm.com/doc/11Ml83E3pG- 密码: randall</a></p></blockquote><p><a href="https://blog.zhuanjie.ltd/img/uploads/2022/10/%E9%A9%AC%E5%8E%9F-1.docx">马原.docx</a><a href="https://blog.zhuanjie.ltd/img/uploads/2022/10/%E9%A9%AC%E5%8E%9F-1.docx">下载</a></p><p>马原</p><ul><li>导论<ul><li>马克思主义的创立和发展<ul><li>马克思主义的内涵及构成—— #非重点<ul><li>  马克思主义的内容包括：<strong>自然<strong><strong>、</strong></strong>社会<strong><strong>和</strong></strong>人类思维</strong>唯物史观的内容不包括自然</li></ul></li><li>马克思主义的基本立场、基本观点和基本方法—— #重点<ul><li>马克思主义的基本立场无产阶级、人民<ul><li>  马克思主义观察分析和解决问题的根本立足点和出发点。马克思主义以<strong>无产阶级</strong>的解放和<strong>全人类</strong>的解放为己任，以人的自由全面发展为美好目标，以人民为中心，一切为了人民，一切依靠人民</li></ul></li><li>马克思主义的基本观点<ul><li>  是关于自然、社会和人类思维发展一般规律的科学认识，是对人类思想成果和社会实践经验的科学总结</li></ul></li><li>马克思主义的基本方法<ul><li>  单选：建立在辩证唯物主义和历史唯物主义世界观和方法论的基础上</li><li>  多选：实事求是的方法、辩证分析的方法、社会基本矛盾和主要矛盾分析的方法、历史分析的方法、阶级分析的方法、群众路线的方法等</li></ul></li></ul></li><li>马克思主义的来源—— #重点 马克思主义差生的条件 ATT：正义者同盟（组织，<strong>非政党</strong>）—&gt;起草《共产党宣言》（第一个无产阶级政党的党纲）—&gt;共产主义同盟（世界上第一个无产阶级政党）<ul><li>  社会根源（经济社会基础）：马克思、恩格斯生活的时代，资本主义生产方式在欧洲已经有了相当的发展</li><li>  阶级基础（实践基础）：无产阶级在反抗资产阶级剥削和压迫的斗争中，逐步走向自觉</li><li>  思想渊源：德国古典哲学、英国古典政治学、英法两国的空想社会主义依次对应马哲、政经、科社</li></ul></li></ul></li><li>马克思主义的鲜明特征和当代价值<ul><li>马克思主义的鲜明特征—— #重点 马克思主义强大的生命力根源：实践+科学+革命<ul><li>科学性马克思主义独有<ul><li>  马克思主义是对自然、社会和人类思维发展本质和规律的<strong>正确</strong>反映</li></ul></li><li>革命性<ul><li>  马克思主义它具有<strong>彻底的批判精神</strong>和<strong>鲜明的无产阶级立场</strong>彻底的批判精神是马克思主义对以往的理论都进行批判，而非全盘否定</li></ul></li><li>  实践性马克思主义独有</li><li>人民性<ul><li>  人民至上是马克思主义的政治立场</li><li>  马克思主义的<strong>人民性是以阶级性为深刻基础</strong>的，是无产阶级先进性的体现只要是为无产阶级服务就是要为人民服务，所以马克思主义的人民性是以阶级性为基础 无产阶级解放了全人类才能解放自己</li></ul></li><li>发展开放性<ul><li>  发展性：马克思主义是<strong>不断发展</strong>的学说，具有<strong>与时俱进</strong>的理论品质</li><li>  开放性：马克思主义是<strong>不断吸收人类历史上一切优秀思想文化成果而不断丰富自己</strong></li></ul></li></ul></li><li>  马克思主义的当代价值—— #非重点</li></ul></li></ul></li><li>哲学马克思主义哲学：基础、方法<ul><li>哲学的基本问题及不同哲学流派—— #重点<ul><li>思想和存在的关系问题：物质和意识，何者为第一性何者为第二性意识和物质的关系问题<ul><li>唯物主义：物质第一性什么是物质<ul><li>  古代朴素唯物主义：物质是一种或几种实物</li><li>  近代形而上学唯物主义：物质是原子等微粒机械唯物主义（形而上学唯物主义包括机械唯物主义）</li><li>  现代辩证唯物主义：物质是一切客观存在<strong>仅指马克思主义</strong>，现代辩证唯物主义包括古代朴素唯物主义和近代形而上学唯物主义（eg. 人类历史在现代辩证唯物主义中为物质，而在其他两个中不为物质）</li></ul></li><li>唯心主义：意识第一性什么是精神<ul><li>  主观唯心主义：作为世界本源的意识是本我的意识</li><li>  客观唯心主义：作为世界本源的意识是独立于“我”之外的客观精神上帝论、道家、理等</li></ul></li></ul></li><li>物质是否具有同一性我们的意识能否认知物质<ul><li>  可知论：有同一性唯物、唯心（彻底的唯心主义）</li><li>  不可知论：没有同一性二元论（不彻底的唯心主义）</li></ul></li><li>  将人类历史看作物质这种理论（观点）叫做唯物史观马克思在哲学史上的两贡献之一</li><li>哲学的重要问题：世界是怎样存在的？<ul><li>  辩证法认为：联系 全面 发展 矛盾</li><li>  形而上学认为：孤立 片面 静止 不矛盾</li></ul></li><li>马克思在<strong>哲学史</strong>上的两大贡献 #贡献（马克思在<strong>理论上</strong>上的两大贡献 #贡献）<ul><li>  创立唯物史观历史唯物主义</li><li>  将辩证法引入唯物论辩证唯物主义</li></ul></li></ul></li><li>唯物论世界是什么<ul><li>物质观本源<ul><li>物质范畴及其理论意义—— #重点 物质是什么<ul><li>  恩格斯：物，物质无非是各种物的总和，而这个概念就是从这一总和中<strong>抽象</strong>出来的物质与具体的物的关系就是抽象和具体的关系</li><li>  列宁：物质是标志客观实在的哲学范畴，这种客观实在是人通过感觉感知的，它<strong>不依赖于我们的感觉而存在</strong>，为我们的感觉所复写、摄影、反映满足不依赖于我们的感觉而存在自然满足标志客观实在的哲学范畴和为我们的感觉所复写、摄影、反映</li><li>  定义方式：通过物质和意识的关系定义有属类定义和关系定义，这里是使用关系定义，属类是这个东西属于什么范畴定义，关系定义是利用相似的东西来定义</li><li>  物质的<strong>唯一特性</strong>：客观实在不等同于根本属性，意识没有这个唯一特性</li></ul></li><li>物质与运动—— #重点<ul><li>运动的概念运动=变化<ul><li>  运动是标志一切事物和现象的变化及其过程的哲学范畴。运动是物质的<strong>存在方式</strong>和<strong>根本属性</strong>运动是物质的存在方式：凡是物质都是以运动这个方式存在的</li></ul></li><li>  物质和运动的关系：不可分割公式：a和b不可分割=&gt;a是b的a，b是a的b。eg. 物质是运动的物质，运动是物质的运动</li><li>批判两种错误观点将两个观点引向极端<ul><li>  脱离物质谈运动=&gt;精神运动=&gt;唯心</li><li>  脱离运动谈物质=&gt;物质静止=&gt;形而上学</li></ul></li></ul></li><li>运动与静止—— #重点<ul><li>静止的概念<ul><li>  稳定状态，包括空间位置和根本性质暂时未变这样两种运动的特殊状态</li></ul></li><li>运动和静止的关系：对立统一公式：a和b对立统一=&gt;①a和b相互区别，②a和b相互联系<ul><li>  相互区别：运动是绝对的、无条件的，静止是相对的、有条件的</li><li>  相互联系：运动和静止是相互依赖、相互渗透、相互包含，“动中有静，静中有动”</li></ul></li><li>批判两种错误观点<ul><li>  夸大静止：形而上学</li><li>  夸大运动：诡辩论</li></ul></li></ul></li><li>物质运动与时空—— #重点<ul><li>时空的概念<ul><li>  时间：一维性</li><li>  空间：三维性</li></ul></li><li>时空与运动的关系：不可分割<ul><li>  时间和空间是物质运动的存在形式</li></ul></li><li>时空的特点<ul><li>  #客观性 ：不以人的意志而转移</li><li>  绝对性：时空绝对存在</li><li>  相对性：物质速度突破极限时，时空发生变化</li><li>  有限性：具体事物的时空是有限的</li><li>  无限性：所有事物的时空是无限的</li></ul></li></ul></li></ul></li><li>实践：实践是自然存在和社会存在区分和统一的基础—— #重点<strong>实践是物质和意识之间的唯一桥梁</strong> 自然存在：自然界，社会存在：人类社会<ul><li>  <strong>社会生活的本质：实践</strong></li><li>从实践出发理解社会生活的本质，要把握<ul><li>实践是使物质世界分化为自然界和人类社会的历史前提，又是使自然界和人类社会统一起来的现实基础<ul><li>  <img src="https://api2.mubu.com/v3/document_image/07b35bc8-a6d3-46f3-aecf-358387505553-5533406.jpg"></li></ul></li><li>  实践是人类社会的基础，是理解和解释一切社会现象的钥匙</li></ul></li><li>社会生活的实践性主要表现在原因（为什么实践是社会生活的本质）<ul><li>  实践是社会关系形成的基础生产劳动实践</li><li>  实践形成了社会生活的基本领域</li><li>  实践<strong>构成</strong>了社会发展的动力实践<strong>是</strong>社会发展动力（<strong>×</strong>）因为社会发展的动力是社会基本矛盾</li></ul></li></ul></li><li>意识观派生<ul><li>意识的来源、本质和作用—— #重点<ul><li>意识的概念<ul><li>  意识是自然界长期发展的产物意识是物质世界长期发展的产物（<strong>√</strong>）（）</li><li>  是人脑的机能和属性</li><li>  <strong>是客观世界的主观映像</strong>意识的本质 最核心的概念</li></ul></li><li>  意识的本质：客观世界的主观映像，是客观内容和主观形式的统一</li><li>意识的来源<ul><li>  由一切物质具有的反应特性到低等生物的刺激感应性，再到高等动物的感觉和心理，最终发展为人类意识意识是人独有的</li></ul></li><li>意识形成过程中的影响因素<ul><li>  决定性因素：劳动（实践）最重要</li><li>  重要影响因素：语言……语言是意识的物质外壳，语言是物质，语言的含义是意识</li><li>  XXX</li></ul></li><li>意识的作用：<strong>能动</strong>作用—— #特重点<ul><li>主要表现：<ul><li>  第一，意识活动具有目的性和计划性</li><li>  第二，意识活动具有<strong>创造性</strong></li><li>  第三，意识具有指导实践改造客观世界的作用</li><li>  第四，意识具有调控人的行为和生理活动的作用</li></ul></li></ul></li></ul></li><li>意识与物质的辩证关系—— #重点<ul><li>物质和意识相互区别<ul><li>  1. 物质是本原，意识是派生</li><li>  2. 物质不是意识，意识不是物质意识是人脑的分泌物（<strong>×</strong>）（庸俗唯物主义的观点）</li><li>  3. 物质不能代替意识，意识不能代替物质</li></ul></li><li>物质和意识相互联系<ul><li>  1. 物质可以转化为（变成）意识，意识可以转化为（变成）物质通过实践转换（实践是物质和意识的唯一桥梁）</li><li>  2. 意识对物质既有依赖性，又有<strong>相对</strong>独立性</li><li>  3. 物质决定意识，意识反作用于物质</li></ul></li><li>正确认识和把握物质和意识的辩证关系，还要处理好主观能动性和客观规律之间的关系物质=&gt;客观规律；意识=&gt;主观能动性​<ul><li>  尊重客观规律是正确发挥主观能动性的前提</li><li>  只有充分发挥主观能动性，才能正确认识和利用客观规律</li></ul></li><li>正确发挥人的主观能动性的前提和条件<ul><li>  前提：从实际出发分析</li><li>  基本途径：实践干</li><li>  还需要依赖一定的物质条件和物质手段利用工具及条件</li></ul></li></ul></li><li>世界的物质统一性原理—— #重点<ul><li>统一性原理的内容<ul><li>  其一，世界是统一的，即世界的本原是一个单其一可以批判二元论（二元论认为物质和意识都是本原）</li><li>  其二，世界的统一性在于它的物质性，即世界统一的基础是物质其一其二可以批判唯心主义（不能批判旧唯物主义（除去马克思主义的辩证主义唯物主义）（古典唯物、机械唯物……））</li><li>  其三，物质世界的统一性是多样的统一，而不是单一无差别的统一三点可以批判旧唯物主义</li></ul></li><li>  世界统一于物质</li><li>世界统一性体现在<ul><li>  意识统一于物质意识是物质派生出来的 世界除了物质，什么都没有（<strong>√</strong>） 意识就是物质（<strong>×</strong>）</li><li>人类社会也统一于物质人类社会包括人类历史<ul><li>人类社会的物质性：<ul><li>  人类社会是物质世界的组成部分</li><li>  人类获取生活资料的活动是物质性的活动人类获取生活资料的活动-&gt;劳动-&gt;实践-&gt;物质</li><li>  人类社会存在发展的基础是物质资料的生产方式</li></ul></li></ul></li></ul></li><li>世界的物质统一性原理是马克思主义的基石—— #特重点<ul><li>  在认识世界改造世界的过程中，<strong>坚持实事求是，一切从实际出发</strong>。一切从实际出发，是世界的物质统一性原理在现实生活中实际工作中的生动体现坚持实事求是，一切从实际出发（不能从想象主观出发）——方法论启发</li></ul></li></ul></li><li>  意识的内容是客观的，意识的形式是主观的</li></ul></li></ul></li><li>辩证法物质世界是怎样的存在（基于唯物论）<ul><li>唯物辩证法两大总特征—— #重点<ul><li>普遍联系<ul><li>联系的含义<ul><li>  <strong>辩证法中，联系是以区别为前提的</strong></li><li>  联系是指事物内部各要素之间和事物之间相互影响、相互制约和相互作用的关系</li></ul></li><li>联系的特点<ul><li>  #客观性 ：联系是事物本身固有的，不是主观臆想的联系是客观存在的</li><li>普遍性<ul><li>  任何事物内部的不同部分和要素是相互联系的，即任何事物都具有内在的结构性</li><li>  任何事物都不能孤立存在，都同其他事物处于一定的联系中</li><li>  整个世界是相互联系的统一整体，每一件事物都是世界普遍联系中的一个成分或环节，并且通过它表现出联系的普遍性。世界的普遍性是通过“中介”来实现的</li></ul></li><li>  多样性：世界上的事物是多样的，因此事物的联系也是多样的</li><li>条件性<ul><li>  条件对事物发展和人的活动具有支持或抑制作用</li><li>  条件是可以改变的，人们经过努力可以创造出事物发展所需要的条件</li><li>  改变和创造条件不是任意的，必须尊重事物发展的客观规律</li></ul></li></ul></li><li>  方法论意义</li></ul></li><li>永恒发展<ul><li>发展的内涵与实质<ul><li>  发展的内涵：概况一切形式的变化就是运动，运动变化的趋势（大趋势）是发展运动 = 变化 &gt; 发展 运动、变化都能变好和变坏，发展只能变好 运动是绝对的、无条件的（<strong>√</strong>）发展是绝对的、无条件的（<strong>×</strong>）发展是<strong>永恒</strong>的（<strong>√</strong>）</li><li>  发展的实质：前进的上升的运动，发展的实质是新事物的产生和旧事物的灭亡</li></ul></li><li>新、旧事物的关系<ul><li>  新事物、旧事物：新事物是合乎历史前进方向、具有远大前途的东西；旧事物是丧失历史必然性、日趋灭亡的东西新旧事物与产生的时间先后无关 新事物<strong>一定</strong>产生于旧事物之后（<strong>×</strong>）新事物<strong>往往</strong>产生于旧事物之后（<strong>√</strong>）</li><li>新生事物是不可战胜的原因<ul><li>  1. 新事物具有新结构，适应新环境</li><li>  2. 新事物是旧事物的改良（扬弃），吸收旧的优点，增添了新的内容</li><li>  3. 新事物符合人民群众的利益，受到群众拥护</li></ul></li></ul></li><li>过程的观点<ul><li>  世界不是即成事物的集合体，而是过程的集合体</li><li>  一切在历史上产生的都要在历史上灭亡</li><li>  任何事物都有它的过去、现在和将来</li><li>  ……</li></ul></li><li>  方法论意义</li></ul></li></ul></li><li>五对范畴—— #重点联系和发展环节上的，逻辑上的问题<ul><li>原因和结果<ul><li>  原因和结果是揭示事物的<strong>前后相继</strong>，彼此制约的关系范畴前后相继的关系是因果关系（<strong>×</strong>）（a发生在b之后，b不一定是由a引起） 因果是确定的（<strong>×</strong>）在既定的条件下，因果是确定的（<strong>√</strong>） 有因必有果（<strong>√</strong>）又其因必有其果（<strong>×</strong>）</li><li>  关系：对立统一</li><li>  方法论：<strong>凡是预则立不预则废</strong></li></ul></li><li>必然和偶然<ul><li>  世界上任何事情的发生即使必然也是偶然，是既然和偶然的 #辩证统一缘分（包含必然和偶然）</li><li>关系：对立统一<ul><li>相互区别<ul><li>  产生形成的原因不同：必然产生于事物内部的根本矛盾，偶然产生于非根本矛盾和外部条件</li><li>  表现形式不同：必然比较稳定，偶然则不稳定</li><li>  地位作用不同：必然在事物发展中起决定性作用，偶然只能起到影响作用</li></ul></li><li>  相互联系：必然寓于偶然之中，通过大量的偶然表现出来，并为自己开辟道路；偶然背后隐藏着必然，然后受必然支配，偶然是必然的表现形式和补充；必然和偶然在一定条件下可以相互转化</li></ul></li><li>  方法论：我们要重视事物发展的必然，把握事物发展的<strong>总趋势</strong>，要善于从偶然中发现必然，把握有利于事物发展的<strong>机遇</strong>出现机遇一般都是考察必然和偶然</li></ul></li><li>可能和实现<ul><li>关系：对立统一<ul><li>  相互区别：可能：潜在；现实：实际存在</li><li>相互联系包含、转化<ul><li>  一方面，显示蕴含着未来的发展方向，会不断产生出新的可能</li><li>  另一方面，可能包含发展成为现实的因素和根据，一旦主客观条件成熟，可能转换为显示</li></ul></li><li>概念区分<ul><li>在现实中是否有依据<ul><li>  有-&gt;可能性</li><li>  没有-&gt;不可能性</li></ul></li><li>在现实中的依据是否充分<ul><li>  充分-&gt;现实的可能</li><li>  不充分-&gt;抽象的可能（潜在的可能）</li></ul></li></ul></li></ul></li><li>  方法论：要求人们立足现实，展望未来、主义分析事物发展的各种可能、发挥主观能动性，做好应对不利情况的准备，争取实现好的可能</li></ul></li><li>现象和本质<ul><li>  现象是事物的外部联系和表面特征，人们可以通过感官感知</li><li>  本质则是事物的内在联系和根本性质，只有靠人的理性思维才能把握</li><li>关系：对立统一<ul><li>相互区别<ul><li>  现象是个别的、具体的；本质是一般的、普遍的</li><li>  现象是多变易逝的；本质是相对稳定的</li><li>  现象是生动丰富的；本质是深刻、单纯的</li><li>  <strong>现象有真相和假象（从侧面歪曲表达事物的本质）之分，假象与错觉不是一回事</strong>真象假象不能用正确、错误来形容 真象假象都是现象，现象都是外露于事物外部的，本质才隐藏于事物内部 真相≠真象 假象，客观存在的，如：海市蜃楼；错觉，什么都没有 错觉一定是被假象迷惑导致的（<strong>×</strong>）错觉有可能是被假象迷惑导致的（<strong>√</strong>） 真象往往隐藏于事物内部（<strong>×</strong>）</li></ul></li><li>  相互联系：任何本质都是通过现象表现出来的，没有不表现为现象的本质；任何现象都从一定的方面表现着本质，现象是本质的外部表现，即使假象也是本质的表现</li></ul></li><li>  方法论：正因为现象和本质是统一的，所以我们能够通过现象认识事物的本质；同时又因为现象和本质是对立的，要求我们不能停留于现象而必须通过现象揭示本质</li></ul></li><li>内容和形式<ul><li>关系：相互依赖、不可分割<ul><li>  任何事物的内容都有一定的形式，任何形式也都有一定的内容</li><li>  <strong>内容决定形式</strong>，形式反作用于内容。当形式适合内容时，对内容的发展起着积极的推动作用；当形式不适合内容时，对内容的发展起着消极的阻碍作用​当生产关系适应生产力发展的时候会推动生产力，当生产关系不适应生产力发展的时候会阻碍生产力 生产力：社会生产的物质内容；生产关系：社会生产的组织形式</li></ul></li><li>  方法论：既要重视内容，根据内容的需要决定形式的取舍、改造和创新；又要善于运用形式，发挥其积极作用，利用和创造必要的形式,适时地抛弃与内容不相适应的形式</li></ul></li></ul></li><li>三大规律在联系和发展的基础上，探讨事物是怎样联系的，为什么会发展，怎样发展，往哪里发展<ul><li>对立统一规律联系的内容、发展的原因和动力（怎样联系、为什么发展）<ul><li>唯物辩证法的实质和核心—— #特重点<ul><li>对立统一规律是唯物辩证法实质和核心的原因<ul><li>  1. 对立统一规律揭示了事物普遍联系的根本内容和永恒发展的内在动力，从根本上回答了事物为什么会发展的问题</li><li>  2. 对立统一规律是贯穿其他规律和范畴的中心线索</li><li>  3. 对立统一规律提供矛盾分析法，它是对事物辩证认识的实质</li><li>  4. 是否承认对立统一学说是唯物辩证法和形而 上学对立的实质</li></ul></li></ul></li><li>矛盾的同一性和斗争性的辩证关系原理—— #特重点<ul><li>  矛盾的同一性：矛盾双方相互依存、相互贯通的性质和趋势同一性-&gt;相互依存、相互贯通</li><li>  矛盾的斗争性：矛盾着的对立面之间相互排斥、相互分离的性质和趋势斗争性（按照激烈性区分）-&gt;对抗性、非对抗性</li><li>  <strong>同一和斗争不是时而时而的关系，而是既又的关系</strong></li><li>同一性和斗争性的关系：对立统一<ul><li>  相互联系：矛盾的同一性和矛盾的斗争性是相互联结、相辅相成的，没有斗争性就没有同一性,斗争性寓于同一性之中没有同一性也没有斗争性eg. 相进的事物（如：人）之间会会产生斗争性，越相近，斗争性越强</li><li>  相互区别：在事物的矛盾中，矛盾的斗争性是无条件的 绝对的，矛盾的同一性是有条件，相对的</li></ul></li><li>  <strong>方法论意义</strong>：“看问题要一分为二”；“求同存异”；“批判地继承”；“事物之间会相互转化”要将该方法论意义与同一性和斗争性联系起来</li></ul></li><li>矛盾同一性和斗争性在事物发展中的作用原理<ul><li>矛盾的同一性在事物发展中的作用表现在<ul><li>  第一，由于矛盾双方相互依存，互为存在的条件，矛盾双方可以<strong>利用</strong>对方的发展使自己得到发展</li><li>  第二，由于矛盾双方相互包含，矛盾双方可以相互<strong>吸取有利于自身的因素</strong>而得到发展</li><li>  第三，由于矛盾双方彼此相通，矛盾双方可以向着彼此的对立面转化而得到<strong>发展</strong>，并规定着事物发展的方向</li></ul></li><li>矛盾的斗争性在事物发展中的作用表现在<ul><li>  第一，矛盾双方的斗争推动矛盾双方力量的对比发生变化，此消彼长造成事物的量变</li><li>  第二，矛盾双方的斗争促使矛盾双方的地位或性质发生转化，实现事物的质变</li></ul></li><li>  方法论：<strong>事物的发展不仅表现为“相反相成”，而且表现为“相辅相成”</strong>；和谐作为矛盾的一种特殊表现形式,不是无差别的一致，本质在于协调事物内部各种因素的相互关系，促进最有利于事物发展的状态矛盾都有同一性和斗争性，斗争性表现为相反相成，同一性表现为相辅相成 逆向思维，反向思考</li></ul></li><li>矛盾的普遍性和特殊性的辩证关系<ul><li>  矛盾的普遍性的概念：矛盾的普遍性是指矛盾存在于一切事物中, 存在于一切事物发展过程的始终，旧的矛盾解决了， 新的矛盾又产生。事物始终在矛盾中运动时时刻刻处处都有矛盾，矛盾的普遍性=矛盾的共性</li><li>矛盾的特殊性的概念：矛盾的特殊性是指具体事物在其运动中的矛盾及每一矛盾的各个方面都有其特点。具体表现为三种情形：矛盾的特殊性=矛盾的个性<ul><li>  1. 不同事物的矛盾各有其特点</li><li>  2. 同一事物的矛盾在不同发展过程和发展阶段各有不同特点</li><li>  3. 构成事物的诸多矛盾以及每一矛盾的不同方 面各有不同的性质、地位和作用</li></ul></li><li>关系：对立统一<ul><li>  相互区别：矛盾的共性是无条件的、绝对的，矛盾的个性是有条件的、相对的</li><li>  相互联系：<strong>任何</strong>现实存在的<strong>事物</strong>都是共性和个性的有机统一，共性寓于个性之中，没有离开个性的共性，也没有离开共性的个性</li></ul></li><li>  方法论意义：“ <strong>具体问题具体分析</strong>”；对症下药，量体裁衣马克思主义的精髓</li></ul></li><li>矛盾的不平衡发展原理<ul><li>  概念：<strong>主要矛盾****是矛盾体系中处于支配地位</strong>，对事物发展起决定作用的矛盾。<strong>次要矛盾****是处于服从地位的矛盾</strong>。在每一对矛盾中又有矛盾的主要方面与矛盾的次要方面</li><li>  原理：矛盾的性质主要是由矛盾的主要方面决定的</li><li>  方法论意义：“两点论”和“重点论”相结合；抓关键、看主流</li></ul></li><li>矛盾分析法（方法论总结）对立分析法得出的，对立统一规律（矛盾规律）<img src="https://api2.mubu.com/v3/document_image/61d009c0-8ec1-40f5-9be1-5909c21ede4c-5533406.jpg"></li></ul></li><li>量变质变规律（质量互变定律）—— #特重点发展的过程和状态（怎样发展）<ul><li>概念<ul><li>质：一事物成为其自身并区别于其他事物的内在规定性是什么<ul><li>  认识质的意义：认识质是认识和实践的起点和基础。只有认识质，才能区别事物</li></ul></li><li>量：事物的规模、程度、速度等可以用数量关系表示的规定性怎么样<ul><li>认识量的意义：<ul><li>  1. 认识事物的量是认识的深化和精确化</li><li>  2. 只有正确了解事物的量，才能正确估计事物在实践中的地位和作用，因为同质的事物由于数量不同，在实践中的地位和作用往往不同</li></ul></li></ul></li><li>  度：保持事物质的稳定性的数量界限，即事物的限度、幅度和范围</li><li>  关节点：度的两端叫关节点或临界点</li><li>  质变：质变是事物性质的根本变化，是事物由一种质态向另一种质态的飞跃，体现了事物渐进过程和连续性的中断</li><li>  量变：量变是事物<strong>数量的增减</strong>和组成要素<strong>排列次序</strong>的变动，是保持事物的质的相对稳定性的不显著的变化，体现了事物发展渐进过程的连续性</li></ul></li><li>关系量变和质变的关系<ul><li>  相互区别：见概念</li><li>相互联系<ul><li>  第一，量变是质变的必要准备要想质变就一定要经过量变的积累 否定该点会变成激变论（夸大质变，否定量变）</li><li>  第二，质变是量变的必然结果水滴一定会石穿（<strong>√</strong>） 否定则变成庸俗进化论（夸大量变，否定质变）</li><li>第三，量变和质变是相互渗透的量变之中有质变，质变之中有量变 <strong>量变中的质变是量变，质变中的量变是质变</strong><ul><li>  一方面，在总的量变过程中有阶段性和局部性的部分质变</li><li>  另一方面，在质变过程中也有旧质在量上的收缩和新质在量上的扩张</li></ul></li></ul></li></ul></li><li>方法论<ul><li>理论上的方法论坚持马克思主义里面的量变质变规律可以批判谁<ul><li>  夸大质变导致：激变论</li><li>  夸大量变导致：庸俗进化论</li></ul></li><li>实践上的方法论<ul><li>  <strong>适度原则</strong>中道的德行</li><li>  对“新发展阶段”的认识我们还处于社会主义初级阶段，社会主义初级阶段中有新发展阶段，是量变中的质变</li><li>  改革、发展和稳定</li></ul></li></ul></li></ul></li><li>否定之否定规律—— #重点发展的方向和归宿（往哪里发展）<ul><li>辩证否定观<ul><li>  肯定因素是维持现成事物存在的因素，否定因素是促使现成事物灭亡的因素世间万物都有肯定因素和否定因素</li><li>辩证否定观的基本内容是：<ul><li>  第一，否定是事物的自我否定形而上学：外在力量对事物进行消灭</li><li>  第二，否定是事物发展的环节</li><li>  第三，否定是新旧事物联系的环节</li><li>  第四，辩证否定的实质是“扬弃”，即新事物对旧事物既批判又继承，既克服其消极因素又保留其积极因素形而上学：要么肯定一切，要么否定一切（是就是是，不是就是不是）</li></ul></li><li>辩证否定观和形而上学否定观的区别<img src="https://api2.mubu.com/v3/document_image/0ebeae53-ef1b-4c88-ad2c-33d0b30e2c06-5533406.jpg"></li></ul></li><li>否定之否定规律<ul><li>  事物的辩证发展就是经过两次否定、三个阶段，形成一个周期。其中否定之否定阶段<strong>仿佛</strong>是向原来出发点的“回复”，但这是在更高阶段的“回复”，是“扬弃”的结果</li></ul></li><li>方法论<ul><li>理论上的方法论<ul><li>  只看到回归，没看到发展：循环论佛教</li><li>  只看到发展，没看到回归：直线论</li></ul></li><li>世界上的方法论<ul><li>  前途是光明的</li><li>  道路是曲折的</li></ul></li></ul></li></ul></li></ul></li><li>客观辩证法和主观辩证法—— #重点<ul><li>  客观辩证法：客观事物或客观存在的辩证法（采取外部必然性形式）</li><li>  主观辩证法：人类认识和思维的辩证法（则采取观念的、逻辑的形式）</li><li>  主观反映客观，客观被主观反映客观辩证法就是唯物，主观辩证法就是唯心（<strong>×</strong>）（客观主观是反映和被反映的关系，唯物唯心是对错关系）</li></ul></li><li>辩证思维方式—— #非重点<ul><li>  归纳与演绎</li><li>  分析与综合</li><li>  抽象与具体</li><li>  历史和逻辑</li></ul></li></ul></li><li>认识论人类如何认识世界<ul><li>认识的来源<ul><li>实践的本质和基本特征—— #重点实践和认识<strong>等同于</strong>物质和意识<ul><li>错误的实践观<ul><li>  中国古哲学：主要指道德伦理行为</li><li>  康德：实践是理性自主的道德活动实践不是理性自主的，是感性的、对象性的</li><li>  黑格尔：实践是主观改造客观对象的创造的精神活动实践是物质活动</li><li>  费尔巴哈：实践等同于生物适应环境的活动实践是人类独有的</li></ul></li><li>正确的实践观<ul><li>  实践是感性的、对象性的物质活动感性：体现人的能动、自觉、目的和意愿 对象性：客体 物质活动：物质的</li><li>  实践的本质含义：实践是人类 能动地改造世界的社会性的物质活动实践是人类独有的；能动：感性的；社会性的物质活动：物质</li><li>实践的基本特征：直接现实性、自觉能动性和社会历史性结合题干判断<ul><li>  直接现实性：实践具有将“人脑中的”东西变成“现实”的东西的功能</li><li>  自觉能动性：实践受意识的指导，体现主体的目的性受头脑的指挥，体现主体的意愿</li><li>  社会历史性：不同阶段的实践内涵不同</li></ul></li></ul></li></ul></li><li>实践的基本结构和形式—— #重点<ul><li>实践主体：人（个人主体、群体主体、人类主体）<ul><li>实践主体的能力<ul><li>  自然能力</li><li>精神能力<ul><li>  知识因素：对理论知识的把握和对经验的把握</li><li>  非知识因素：情感意志等因素</li></ul></li></ul></li></ul></li><li>  实践客体：物纳入实践范围之内的物才是客体</li><li>实践中介：实践中介是指各种形式的工具、手段以及运用、操作这些工具、手段的程序和方法<ul><li>  一是作为人的肢体延长、感官延伸、体能放大的物质性工具系统</li><li>  二是语言符号工具系统。语言符号是主体思维活动进行的现实形式，也是人们社会交往得以进行的中介</li></ul></li><li>主体和客体相互作用的关系<ul><li>  实践关系：<strong>最根本的关系</strong></li><li>  认识关系同构性：两个行为不是一样的行为，但是有相同的结构。实践和认识的主体和客体在本质上是一致的</li><li>  价值关系</li></ul></li><li>  主体客体化：它（客体）变了</li><li>  客体主体化：我（主体）变了，客体变成主体的一部分</li><li>  实践的三种基本形式：物质生产实践（劳动）、社会政治实践（搞关系）、科学文化实践（探索）物质生产实践是<strong>最基本</strong>的实践活动</li><li>  虚拟实践：具有交互性、开放性、间接性。实践活动的派生，具有相对独立性</li></ul></li><li>实践对认识的决定作用—— #特重点类比物质对意识的关系：物质决定意识，意识反作用于物质<ul><li>实践决定认识<ul><li>  1. 实践是认识的来源。首先，实践产生了认识的需要；其次，实践还为认识的形成提供了可能。</li><li>  2. 实践是认识发展的动力。</li><li>  3. 实践是认识的目的。</li><li>  4. 实践是检验认识真理性的唯一标准。</li></ul></li><li>实践决定认识<img src="https://api2.mubu.com/v3/document_image/b8379ae7-38cd-4d65-b0f7-db2b4058aa3e-5533406.jpg"></li></ul></li></ul></li><li>认识的本质、过程和规律<ul><li>认识的本质—— #重点认识是什么（认识分为知识性认识和评价性认识）<ul><li>  唯心主义先验论：从思想和感觉到物批判先验论</li><li>唯物主义反映论：从物到感觉和思想<ul><li>  直观反映论（机械反映论）旧唯物主义（除马克思主义唯物的唯物主义）</li><li>  能动反映论辩证唯物主义（辩证唯物主义）</li><li>认识的本质：<strong>主体<strong><strong>在</strong></strong>实践<strong><strong>基础上对</strong></strong>客体<strong><strong>的</strong></strong>能动反映</strong>eg. <strong>人类的认识具有模仿性（√）人类的认识就是模仿（×）</strong><ul><li>这种能动反映不但具有反映客体内容的反映性特征，而且具有实践所要求的主体能动的、创造性的特征。任何认识既是反映又是创造<ul><li>  一方面，认识的反映特性是人类认识的基本规定性。认识的反映特性是指人的认识必然要以客观事物为原型和摹本，在思维中再现或摹写客观事物的状态、属性和本质。违反反映性就会变得唯心</li><li>  另一方面，认识的能动反映具有创造性。认识是一种在思维中的能动的、创造性的活动，而不是主观对客观对象简单、直接的描摹或照镜子式的原物映现。违反能动性会变成旧唯物主义的机械（直观）反映</li></ul></li><li>认识的反映特性和创造特性之间的关系：**#不可分割**<ul><li>  只坚持认识的反映性，看不到认识能动的创造性，就重复走上了旧唯物主义 直观反映论的错误之路</li><li>  只坚持认识能动的创造性，使创造性脱离反映论的前提，就会把创造变成主观随意，从而滑向唯心主义和不可知论</li></ul></li><li>能动反映论的两个突出特点（优点）<ul><li>  <strong>把实践引入认识论</strong></li><li>  <strong>把辩证法应用于反映论</strong>考察认识的发展过程，把认识看成一个由不知到知、由浅入深的充满矛盾的能动的认识过程，全面地揭示了认识过程的辩证性质</li></ul></li></ul></li></ul></li></ul></li><li>认识过程的两次飞跃<ul><li>从感性认识到理性认识（第一次飞跃）（从实践到认识）—— #特重点<ul><li>感性认识<ul><li>  感性认识的对象：事物的现象、外部联系、各个方面</li><li>  感性认识的形式：感觉、知觉和表象</li><li>  感性认识的特点：突出特点——直接性；具体性</li></ul></li><li>理性认识<ul><li>  理性认识的对象：事物的本质、全体、内在联系和事物自身规律性认识</li><li>  理性认识的形式：概念、判断、推理</li><li>  理性认识的特点：间接性、抽象性</li></ul></li><li>感性认识与理性认识的辩证关系（#对立统一 ）<ul><li>联系<ul><li>  第一，感性认识有待于发展和深化为理性认识</li><li>  第二，理性认识依赖于感性认识</li><li>  第三，感性认识和理性认识相互渗透、相互包含偏向理性主义-&gt;教条主义（现实生活）唯理论（理论上） 偏向感性主义-&gt;经验主义（生活上）经验论（理论上） 感性认识和理性认识的 #辩证统一 关系是在实践的基础上形成的，也需要在实践中发展。如果割裂二者的#辩证统一 关系，就会走向唯理论或经验论，在实际工作中就会犯教条主义错误或经验主义错误</li></ul></li><li>选择题考点感性和理性同等重要，但是针对某句话可以说它是理性重要还是感性重要<ul><li>  感觉到的东西不能立刻理解，只有理解的东西才能深刻的感受——理性更重要</li><li>  尽信书，不如无书——感性更重要</li><li>  同一句名言，出自<strong>饱经风霜</strong>的老者之口和出自<strong>缺乏阅历</strong>的少年之口其内涵不同——感性更重要</li></ul></li></ul></li><li>感性认识上升到理性认识的条件<ul><li>  勇于实践，深入调查，获取十分丰富合乎实际的感性材料</li><li>  必须经过理性思考的作用，将丰富的感性材料加工制作</li></ul></li></ul></li><li>  理性认识到实践的飞跃（第二次飞跃）（从认识到实践）—— #非重点是认识过程中更重要的一次飞跃</li></ul></li><li>认识过程中的理性因素和非理性因素（ #影响因素 ）—— #特重点<ul><li>理性因素<ul><li>  概念：理性因素是指人的理性直观、理性思维等能力</li><li>  作用：它在认识活动中的作用主要有指导作用、解释作用和预见作用等</li></ul></li><li>非理性因素（感性因素）<ul><li>  概念：非理性因素主要是指认识主体的情感和意志。从广义上看，人们还常把认识能力中具有不自觉、非逻辑性等特点的认识形式，如联想、想象、猜测、顿悟、灵感等，也包括在人的非理性因素中</li><li>  作用：非理性因素对于人的认识能力和认识活动具有激活、驱动和控制作用</li></ul></li></ul></li><li>感性认识、理性认识、感性因素、理性因素<ul><li>感性认识和理性认识的任何一种认识都有感性因素和理性因素的影响因素<ul><li>  <img src="https://api2.mubu.com/v3/document_image/5d3df766-805b-4129-8aee-764d799d5449-5533406.jpg"></li></ul></li></ul></li><li>认识的规律—反复性质—— #特重点<ul><li>  认识过程的反复性是指，人们对于一个复杂事物的认知往往要经过由感性认识到理性认识、再由理性认识到实践的多次反复才能完成</li><li>  原因：从客观看，事物暴露有个过程；从主观看主体认识能力提高有个过程</li></ul></li><li>  认识发展的无限性—— #特重点</li><li>  认识发展的无限性是指，对于事物发展过程的推移来说，人类的认识是永无止境、无限发展的，它表现为“实践、认识、再实践、再认识”的无限循环，由低级阶段向高级阶段不断推移的永无止境的前进运动。这种认识的无限发展过程，在<strong>形式上是循环往复</strong>，在<strong>实质上是前进上升</strong> #否定之否定</li><li>认识与实践的具体的历史统一—— #非重点<ul><li>方法论<ul><li>  实践超前于认识：冒进主义（左）共产党员——左倾、右倾；其他党派——左派、右派</li><li>  实践落后于认识：保守主义（右）</li></ul></li></ul></li></ul></li><li>认识的结果和检验标准<ul><li>真理及其特点—— #特重点<ul><li>错误真理观<ul><li>  马赫主义：真理是“思维形式”，是“社会地组织起来的经验”，凡是大多数人承认的就是真理</li><li>  实用主义：有用即真理，把真理的有用性与真理本身等同起来真理一定是有用的（<strong>√</strong>）有用的就是真理（<strong>×</strong>）</li></ul></li><li>  正确的真理观：真理是标志主观与客观相符合的哲学范畴，是对客观事物及其规律的正确反映客观：客观事物；主观：脑子中的事物</li><li>真理的特点<ul><li>#客观性 ：本质属性<ul><li>  真理的内容来说：真理是对外部物质世界进行反映，即为客观的</li><li>  真理的检验标准来说：检验标准是实践，实践是客观活动</li><li>  真理的内容是客观的，真理的形式是主观的等同于意识的内容是客观的，意识的形式是主观的</li><li>  一元性（由客观性延伸而出）：真理的 #客观性 决定了真理的一元性。真理的一元性是指在同一条件下对于特定的认识客体的真理性认识只有一个，而不可能有多个</li></ul></li><li>绝对性<ul><li>  真理的绝对性是指真理的内容表明了主客观统一的确定性和发展的无限性</li><li>含义<ul><li>  一是任何真理都必然包含同客观对象相符合的客观内容，都同谬误有原则的界限。否则就不称其为真理，这一点是无条件的、绝对的</li><li>  二是人类认识按其本性来说，能够正确认识无限发展着的物质世界，认识每前进一步，都是对无限发展着的物质世界的接近，这一点也是无条件的、绝对的。因此，承认世界的可知性，承认人能够获得关于无限发展着的物质世界的正确认识，也就是承认了真理的绝对性</li></ul></li></ul></li><li>相对性<ul><li>  真理的相对性是指人们在一定条件下对事物的客观过程及其发展规律的正确认识总是有限度的</li><li>含义<ul><li>  一是真理所反映的对象是有条件的、有限的</li><li>  二是真理反映客观对象的正确程度也是有条件的、有限的</li></ul></li></ul></li></ul></li><li>真理绝对性和相对性之间的关系：#辩证统一<ul><li>  二者 #相互依存</li><li>二者相互包含<ul><li>  包含：一是说真理的绝对性寓于真理的相对性之中；二是说真理的相对性必然包含并表现着真理的绝对性</li><li>  所以，绝对真理和相对真理是不可分的，没有离开绝对真理的相对真理，也没有离开相对真理的绝对真理。无数相对的真理之总和，就是绝对的真理无数相对的真理之总和，就是绝对的真理：现在的绝对的真理都是以前无数的真理被推翻后留下的绝对正确的东西的总合</li></ul></li><li>  真理永远处在由相对向绝对的转化和发展中，是从<strong>真理的相对性走向绝对性、接近绝对性的过程</strong>。任何真理性的认识都是由真理的相对性向绝对性转化过程中的一个环节，这是真理发展的规律无限逼近终极绝对的真理（概念中可以存在，现实中只能无限接近）</li><li>真理的绝对性与相对性，<strong>根源于</strong>人的认识能力、思维能力的矛盾本性，是人的思维的至上性和非至上性或人的认识能力的无限性和有限性的矛盾<ul><li>  人的思维的至上性：人完全有能力去认知这个世界=&gt;人获得的真理的绝对性</li><li>  人的思维的非至上性：目前、当前还没有这个能力=&gt;人获得的真理的相对性</li></ul></li></ul></li><li>方法论<ul><li>  只看到绝对真理：教条主义</li><li>  只看到相对真理：诡辩论（怀疑主义）</li></ul></li></ul></li><li>真理与谬误—— #特重点<ul><li>真理与谬误的关系： #对立统一<ul><li>  相互区别：由于真理和谬误决定于认识的内容是否如实地反映了客观事物，因此真理和谬误是性质不同的两种认识，它们是对立的</li><li>  相互联系：真理和谬误是统一的，它们相互依存、相互转化真理和谬误相比较而存在，没有真理就无所谓谬误，没有谬误也无所谓真理；真理中包含着某种以后会暴露出来的错误的方面或因素，谬误中也隐藏着以后会显露出来的真理的成分或萌芽</li><li>  在一定条件下，真理和谬误可以相互转化。<strong>真理和谬误在<strong><strong>一定范围内</strong></strong>的<strong><strong>对立</strong></strong>是****绝对的</strong>，但<strong>超出一定范围</strong>，<strong>它们就会互相转化</strong>，真理变成谬误，谬误变成真理</li></ul></li><li>真理的相对性不等同于谬误<ul><li>  真理的相对性表示现在的真理未来可能错，谬误现在就是错的</li></ul></li></ul></li><li>真理的检验标准—— #非重点<ul><li><strong>实践是检验真理的唯一标准，这是由<strong><strong>真理的本性</strong></strong>和<strong><strong>实践的特点</strong></strong>决定的</strong><ul><li>  真理的本性是主观与客观的相结合实践是主客观联系的桥梁</li><li>  实践的本质特点是直接现实性</li></ul></li><li>  实践是标准，并不排斥逻辑证明的作用马克思主义认为逻辑证明对检验真理有作用，但不是标准</li><li>实践标准的确定性<ul><li>  1. 唯一标准</li><li>  2. 不可推翻</li><li>  3. 即使当前不能，最终仍能裁决</li></ul></li><li>实践标准的不确定性<ul><li>  1. 一定时期的实践具有局限性，不能充分证明或驳倒一切</li><li>  2. 不是一次完成</li><li>  3. 已被检验的仍需接受在检验</li></ul></li></ul></li><li>真理与价值的辩证统一—— #重点<ul><li>  价值是指在实践基础上形成的主体和客体之间的意义关系是客体对个人、群体乃至整个社会的生活和活动所具有的积极意义</li><li>价值的特点<ul><li>  #客观性 ：不以人的意志而转移</li><li>  主体性：主体不同，价值不同主体性不等同于主观性，价值没有主观性</li><li>  多维性：维度不同，价值不同人有个人维度、群体维度、社会维度、全人类维度</li><li>  社会历史性：历史时期不同，价值不同</li></ul></li><li>认识分为两种（以上全是知识性认识）<ul><li>  知识性认识：以客体本身为对象我认识客体</li><li>  评价性认识：以主客体的关系对象我认为客体是怎样怎样的</li></ul></li><li>价值评价：价值评价是一种关于价值现象的评价性的认识活动，是主体对客体价值以及价值大小所作的评判或判断，因而也被称作价值判断<ul><li>价值评价的特点<ul><li>  第一，评价以主客体的价值关系为认识对象</li><li>  第二，评价结果与评价主体直接相关</li><li>  第三，评价结果的正确与否依赖于对客体状况和主体需要的认识知识越多评价的越好</li></ul></li><li>价值评价的特点表明，评价并<strong>不是</strong>一种<strong>主观随意性的认识活动</strong>，而<strong>是具有客观性的认识活动</strong><ul><li>  由于人民群众的要求和利益从根本上代表着人类整体的要求和利益，是与历史发展的基本要求或趋势相一致的，因此对于任何价值评价的主体而言，其价值评价只有与人类整体的要求或利益相一致，才是正确的价值评价正确的评价不能反人类</li></ul></li><li>  衡量实践的两把尺度：真理、价值</li></ul></li><li>真理和价值在实践中的辩证统一关系<ul><li>  首先，成功的实践必然是以真理和价值的辩证统一为前提的</li><li>  其次，价值的形成和实现必须以坚持真理为前提，而真理又必然是具有价值的</li><li>  最后，真理和价值在实践和认识活动中是相互制约、相互引导、相互促进的</li></ul></li></ul></li><li>  认识世界和改造世界必须用于创新—— #非重点</li><li>自由和必然—— #重点<ul><li>  自由（体现人的能动性)：我想怎么样</li><li>  必然（体现事物客观规律性）：我该怎么样</li><li>  人类历史就是从必然走向自由的历史（自由不意味着规律和必然消失）</li><li>自由是有条件的<ul><li>  认识条件：认识越多越自由</li><li>实践条件：<ul><li>  1. 自由以必然为限度</li><li>  2. 自由以不牺牲别人的自由为限度</li></ul></li></ul></li></ul></li></ul></li></ul></li><li>唯物史观人类历史的发展规律问题<ul><li>唯物史观和唯心史观的对立—— #重点<ul><li>唯心史观缺陷<ul><li>  缺陷1：只看到了历史发展背后的精神力量，而没有看到精神力量背后的物质动因</li><li>  缺陷2：只看到了历史发展中少数英雄人物的力量，而没有看到人民群众的作用</li></ul></li></ul></li><li>社会发展的物质动因<ul><li><img src="https://api2.mubu.com/v3/document_image/2e4cf9c0-2b8b-48f5-b5f2-9276511e5b3b-5533406.jpg"></li><li>社会存在和社会意识及其辩证关系—— #重点<ul><li>社会存在<ul><li>  地理环境影响因素，非决定性力量（马克思主义不同意地理环境决定论）</li><li>  人口因素影响因素，非决定性力量（马克思主义不同意人口因素决定论）</li><li><strong>生产方式</strong>决定性生产方式=生产力+生产关系 #概念拆分<ul><li><strong>生产力</strong><ul><li>  劳动资料：生产工具是生产力发水平的标志</li><li>  劳动对象：与劳动资料和称生产资料</li><li>  劳动者：生产力中最活跃的因素</li></ul></li><li>生产关系<ul><li>  生产资料所有制关系：最基本的内容</li><li>  生产中人与人的关系</li><li>  产品分配关系</li></ul></li></ul></li></ul></li><li>社会意识<ul><li>  社会心理、自发形成的风俗、习惯社会大家都这么看，没有理由</li><li>社会意识<strong>形式</strong><ul><li>  社会意识<strong>形态</strong>（社会意识形式中与<strong>经济、阶级、利益有关</strong>的内容）：政治法律思想、道德、艺术、宗教、哲学等判断一个东西是不是形态就看不同阶级对它的看法是不是一致的</li><li>  <strong>非</strong>社会意识<strong>形态</strong>（社会意识形态中与<strong>经济、阶级、利益无关</strong>的内容）：语言学、心理学、自然科学等</li></ul></li></ul></li><li>社会存在和社会意识及其辩证关系<ul><li>社会存在决定社会意识：<ul><li>  1. 社会存在是社会意识内容的客观来源，社会意识是社会物质生活过程及其条件的主观反映物质是意识的来源，意识是物质的反映</li><li>  2. 社会意识是人们进行社会物质交往的产物</li><li>  3. 随着社会存在的发展，社会意识也相应地或迟或早的发生变化和发展</li></ul></li><li>社会意识反作用于社会存在（相对独立性）<ul><li>  1. 社会意识与社会存在发展的<strong>不平衡性</strong>平衡：物质越发达，意识越先进</li><li>  2. 社会意识内部各形式之间的相互影响及各自具有的历史继承性</li><li>  3. 社会意识对社会存在的能动的反作用（双向）</li></ul></li></ul></li></ul></li></ul></li><li>两对社会基本矛盾<ul><li>生产力和生产关系矛盾运动的规律（第一对社会基本矛盾）—— #重点<ul><li>生产力是人们解决社会同自然矛盾的实际能力，是人类改造自然使其适应社会需要的<strong>物质力量</strong>。它表示<strong>人和自然</strong>的关系。它包括：<ul><li>  <img src="https://api2.mubu.com/v3/document_image/f7979d13-b2c9-4caa-b5ba-ba6e0cf19056-5533406.jpg"></li></ul>  生产力是物质<ul><li>  1. 劳动资料即劳动手段（劳动资料中最重要的是生产工具）其中，<strong>最重要的是</strong>生产工具，它是生产力发展水平的客观尺度，是<strong>区分社会经济时代</strong>的 #客观依据</li><li>  2. 劳动对象：劳动资料和劳动对象合称为生产资料生产资料=劳动资料+劳动对象 #概念拆分</li><li>  3. 劳动者是生产力中<strong>最活跃</strong>的因素</li></ul></li><li>科技跟生产力的关系<ul><li>  科技不是生产力中的独立要素（科技渗透在三要素中）</li><li>  科学技术日益成为生产发展的<strong>决定性因素</strong>科技在生产劳动中起决定性因素（<strong>√</strong>）科技在社会历史中起决定性因素（<strong>×</strong>）</li><li>  科学技术是先进生产力的集中体现和主要标志，是第一生产力</li></ul></li><li>生产关系是人们在物质生产过程中形成的<strong>不以人的意志为转移的</strong>经济关系。包括生产资料所有制关系、生产中人与人的关系和产品分配关系<ul><li><img src="https://api2.mubu.com/v3/document_image/7b521dd5-0806-457e-8ae3-0d6607a1b2c5-5533406.jpg"></li><li>  生产资料所有制是最基本的、决定性的。它构成全部生产关系的基础，是区分不同生产方式、判定<strong>社会经济结构</strong>性质的 #客观依据</li><li>  生产关系虽然是一种<strong>人和人</strong>的关系但它是在物质生产过程中结成的关系，是不以人的意志为转移的</li></ul></li><li>生产力和生产关系是社会生产不可分割的两个方面。在社会生产中，生产力是生产的物质内容，生产关系是生产的社会形式，二者的有机结合和统一，构成社会的生产方式<ul><li>  第一，生产力决定生产关系</li><li>  第二，生产关系反作用于生产力（双向）</li></ul></li><li>  社会发展第一规律：生产关系一定要适应生产力发展状况的规律</li></ul></li><li>经济基础与上层建筑矛盾运动的规律（第二对社会基本矛盾）—— #重点<ul><li>  经济基础是由社会一定发展阶段的生产力所决定的<strong>生产关系</strong>的总和级别上生产关系=经济基础 ∵生产力决定生产关系 ∴生产力决定经济基础​</li><li>上层建筑是指建立在一定的经济基础之上的意识形态以及相应的制度、组织和设施：上层建筑=观念上层建筑（意识形态）+政治上层建筑（政治形态） #概念拆分<ul><li>意识形态又称观念上层建筑<ul><li>  <img src="https://api2.mubu.com/v3/document_image/d0dc2b2c-f6b3-4f83-9896-820a414816be-5533406.jpg"></li></ul>  包括政治法律思想、道德、艺术宗教、哲学等思想观点<ul><li>  属于上层建筑的社会意识就是社会意识形态社会意识中分为 1. 社会心理、风俗、习惯 2. 社会意识形态 3. 非社会意识形态</li></ul></li><li>  政治法律制度及设施和政治组织又称政治上层建筑包括：国家政治制度、立法司法制度和行政制度；国家政权机构、政党、军队、警察、法庭、监狱等政治组织形态和设施</li><li>  上层建筑中，政治上层建筑居<strong>主导地位</strong>，国家政权是<strong>核心</strong></li></ul></li><li>经济基础和上层建筑的相互关系<ul><li><img src="https://api2.mubu.com/v3/document_image/bb164f3b-72ad-4021-8ffb-187d0ffca771-5533406.jpg"></li><li>  首先，是经济基础决定上层建筑</li><li>  其次，上层建筑对经济基础具有反作用。这种反作用集中表现在为自己的经济基础服务。上层建筑的反作用是巨大的，但不是无限的。它可以<strong>影响</strong>社会性质和历史进程，伸<strong>不能决定</strong>历史发展的总趋势</li></ul></li><li>  社会发展第二规律：上层建筑一定要适应经济基础发展状况的规律</li><li>上层建筑反作用的性质，取决于它所服务的经济基础的性质，<strong>归根到底取决于它是否有利于生产力的发展</strong><ul><li>  判断生产关系是否先进，看它能否为生产力服务</li><li>  判断上层建筑是否先进，是看它服务的经济基础能否为生产力服务</li></ul></li></ul></li></ul></li><li>社会形态更替的一般规律及特殊形式—— #重点<ul><li>社会形态是关于社会运动的具体形式、发展阶段和不同质态的范畴，<strong>是同生产力发展一定阶段相适应的<strong><strong>经济基础</strong></strong>与<strong><strong>上层建筑</strong></strong>的统一体</strong>社会形态=经济基础+上层建筑 #概念拆分<ul><li>  社会形态包括社会的经济形态、政治形态和意识形态经济基础就是经济形态，上层建筑中的政治上层建筑是政治形态，观念上层建筑就是意识形态</li><li>  社会形态内容是全面的，社会形态决定上层建筑</li><li>  社会形态是具体的，不是抽象的</li><li>  社会形态是历史的，有产生、发展、灭亡的过程</li></ul></li><li>社会形态更替的一般规律和特殊规律（社会形态更替的特点）<ul><li>  社会形态更替的统一性和多样性相结合</li><li>社会形态更替的必然性和人们的历史选择性必然性：规律发展；历史选择性：能动<ul><li>一个名族做出选择，其原因有：<ul><li>  1. 取决于名族利益</li><li>  2. 取决于交往</li><li>  3. 取决于对历史必然性以及本民族特点的把握程度</li></ul></li></ul></li><li>  社会形态更替的前进性与曲折性 #否定之否定</li></ul></li></ul></li><li>社会历史发展的动力<ul><li>社会基本矛盾是社会发展的<strong>根本动力</strong>（第一动力）—— #重点拥有绝对性<ul><li>  生产力和生产关系、经济基础和上层建筑之间的矛盾是社会基本矛盾</li><li>社会基本矛盾作为历史发展的根本动力，它在历史发展中的作用表现在<ul><li>  首先，生产力是社会基本矛盾运动中最基本的动力因素，是人类社会发展和进步的最终决定力量</li><li>  其次，社会基本矛盾特别是生产力和生产关系的矛盾，是“一切历史冲突的根源”，决定着社会中其他矛盾的存在和发展</li><li>  最后，社会基本矛盾具有不同的表现形式和解决方式，并从根本上影响和促进社会形态的变化和发展</li></ul></li></ul></li><li>  阶级斗争在阶级社会发展中的作用（第二动力）—— #非重点重要动力</li><li>  社会革命在阶级社会中的作用（第三动力）—— #非重点重要动力</li><li>  改革的性质及其在社会发展中的作用（第四动力）—— #非重点重要动力</li><li>科学技术在社会发展中的作用（第五动力）—— #重点重要动力<ul><li>  首先，现代科学技术革命对生产方式产生了深刻影响</li><li>  其次，现代科学技术革命对生活方式产生了巨大影响</li><li>  最后，现代科学技术革命促进了思维方式的变革</li></ul></li></ul></li><li>人名群众在历史发展中的作用<ul><li>关于历史创造者问题—— #非重点<ul><li>  唯心史观——英雄史观</li><li>  唯物史观——群众史观</li><li>唯物史观考察历史创造者问题的原则<ul><li>  首先，唯物史观立足于现实的人及其本质来把握历史的创造者抽象的人</li><li>  其次，唯物史观立足于整体的社会历史过程来探究谁是历史的创造者整个历史过程，非某个历史事件</li><li>  再次，唯物史观从社会<strong>历史发展的必然性</strong>入手来考察和说明谁是历史的创造者</li><li>  最后，唯物史观从人与历史关系的不同层次上考察谁是历史的创造者</li></ul></li></ul></li><li>现实的人及本质—— #重点<ul><li>  从人与动物相区别的层次上看，人的本质在于劳动</li><li>  从人与人相区别的层次上看，<strong>人的本质是一切社会关系的总和</strong></li><li>  人有两重属性：自然属性和社会属性社会属性是本质属性</li></ul></li><li>人民群众创造历史—— #重点<ul><li>  人民群众：政治概念，属于政治面貌</li><li>人民群众是一个历史范畴<ul><li>  从质上说，人民群众是指一切对社会历史发展起推动作用的人</li><li>  从量上说，是指社会人口中的绝大多数</li></ul></li><li>  人民群众中最稳定的主体部分始终是从事物质资料生产的劳动群众及知识分子</li><li>  人民群众跟是否为剥削阶级没有必然联系</li><li>人民群众是历史创造者的原因<ul><li>  首先，人民群众是社会物质财富的创造者</li><li>  其次，人民群众是社会精神财富的创造者</li><li>  再次，人民群众是社会变革的决定力量</li><li>  最后，人民群众既是先进生产力和先进文化的创造主体，也是实现自身利益的根本力量</li></ul></li><li>  历史是人民群众创造的，但人民群众创造历史的活动及作用又受到社会历史条件的制约。这些条件包括经济条件、政治条件和精神文化条件经济条件是根本制约因素</li><li>方法论<ul><li>  群众观点：坚信人民群众自己解放自己的观点，全心全意为人民服务的观点一切向人民群众负责的观点，虚心向群众学习的观点</li><li>  群众路线：一切为了群众，一切依靠群众，从群众中来，到群众中去。群众路线是无产阶级政党的根本路线，也是党的根本领导方法和工作方法</li></ul></li></ul></li><li>个人在社会历史中的作用—— #重点<ul><li>判断历史人物是否具有历史性作用<ul><li>  在具体历史事件中，可能有决定性作用</li><li>  在社会历史发展中，没有绝对性作用</li></ul></li></ul></li></ul></li></ul></li></ul></li><li>政经马克思主义政治经济学：主体<ul><li>简单商品经济简单商品经济：资本主义以前的商品经济<ul><li>资本主义生产关系的产生和资本主义生产方式的形成—— #非重点<ul><li>资本主义生产关系产生的途径有两个<ul><li>  从小商品经济分化出来</li><li>  从商人和高利贷者转化而成</li></ul></li><li>资本原始积累<ul><li>  概念：生产者与生产资料相分离，货币资本迅速集中在少数人手中的历史过程生产者与生产资料相分离即为无产阶级</li><li>途径：<ul><li>  1. 用暴力手段剥夺农民土地</li><li>  2. 用暴力手段掠夺货币财富</li></ul></li></ul></li><li>  经过资产阶级革命和产业革命，最终建立起资本主义生产方式</li></ul></li><li>价值是什么—— #重点价值是抽象劳动<ul><li>商品经济是以交换为目的而进行生产的经济形式商品经济对应自然经济，自然经济是自产自销的形式<ul><li>商品经济产生的历史条件有两个<ul><li>  一是社会分工的存在</li><li>  二是生产资料和劳动产品属于<strong>不同的所有者</strong></li></ul></li></ul></li><li>商品具有使用价值和价值<strong>两个因素</strong><ul><li>  使用价值是指商品能满足人们某种需要的属性，即商品的有用性，反映<strong>人与自然之间</strong>的<strong>物质关系</strong>，是商品的<strong>自然属性</strong>，<strong>是一切劳动产品共有的属性</strong>。使用价值构成社会财富的物质内容使用价值是商品和非商品（普通劳动产品）共有的特征</li><li>  价值是凝结在商品中的无差别的一般人类劳动，即人类脑力和体力的耗费。价值是商品特有的<strong>社会属性</strong>，在本质上体现了生产者之间的一定社会关系价值=劳动，价格<strong>≠</strong>价值 不经过劳动而天然存在的东西一定没有价值（<strong>√</strong>）（比如空气，有使用价值，但没有价值） 一个东西要有价值，必须要有经过劳动和交换</li><li>使用价值和价值之间的关系： #对立统一<ul><li>  对立性：二者不可兼得</li><li>  统一性：二者缺一不可</li></ul></li><li>交换价值首先<strong>表现为</strong>一种使用价值同另一种使用价值交换的量的关系或比例。<strong>决定</strong>商品交换比例的，不是商品的使用价值，而是价值<ul><li>  价值是交换价值的基础，交换价值是价值的表现形式。价值决定交换价值</li></ul></li></ul></li><li>劳动具的二重性<ul><li>  具体劳动是指生产一定使用价值的具体形式的劳动，即有用劳动</li><li>  抽象劳动是指撇开一切具体形式的、无差别的一般人类劳动，即人的体力和脑力的消耗</li><li>  具体劳动形成商品的使用价值，抽象劳动形成商品的价值实体</li><li>  具体劳动和抽象劳动之间的关系： #对立统一</li></ul></li><li>因为生产商品的劳动具有二重性，所以生产出来的商品具有两因素 #因果关系劳动的二重性决定了商品的两因素 具体劳动生产使用价值、抽象劳动生产商品价值<ul><li>  劳动具的<strong>二重性</strong>：抽象劳动、具体劳动</li><li>  商品的<strong>两因素</strong>：价值、使用价值</li></ul></li></ul></li><li>价值如何衡量—— #重点<ul><li>  决定商品价值量的，<strong>不是</strong>生产商品的<strong>个别</strong>劳动时间，<strong>而是社会必要劳动时间</strong></li><li>  社会必要劳动时间是指在现有的社会正常生产条件下，在社会平均的劳动熟练程度和劳动强度下制造某种使用价值所需要的劳动时间</li><li>  商品的价值量与生产商品所耗费的劳动时间成<strong>正比</strong>，与劳动生产率成<strong>反比</strong>劳动生产率：效率</li><li><ul><li>  <img src="https://api2.mubu.com/v3/document_image/f7140a49-611e-449a-947f-411f2510787d-5533406.jpg"></li></ul></li><li>影响劳动生产率的因素<ul><li>  劳动者的平均熟练程度，科学技术的发展程度及其在生产中的应用，生产过程的社会结合，生产资料的规模和效能以及自然条件</li></ul></li><li>商品价值量是以简单劳动为尺度计量的，复杂劳动等于自乘的或多倍的简单劳动市场调控乘以的比例<ul><li>  复杂劳动转化为简单劳动，是在商品交换过程中自发实现的。</li></ul></li></ul></li><li>价值如何表现—— #重点<ul><li>商品的价值形式的发展经历了四个阶段<ul><li>  <strong>1</strong>. 简单的或偶然的价值形式初级</li><li>  2. 总和的或扩大的价值形式</li><li>  3. 一般的价值形式</li><li>  <strong>4.</strong> 货币形式终极，货币只能是金、银等贵金属 金、银天然不是货币，但货币<strong>天然</strong>是金\银</li></ul></li><li>  货币是在长期交换过程中形成的固定地充当一般等价物的`商品`货币也是商品</li><li>货币有五种基本职能，即价值尺度、流通手段、贮藏手段、支付手段和世界货币前两大职能即价值尺度和流通手段被称为最基本的职能<ul><li>价值尺度：指货币衡量和表现一切商品价值大小的作用<ul><li>  1. 因为货币也是商品，也有价值，可以衡量其他商品的价值货币具有价值尺度的原因</li><li>  2. 观念上的货币可以在脑中衡量 ​eg.这件衣服在脑海中大概值一两黄金</li></ul></li><li>流通手段：货币作为商品交换的媒介<ul><li>  1. <strong>必须是</strong>现实的货币虚拟货币也是现实的货币</li><li>2. 可以不足值官方发放的一两黄金磕碰不足一两后依旧可以兑换一两黄金所能换到的东西 引发劣币驱逐良币<ul><li>  由不足值演化发展出纸币，<strong>纸币没有价值尺度</strong>纸币=0价值</li></ul></li></ul></li><li>  储藏手段：货币退出流通领域作为社会财富的一般代表被保存起来的职能</li><li>  支付手段：货币被用来清偿债务或支付<strong>赋税、租金、工资</strong></li><li>  世界货币：在国际商品流通中发挥一般等价物作用</li><li>ATT：流通手段和支付手段的不同<ul><li>  流通手段往往伴随着现货交易</li><li>  支付手段往往没有现货交易</li></ul></li><li>货币的产生使整个商品世界分化为两极<ul><li>  一极是各种各样的具体商品它们分别代表不同的使用价值</li><li>  一极是货币它们只代表商品的价值</li></ul></li><li>  商品<strong>内在</strong>的使用价值和价值的矛盾就发展成为<strong>外在</strong>的商品和货币的矛盾</li></ul></li></ul></li><li>价值有何规律—— #重点<ul><li>价值规律的内容<ul><li>  商品的价值量由生产商品的社会必要劳动时间决定</li><li>  商品交换以价值量为基础，按照等价交换的原则进行</li></ul></li><li>价值规律的<strong>表现形式</strong>：<strong>商品的<strong><strong>价格</strong></strong>围绕价值自发波动</strong><ul><li>  发生波动的原因：决定<strong>价格</strong>的因素有供求关系、币值（货币值钱与否）和商品本身的价值供求关系和币值是重要影响因素，<strong>商品<strong><strong>本身的价值</strong></strong>才是****决定因素</strong></li></ul></li><li>价值规律的作用<ul><li>积极作用<ul><li>  第一，自发地调节生产资料和劳动力在社会各生产部门之间的分配比例</li><li>  第二，自发地刺激社会生产力的发展</li><li>  第三，自发地调节社会收入分配</li></ul></li><li>消极作用<ul><li>  其一，可能导致垄断的发生，阻碍技术进步</li><li>  其二，可能引引起商品生产者的两极分化</li><li>  其三，价值规律自发调节社会资源在社会生产各个部门的配置，可能出现比例失调状况，造成社会资源浪费</li></ul></li></ul></li></ul></li><li>私有制基础上商品经济的基本矛盾—— #重点<ul><li>私人劳动和社会劳动的矛盾构成<strong>私有制商品经济的基本矛盾</strong>从私有制角度看，我的劳动就叫私人劳动；从社会分工角度看，我的劳动就叫社会劳动<ul><li>  私人劳动和社会劳动之间的矛盾在资本主义制度下，进一步发展成资本主义的基本矛盾，即生产资料的资本主义私人占有和生产社会化之间的矛盾，正是这一矛盾不断运动，才使资本主义制度最终被社会主义制度所代替具有了客观必然性 #资本主义灭亡原因</li></ul></li></ul></li><li>马克思劳动价值论的意义—— #重点<ul><li>马克思在继承古典政治经济学劳动创造价值理论的同时，创立了劳动二重性理论劳动创造价值理论<strong>不是</strong>马克思创立的 劳动二重性理论<strong>是</strong>马克思创立的<ul><li>  劳动二重性理论成为理解政治经济学的<strong>枢纽</strong></li></ul></li><li>深化对马克思劳动价值论的认识<ul><li>  第一，深化对创造价值的劳动的认识，对生产性劳动作出新的界定</li><li>  第二，深化对科技人员、经营管理人员在社会生产和价值创造中所起的作用的认识经营管理人员也在劳动</li><li>  第三，深化对科技、知识、信息等新的生产要素在财富和价值创造中的作用的认识</li><li>  第四，深化对价值创造与价值分配关系的认识</li></ul></li></ul></li></ul></li><li>发达商品经济（资本主义）<ul><li>自由竞争阶段围绕剩余价值（m）讨论<ul><li>劳动力成为商品与货币转化为资本—— #重点货币转化为资本的条件：劳动力成为商品<ul><li>  劳动力是指人的劳动能力，是人的体力和脑力的总和。劳动力的使用即劳动劳动者出售的是自己的劳动力，不是自己</li><li>劳动力成为商品，要具备两个基本条件：<ul><li>  第一，劳动者是自由人，能够把自己的劳动力当做自己的商品来支配</li><li>  第二，劳动者没有别的商品可以出卖，“自由”得一无所有</li></ul></li><li>劳动力商品的价值，是<strong>由生产、发展、维持和延续劳动力所必需的生活必需品的价值决定的</strong>，它包括三个部分：<ul><li>  ①维持劳动者本人生存所必需的生活资料的价值</li><li>  ②维持劳动者家属的生存所必需的生活资料的价值</li><li>  ③劳动者接受教育和训练所支出的费用</li><li>  劳动力价值的构成包含一个历史的和道德的因素不同地区、时期，劳动力的价值会有所浮动</li></ul></li><li>  劳动力商品在使用价值上有一个很大的特点，就是它的使用价值就是劳动而劳动又是普通商品价值的源泉</li><li>  货币所有者购买到这种特殊商品（劳动力），能够增殖，货币也就转化为资本钱购买普通商品消费，钱叫货币（货币不会增资） 钱购买劳动力，劳动力创造价值，这时候钱叫资本（资本会增值）</li></ul></li><li>  资本主义所有制—— #非重点</li><li>剩余价值的生产—— #重点<ul><li>  资本主义生产过程是劳动过程和价值增殖过程的统一劳动过程：工人角度，每天都在劳动 价值增殖：资本家角度，钱在增值</li><li>例<ul><li>  <img src="https://api2.mubu.com/v3/document_image/00d7c4c2-1a21-470c-bf3a-a2d03423282a-5533406.jpg"></li></ul></li><li>1. 从劳动的方面来看：<ul><li>具体劳动的任务：<ul><li>  1. 转移“面粉”的价值；</li><li>  2. 生产“包子”的使用价值</li></ul></li><li>  抽象劳动的任务：生产新价值</li></ul></li><li>2. 从资本的方面来看：<ul><li>  全部预付资本100元。</li><li>  1.购买面粉的80元。借助具体劳动转移到最终产品中去，不会增殖。称之为<strong>不变资本（C）</strong>。</li><li>  2.购买工人的20元。由工人的劳动再创造出来，并能够增殖。称之为<strong>可变成本（V）</strong>。并能够带来<strong>剩余价值（M）</strong></li><li>  3.<strong>剩余价值率M’=M/V</strong>。衡量剥削程度例中M’=20/20=100%</li></ul></li><li>3. 从时间的方面来看<ul><li>  全天工作8小时。</li><li>  1. 前4个小时。为自己劳动，创造劳动力价值，称之为必要劳动时间。社会必要劳动时间：社会平均的劳动熟练程度和劳动强度下制造某种使用价值所需要的劳动时间 必要劳动时间：生产出自己工资的生产劳动时间</li><li>  2. 后4小时。为资本家劳动，创造剩余价值，称之为剩余劳动时间。</li></ul></li><li>  绝对剩余价值是指在必要劳动时间不变的条件下，由于延长工作日的长度而生产的剩余价值相同效率下，加班而产生的剩余价值</li><li>  相对剩余价值是指在工作日长度不变的条件下，通过缩短必要劳动时间而相对延长剩余劳动时间生产的剩余价值相同工作时间（不加班），提高技术，提高效率，缩短必要劳动时间，相对延长剩余劳动时间产生的价值</li><li>绝对剩余价值和相对剩余价值的相同点与不同点<ul><li>  都延长了剩余劳动时间</li><li>  绝对剩余价值的生产没有必要劳动时间的缩短，但是相对剩余价值有</li><li>  绝对剩余价值的生产没有技术的进步，但是相对剩余价值有</li></ul></li><li>超额剩余价值是指企业由于提高劳动生产率而使商品的个别价值低于社会价值的差额全世界的技术没有进步，但是我率先提高技术，我因此多赚出来的钱就是超额剩余价值 超额剩余价值在全世界都提高了技术后会转变成相对剩余价值<ul><li>  超额剩余价值是原因，相对剩余价值是结果</li></ul></li><li>  资本主义条件下的生产自动化是资本家获取超额剩余价值的手段，而雇佣工人的剩余劳动仍然是这种剩余价值的唯一源泉</li></ul></li><li>资本的积累—— #重点<ul><li>  把剩余价值转化为资本，或者说剩余价值的资本化，就是资本积累，<strong>资本主义扩大再生产<strong><strong>的源泉是</strong></strong>资本积累</strong></li><li>  资本积累的本质，就是资本家不断利用无偿占有的工人创造的剩余价值，来扩大自己的资本规模，进一步扩大和加强对工人的剥削和统治。<strong>资本积累<strong><strong>的源泉是</strong></strong>剩余价值</strong></li><li>资本积累规模的大小取决于<ul><li>  对工人的剥削程度</li><li>  劳动生产率的高低</li><li>  所用资本和所费资本之间的差额</li><li>  资本家垫付资本的大小</li></ul></li><li>资本的有机构成<ul><li>  资本的技术构成：由生产的技术水平所决定的生产资料和劳动力之间的比例eg.生产资料：劳动力=4斤面（80元购买的）：1个工人（20元购买的劳动力）=&gt;物比物</li><li>  资本的价值构成(C:V)：资本可分为不变资本和可变资本，这两部分资本价值之间的比例eg.不变资本：可变资本=80元：20元=&gt;钱比钱</li><li>  资本的有机构成：由资本技术构成<strong>决定并反映</strong>技术构成变化的资本价值构成，通常用C:V来表示</li></ul></li><li>  在资本主义生产过程中，资本有机构成呈现<strong>不断提高</strong>趋势。C:V不断提高（C机器设备，V工人）</li><li>资本有机构成提高，可变资本相对量减少，资本对劳动力的需求日益相对地减少，结果就不可避免地造成<strong>大批工人失业</strong>，形成相对过剩人口马克思的失业论：积累的结果<ul><li>  资本积累的历史趋势是资本主义制度的必然灭亡和社会主义制度的必然胜利 #资本主义灭亡原因</li><li>  资本积累→资本有机构成提高（C:V提高）→相对剩余人口过剩（失业）→贫富差距拉大（两极分化）→资本主义灭亡</li></ul></li></ul></li><li>剩余价值的循环—— #重点<ul><li>产业资本在循环过程中要经历三个不同阶段，与此相联系的是资本依次执行三种不同职能：采购—&gt;生产—&gt;销售<ul><li>  第一个阶段是购买阶段，产业资本执行的是货币资本的职能</li><li>  第二个阶段是生产阶段，产业资本执行的是生产资本的职能</li><li>  第三个阶段是售卖阶段，产业资本执行的是商品资本的职能</li></ul></li><li>产业资本运动的两个基本条件<ul><li>  一是产业资本的三种职能形式必须在空间上<strong>同时并存</strong></li><li>  二是产业资本的三种职能形式必须在时间上<strong>继起</strong></li></ul></li><li>资本是在<strong>运动中增殖</strong>的，资本周而复始、不断反复的循环，就叫资本的周转<ul><li>影响资本周转快慢的因素有很多，关键的因素有两个：<ul><li>  一是资本周转时间</li><li>  二是生产资本中固定资本和流动资本的构成流动资本越大，资本家赚的钱越快 eg.擀面杖是固定资本，面是流动资本</li></ul></li></ul></li><li>马克思对资本家全部垫付资本的三次划分<ul><li>  <img src="https://api2.mubu.com/v3/document_image/8bd75b34-2dad-40a3-8cf3-097deaa0c93f-5533406.jpg">不变资本：买材料的钱不能增值；可变资本：买工人的钱能增值 货币资本：以现金存在；生产资本：以生产资料存在；商品资本：以商品存在 固定资本：能多次使用（资本多次流动）；流动资本：资本一次流动</li></ul></li><li>  社会再生产的核心问题是社会总产品的实现问题，即社会总产品的<strong>价值补偿<strong><strong>和</strong></strong>实物补偿****问题</strong>价值补偿：商品能卖出去，资金能收回来 实物补偿：能够买到原材料</li></ul></li><li>工资与剩余价值的分配—— #重点<ul><li>  资本主义工资的本质：在资本主义制度下，工人工资是劳动力的价值或价格</li><li>  工资表现为:劳动的价格或工人全部劳动的报酬，这就模糊了工人必要劳动和剩余劳动的界限，掩盖了资本主义剥削关系</li><li>概念<ul><li>  成本价格：数值上等于固定资本和可变资本之和C+V</li><li>  利润（r）：数值上等于剩余价值m</li><li>  平均利润：成本*平均利润率</li><li>  平均利润率：<strong>行业间竞争形成的</strong>（资本流动形成）资本从收益低的行业1流向收益高的行业2→行业2逐渐饱和，利润下降，行业1缺失利润上升，最后趋于稳定</li><li>  生产价格：=成本价格+平均利润资本家出售商品是按照生产价格<strong>出售</strong>，其<strong>不等同于****成本价格</strong></li><li>  超额利润：就是超额剩余价值，由<strong>企业间竞争</strong>形成的即使平均利润率已经形成，但是超额利润依旧存在，因为平均利润率是<strong>行业间竞争</strong>形成的，超额利润是<strong>企业间竞争</strong>形成的</li></ul></li><li>等量资本活动等量利润的原则<ul><li>  在利润平均化规律作用下，产业资本家获得产业利润，商业资本获得商业利润，银行资本家获得银行利润，土地所有者获得地租</li></ul></li></ul></li><li>马克思剩余价值理论的意义—— #非重点<ul><li>马克思在<strong>理论上</strong>上的两大贡献 #贡献（马克思在<strong>哲学史</strong>上的两大贡献 #贡献）<ul><li>  创立了唯物史观</li><li>  创立了剩余价值理论</li></ul></li></ul></li><li>资本主义的基本矛盾与经济危机—— #重点<ul><li>  生产资料资本主义私人占有和生产社会化之间的矛盾，是资本主义的基本矛盾。这是生产力和生产关系之间的矛盾在资本主义社会的具体体现</li><li>  生产相对过剩是资本主义经济危机的本质特征相对过剩：社会生产过于盲目</li><li>  经济危机的<strong>可能性</strong>是由货币作为支付手段和流通手段引起的</li><li>  资本主义经济危机爆发的根本原因是资本主义的基本矛盾</li><li>  经济危机一般包括四个阶段：危机、萧条、复苏和高涨</li></ul></li><li>资本主义的国家、政治制度及其本质—— #重点<ul><li>资本主义国家的职能包括对内对外两个基本方面<ul><li>  对内实行政治统治和社会管理</li><li>  对外进行国际交往和维护国家安全及利益</li></ul></li><li>  民主制度：“主权在民”、“天赋人权”、“分权制衡”、“社会契约”、“自由、平等、博爱”</li><li>  法制：宪法是资本主义国家法律制度的核心，它所依据的基本原则有：私有制原则，“主权在民”原则，分权与制衡原则和人权原则</li><li>  国家政权：分权制衡的组织形式，即国家的立法权、行政权、司法权分别由三个权力主体独立行使</li><li>资本主义政治制度的进步作用和局限性（评价）主要考局限性，进步性是<strong>相对</strong>封建阶级政治制度具有进步<ul><li>  其一，资本主义的民主是金钱操纵下的民主，实际是资产阶级精英统治下的民主</li><li>  其二，法律名义上的平等掩盖着事实上的不平等</li><li>  其三，资本主义国家的政党制是一种维护资产阶级统治的政治制度，其多党制则是资产阶级选择自己的国家管理者，实现其内部利益平衡的政治机制</li></ul></li></ul></li><li>资本主义的意识形态及其本质—— #非重点<ul><li>  第一，资本主义意识形态是资本主义社会条件下的观念上层建筑，是为资本主义社会形态的经济基础服务的</li><li>  第二，资本主义意识形态是资产阶级的阶级意识的集中体现</li></ul></li></ul></li><li>垄断阶段<ul><li>资本主义从竞争到垄断—— #重点<ul><li>资本主义的发展经历自由竞争资本主义和垄断资本主义两个阶段。垄断取代自由竞争在资本主义经济中占据统治地位。<ul><li>  垄断资本主义的发展包括私人垄断资本主义和国家垄断资本主义两种形式</li></ul></li><li>垄断是指少数资本主义大企业，<strong>为了获得高额利润</strong>，通过相互协议或联合，对一个或几个部门商品的生产、销售和价格进行操纵与控制<ul><li>垄断形成的两种方式（手段）<ul><li>  `生产集中`是指生产资料、劳动力和商品的生产日益**集中于少数大企业**的过程，其结果是大企业在社会生产中所占的比重不断增加</li><li>  `资本集中`是指**大资本吞并小资本**，或由许多小资本合并而成大资本的过程，其结果是越来越多的资本为少数大资本所支配</li></ul></li><li>垄断形成的原因：<ul><li>  1. 获得高额利润</li><li>  2. 避免两败俱伤</li><li>  3. 形成竞争限制</li></ul></li></ul></li><li>垄断和竞争<ul><li>垄断资本主义阶段存在竞争的主要原因：<ul><li>  一是垄断没有消除产生竞争的经济条件产生竞争的经济条件：私有制</li><li>  二是垄断必须通过竞争来维持</li><li>  三是不存在由一个垄断组织囊括一切部门、一切社会生产的绝对垄断</li></ul></li><li>垄断条件下的竞争同自由竞争相比，具有一些新特点：自由竞争是为了获得平均利润<ul><li>  1. 竞争的主要目的是要获得高额垄断利润，巩固、扩大已有的垄断地位</li><li>  2. 不仅采取经济手段还采取非经济手段，使竞争更加复杂。</li><li>  3. 竞争的规模扩大，范围遍及各个领域和部门，并由国内扩展到国外</li></ul></li></ul></li><li>金融资本和金融寡头<ul><li>  `金融资本`是由`工业垄断资本`和`银行垄断资本`融合在一起而形成的一种`垄断资本`</li><li>  金融资本形成的主要途径包括金融联系、资本参与和人事参与金融联系：借贷 资本参与：让别人参股 人事参与：让别人的人进入公司</li><li>金融寡头是指操纵国民经济命脉，并在实际上控制国家政权的少数垄断资本家或垄断资本家集团几个最大的金融资本被称为金融寡头<ul><li>  经济上：“参与制”来实现的</li><li>  政治上：“个人联合”</li><li>  金融寡头还通过建立政策咨询机构，掌握新闻科教文化等来左右和影响内政外交与社会生活</li></ul></li><li>垄断利润是垄断资本家凭借其在社会生产和流通中的垄断地位而获得的超过平均利润的高额利润<ul><li>垄断利润的来源：垄断资本所获得的高额利润，归根到底来自无产阶级和其他劳动人民创造的剩余价值：<ul><li>  1.对本国无产阶级和其他劳动人民剥削的加强</li><li>  2.通过控制市场占有其他企业特别是非垄断企业的利润eg.榨取产业链供应商的利润</li><li>  3.通过加强对其他国家劳动人民的剥削和掠夺获取的国外利润eg.国外代工</li><li>  4.通过资本主义国家政权进行有利于垄断资本的再分配，从而将劳动人民创造的国民收入的一部分变成垄断资本的收入</li></ul></li><li>垄断利润的实现：垄断利润主要是通过垄断组织制定的垄断价格来实现的<ul><li>  垄断价格是垄断组织在销售或购买商品时，凭借其垄断地位规定的、旨在保证获取最大限度利润的市场价格</li><li>  *<em>垄断价格</em>***=<strong><strong>成本价格</strong></strong>+<strong><strong>平均利润</strong></strong>+**<strong>垄断利润</strong>平均利润=成本价格*平均利润率</li><li>  垄断价格包括垄断高价和垄断低价两种形式垄断高价：卖东西给消费者 垄断低价：买供应商的东西</li><li>  垄断价格的产生并没有否定价值规律，它是价值规律在垄断资本主义<strong>阶段作用</strong>的具体表现简单商品经济：价格围绕价值上下波动 自由竞争资本主义时期（价值规律内容未变）：价格围绕生产价格上下波动 垄断时期（价值规律内容未变）：价格围绕垄断价格上下波动</li></ul></li></ul></li></ul></li></ul></li><li>垄断资本主义的发展—— #重点发展：私人垄断-&gt;国家垄断-&gt;国际垄断（国际垄断同盟，早期国际垄断同盟叫国际卡特尔，今天国际垄断同盟叫国家垄断资本主义的国际联盟)<ul><li>国家垄断资本主义是国家政权和私人垄断资本融合在一起的垄断资本主义<ul><li>国家断资本主义 形成的原因<ul><li>  首先，社会生产力的发展，要求资本主义生产资料在更大范围内被支配，从而促进了国家垄断资本主义的产生根本原因</li><li>  其次，经济波动和经济危机的深化，要求国家垄断资本主义的产生</li><li>  最后，缓和社会矛盾、协调利益关系，也要求国家垄断资本主义的产生</li></ul></li><li>国家断资本主义的主要形式<ul><li>  一是国家所有并直接经营的企业</li><li>  二是国家与私人共有、合营企业</li><li>  三是国家通过多种形式参与私人垄断资本的再生产过程，包括国家向私人垄断企业订货、提供补贴等</li><li>四是<strong>宏观调节</strong><ul><li>  宏观调控的目标：经济快速增长、充分就业、物价稳定和国际收支平衡</li></ul></li><li>五是<strong>微观规制</strong><ul><li>  微观规制的目标：规范市场秩序，限制垄断，保护竞争，维护社会公众的合法权益</li><li>  微观规制主要有三种类型：其一是反托拉斯法；其二是公共事业规制；其三是社会经济规制反托拉斯法：反垄断法​</li></ul></li></ul></li><li>对国家垄断资本主义的评价：<ul><li>  积极方面：国家垄断资本主义是垄断资本主义的新发展，它对资本主义经济的发展产生了积极的作用</li><li>  消极方面：但是，国家垄断资本主义的出现并没有改变垄断资本主义的性质。国家垄断资本主义的出现是<strong>资本主义经济制度内</strong>的经济关系调整并没有从根本上消除资本主义的基本矛盾</li></ul></li></ul></li><li>金融自由化与金融创新是金融垄断资本得以形成和壮大的重要制度条件<ul><li>垄断资本主义的金融化程度不断提高体现在：<ul><li>  第一，金融业在国民经济中的地位大幅上升，金融资本在资本主义国家国民生产总值和利润总额中所占的比例越来越大</li><li>  第二，随着实体经济的资本利润率下降，面对激烈竞争，实体经济部门不得不把利润的一部分投向金融领域，导致金融资本的急剧膨胀</li><li>  第三，造业就业人数严重减少，以金融为核心的服务业就业人数逐步增加</li><li>  第四，虚拟经济越来越脱离实体经济</li></ul></li><li>  金融垄断资本的发展，一方面促进了资本主义的发展另一方面也造成了经济过度虚拟化，导致金融危机频繁发生，不仅给资本主义经济，也给全球经济带来灾难</li></ul></li><li>垄断资本向世界范围扩展<ul><li>经济动因<ul><li>  一是将国内过剩的资本输出</li><li>  二是将部分非要害技术转移到国外</li><li>  三是争夺商品销售市场</li><li>  四是确保原材料和能源的可靠来源</li></ul></li><li>基本形式有三种<ul><li>  一是借贷资本输出</li><li>  二是生产资本输出</li><li>  三是商品资本输出</li></ul></li><li>从输出资本来源看，主要有两类<ul><li>  一是私人资本的输出</li><li>  二是国家资本的输出</li></ul></li><li>  经济社会后果：对资本输出国来说是有利的，对资本输入国来说是一把双刃剑对输出国<strong>只有</strong>好处没有坏处（<strong>×</strong>）对输出国是有利的（<strong>√</strong>）</li><li>  国际垄断同盟在经济上瓜分世界是通过垄断组织间的协议实现的，而协议的订立、瓜分的结果又以经济实力为后盾和基础</li><li>早期的国际垄断同盟主要是国际卡特尔。当代国际垄断同盟的形式以跨国公司和国家垄断资本主义的国际联盟为主。<ul><li>  从事国际经济协调、维护国际经济秩序的国际性协调组织主要有三个：国际货币基金组织、世界银行和世界贸易组织第二次世界大战后</li></ul></li><li>  评价：垄断资本国际化条件下各种形式的国际垄断组织、国际垄断同盟和国际经济协调机构的发展，在一定程度上促进了经济全球化的发展，<strong>但它们从根本上说是为了维护资产阶级的利益、为他们覆取高额垄断利润服务的</strong></li></ul></li></ul></li><li>经济全球化及其后果—— #重点<ul><li>经济全球化的表现包括：由垂直分工转向水平分工（扁平化分工）（不已产业分工，而是以一个产业中的不同环节而分工）<ul><li>  一是国际分工进一步分化</li><li>  二是贸易的全球化商品服务</li><li>  三是金融的全球化资本在全世界范围流通</li><li>  四是企业经营的全球化</li></ul></li><li>导致经济全球化迅猛发展的因素主要有（原因）：<ul><li>  一是科学技术的进步和生产力的发展根本原因</li><li>  二是跨国公司的发展</li><li>  三是各国经济体制的变革</li></ul></li><li>经济全球化的影响：<ul><li>  一方面，经济全球化的过程是生产社会化程度不断提高的过程</li><li>另一方面，经济全球化又是个充满矛盾的过程，它在产生积极效应的同时，也会产生消极的后果。双刃剑<ul><li>  积极影响：促进资源在全世界配置，促进世界经济发展</li><li>消极影响<ul><li>  一是发达国家与发展中国家之间的差距进一步扩大#差距扩大 ：都在发展，但是差距扩大</li><li>  二是在经济增长中忽视社会进步、环境恶化与经济全球化有可能同时发生</li><li>  三是各国特别是相对落后国家原有的体制、政府领导能力社会设施、政策体系、价值观念和文化都面临全球化的冲击</li><li>  四是经济全球化使各国的产业结构调整变成一种全球行为，它既为一国经济竞争力的提高提供了条件，同时也存在着对别国形成依赖的危险</li></ul></li></ul></li></ul></li></ul></li></ul></li><li>当代资本主义的变化<ul><li>当代资本主义经济政治新变化的表现和特点—— #重点<ul><li>生产资料所有制的变化<ul><li>  1. 个体资本所有制</li><li>  2. 私人股份资本所有制</li><li>  3. 国家资本所有制形式</li><li>  4. 法人资本所有制</li></ul></li><li>劳资关系和分配关系的变化<ul><li>  职工参与决策，终身雇佣，职工持股</li></ul></li><li>社会阶层的变化<ul><li>  一是资本家的地位和作用发生了很大的变化，拥有所有权的资本家一般不再直接经营和管理企业，而是靠拥有的企业股票等有价证券的利息收入为生</li><li>  二是高级职业经理成为大公司经营活动的实际控制者</li><li>  三是知识型和服务型劳动者的数量不断增加，劳动方式发生了新变化</li></ul></li><li>政治制度的变化<ul><li>  首先，政治制度出现多元化的趋势，公民权利有所扩大</li><li>  其次，法制建设得到重视和加强，以协调社会各阶级、阶层之间的利益</li><li>  最后，改良主义政党在政治舞台上的影响日益扩大</li></ul></li><li>经济危机呈现出新的特点（ #非重点 ）<ul><li>  去工业化和产业空心化日趋严重，产业竞争力下降；经济高度金融化，虚拟经济与实体经济严重脱节</li><li>  财政严重债务化，债务危机频繁爆发</li><li>  两极分化和社会对立加剧#差距扩大</li><li>  经济增长乏力，发展活力不足，周期性危机与结构性危机交织在一起</li><li>  金融危机频发，全球经济屡受打击</li></ul></li></ul></li><li>当代资本主义新变化的原因和实质—— #重点<ul><li>新变化的原因主要有<ul><li>  首先，科学技术革命和生产力的发展，是资本主义变化的根本推动力量根本原因</li><li>  其次，工人阶级争取自身权利斗争的作用，是推动资本主义变化的重要力量</li><li>  再次，社会主义制度初步显示的优越性对资本主义产生了一定影响</li><li>  最后，主张改良主义的政党对资本主义制度的改革</li></ul></li><li>当代`资本主义新变化`的`实质`<ul><li>  首先，当代资本主义发生的变化从根本上说是人类社会发展一般规律和资本主义经济规律作用的结果</li><li>  其次，当代资本主义发生的变化是在资本主义制度基本`框架内`的的变化，并不意味着资本主义生产关系的根本性质发生了变化框架内的的变化只有量变没有质变</li></ul></li><li>  当代资本主义的新变化是深刻的，其意义也是深远的，但是，这些变化并<strong>没有触动资本主义统治的根基</strong>，并<strong>没有改变资本主义制度的本质</strong>，也<strong>没有改变马克思主义关于资本主义的基本论断的科学性</strong></li></ul></li><li>2008年国际金融危机以来资本主义的矛盾与冲突—— #重点<ul><li>在这场危机的影响下，西方国家的经济生活、政治生活和民生等各方面都出现了各种问题<ul><li>  第一，经济发展“失调”一些国家开始保护主义（反全球化）</li><li>  第二，政治体制“失灵”</li><li>  第三，社会融合机制“失效”社会冲突加剧</li></ul></li><li>  这些现象背后的<strong>深层次</strong>原因和根源，归根结底还在于<strong>资本主义制度本身</strong>，在于资本主义的基本矛盾</li></ul></li><li>资本主义的历史地位和发展趋势—— #非重点<ul><li>  资本主义的内在矛盾决定了资本主义必然被社会主义所代替</li></ul></li></ul></li></ul></li></ul></li><li>科社社会科学主义：目的、归宿<ul><li>社会主义社会<ul><li>空想社会主义的产生、发展和局限性—— #重点<ul><li>  从16世纪初期兴起的社会主义思潮算起，社会主义到现在已经有五百年的历史，其间经历了<strong>从空想到科学</strong>、<strong>从理想到现实</strong>、<strong>从一国到多国的发展</strong>，也经历了<strong>从苏东剧变到中国特色社会主义蓬勃兴起</strong>的过程。<strong>从空想到科学</strong>、<strong>从理想到现实</strong>称为社会主义发展史上的两次飞跃</li><li>19世纪初期以<strong>圣西门、傅立叶、欧文</strong>为代表的空想社会主义是科学社会主义的<strong>直接</strong>思想来源。<ul><li>空想社会主义的局限性主要表现在<ul><li>  (1) 空想社会主义者只看到了资本主义必然灭亡的命运，却未能揭示资本主义必然灭亡的经济根源必然灭亡的经济根源是：资本主义的基本矛盾</li><li>  (2) 他们要求埋葬资本主义，却看不到埋葬资本主义的力量埋葬资本主义的力量是无产阶级</li><li>  (3) 他们憧憬取代资本主义的理想社会，却找不到通往理想社会的现实道路通往理想社会的现实道路：无产阶级 革命</li></ul></li></ul></li></ul></li><li>科学社会主义的创立—— #重点<ul><li>  马克思、恩格斯在新的历史条件下创立了唯物史观和剩余价值学说，从而<strong>超越</strong>了空想社会主义，<strong>创立</strong>了科学社会主义科学社会主义创立的理论基础是唯物史观和剩余价值学说 马克思在理论上的两大贡献：唯物史观和剩余价值学说 马克思在<strong>哲学史</strong>上的两大贡献 #贡献</li><li>  《共产党宣言》的发表，<strong>标志</strong>着<strong>科学社会主义的产生</strong></li></ul></li><li>第一国际和巴黎公社—— #重点马恩就是第一领导人<ul><li>马克思、恩格斯在指导建立无产阶级政党的过程中，阐述了<strong>各国无产阶级政党相互关系</strong>的重要<strong>原则</strong><ul><li>  一是坚持无产阶级的国际联合</li><li>  二是坚持各国党的独立自主和完全平等</li></ul></li><li>马克思在领导巴黎公社总结出的无产阶级革命的<strong>经验</strong><ul><li>  1. 必须打碎旧的国家机器</li><li>  2. 建立无产阶级专政的政权</li><li>  3. 暴力革命</li><li>  4. 无产阶级政党的领导</li></ul></li></ul></li><li>无产阶级革命与俄国的探索—— #重点<ul><li>十月革命是世界历史上划时代的重大事件，产生了深远的历史影响（意义）<ul><li>  首先，它将马克思主义关于无产阶级革命的<strong>理论变为现实</strong>；开启了无产阶级革命的新时代，建立了世界上第一个社会主义国家。</li><li>  其次，它沉重打击了帝国主义的统治，<strong>鼓舞</strong>了资本主义国家的革命运动。鼓舞无产阶级</li><li>  再次，它<strong>激励</strong>了殖民地、半殖民地的民族民主革命，掀起了被压迫民族解放斗争的新高潮。激励被侵略国家</li><li>  最后，它促进了马克思列宁主义的传播，<strong>推进了无产阶级政党的建立</strong></li></ul></li><li>列宁领导的苏维埃俄国对社会主义的探索列宁多为褒方面的评价<ul><li>列宁领导的苏维埃俄国对社会主义道路的探索，大体经历了三个时期<ul><li>  第一个时期：进一步<strong>巩固</strong>苏维埃政权时期</li><li>  第二个时期：外国武装<strong>干涉和国内战争时期</strong>，即战时共产主义时期战时共产主义时期：取消商品货币关系</li><li>  第三个时期：由战时共产主义转变为新经济政策时期</li></ul></li><li>新经济政策的特点<ul><li>  首先，把建设社会主义作为一个长期探索、不断实践的过程</li><li>  其次，把大力发展生产力、提高劳动生产率放在首要地位</li><li>  再次，在多种经济成分并存的条件下，利用商品、货币和市场发展经济</li><li>  最后，利用资本主义，建设社会主义</li></ul></li><li>列宁努力把马克思主义基本原理同俄国的具体实际相结合，探索出一条适合俄国国情的社会主义道路。这是列宁对马克思主义的重大贡献，也是他留给后人的最宝贵的思想遗产<ul><li>列宁对马克思主义的两大贡献 #贡献<ul><li>把马克思主义的理论同本国国情相结合</li></ul></li></ul></li></ul></li><li>苏联模式的基本特征包括：斯大林多为贬方面的评价<ul><li>(1) 从经济方面来看，主要是由经济发展战略和经济体制两部分组成。<ul><li>  在经济发展战略方面，主要是以高速度发展国民经济为首要任务，以重工业为发展重点，实现从农业国到工业国的转变。与这种发展战略相适应</li><li>  在经济体制方面，主要是在所有制结构上形成了单一的生产资料公有制形式，在经济运行中排斥市场机制，完全采用行政手段，形成了过度集中的指令性计划经济模式</li></ul></li><li>  (2) 从政治方面来看，主要表现为过度集权的党口国家领导体制，自上而下的干部任命制，软弱而低效的监督机制等</li><li>  战时共产主义-&gt;新经济政策-&gt;苏联模式特点上（方便记忆）：战时共产主义：共产主义；新经济政策：类中国改革后；苏联模式：类中国改革前</li></ul></li></ul></li><li>正确把握科学社会主义一般原则的主要内容——#非重点<ul><li>  中国特色社会主义是科学社会主义理论逻辑与中国社会发展历史逻辑的辩证统一。它既<strong>坚持了科学社会主义****基本原则</strong>，又根据时代条件和具体国情赋予其鲜明的中国特色，这是中国特色社会主义蓬勃发展的根本原因</li></ul></li><li>社会主义首先在经济文化相对落后的国家取得胜利的主要原因—— #重点列宁的贡献之二<ul><li>  第一，经济文化相对落后的国家可以先于发达资本主义国家进入社会主义，是由革命的客观形势和条件所决定的</li><li>  第二，经济文化相对落后的国家可以先于发达资本主义国家进入社会主义，并不违背生产关系一定要适应生产力状况的规律</li><li>  第三，经济文化相对落后的国家率先进入社会主义，也是历史发展规律作用的结果</li></ul></li></ul></li><li>共产主义社会<ul><li>马克思主义经典作家展望未来社会的科学立场和方法—— #重点马克思主义经典作家：马恩列毛邓<ul><li>  1. 在揭示人类社会发展一般规律的基础上指明社会发展的方向</li><li>  2. 在剖析资本主义社会旧世界的过程中阐发未来新世界的特点</li><li>  3. 在社会主义社会发展中不断深化对未来共产主义社会的认识</li><li>  4. 立足于揭示未来社会的一般特征，而<strong>不可能对各种细节作具体描绘</strong></li></ul></li><li>共产主义社会的基本特征—— #重点共产主义社会是无矛盾的和谐社会（<strong>×</strong>）因为：<strong>矛盾</strong>具有<strong>普遍性</strong><ul><li>  1. 物质财富极大丰富，消费资料按需分配</li><li>  2. 社会关系高度和谐，人们精神境界极大提高</li><li>  3. 实现每个人自由而全面的发展，人类从必然王国向自由王国的飞跃</li></ul></li><li>自由是有限制的<ul><li>  规律限制：无法跳出规律</li><li>  别人的自由限制：自己的自由不能牺牲别人的自由</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 研 </category>
          
          <category> 政治 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第2章 物理层</title>
      <link href="/2022/09/20/cn2-wlc/"/>
      <url>/2022/09/20/cn2-wlc/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章-物理层"><a href="#第二章-物理层" class="headerlink" title="第二章 物理层"></a>第二章 物理层</h1><p>#计算机网络</p><h2 id="物理层接口特性"><a href="#物理层接口特性" class="headerlink" title="物理层接口特性"></a>物理层接口特性</h2><ol><li> <strong>机械特性</strong>：定义物理连接的特性，规定物理连接时所采用的规格、接口形状、引线数目、引脚数量和排列情况</li><li> <strong>电气特性</strong>：规定传输二进制位时，线路上的信号的电压范围、阻抗匹配、传输速率和距离限制 <strong>(电压-&gt;电平)</strong></li><li> <strong>功能特性</strong>：指明某条线上出现的某一电平表示何种意义，接口部件的信号线的用途 <strong>(电平的意义)</strong></li><li> <strong>规程特性（过程特性）</strong>：定义各条物理线路的工作规程和时序关系</li></ol><h2 id="同步传输于异步传输"><a href="#同步传输于异步传输" class="headerlink" title="同步传输于异步传输"></a>同步传输于异步传输</h2><ol><li> 同步传输：在同步传输的模式下，数据的传送是以一个数据区块为单位。因此同步传输又称区块传输，在传送数据时，需要先发送出一个或多个同步字符再送出整批数据。</li><li> 异步传输：异步传输将比特分成小组进行传送，小组可以是8位的1个字符或更长，发送方可以在任何时刻发送这些比特组，而接收方不知道它们什么时候会到达，在传送数据时加上一个字符的起始位和一个字符的终止位。</li></ol><h2 id="串行和并行"><a href="#串行和并行" class="headerlink" title="串行和并行"></a>串行和并行</h2><ol><li>串行：将一个字符的8位二进制数由低位到高位依次传输<br> 速度慢、费用低、适合远距离传输<br> <img src="http://blog.zhuanjie.ltd/img/uploads/2022/09/%E4%B8%B2%E8%A1%8C.png"></li><li>并行：将一个字符的8位二进制数同时通过8条信道传输<br> 速度快、费用高、适合近距离传输<br> <img src="http://blog.zhuanjie.ltd/img/uploads/2022/09/%E5%B9%B6%E8%A1%8C.png"></li></ol><h2 id="数据、信号、码元"><a href="#数据、信号、码元" class="headerlink" title="数据、信号、码元"></a>数据、信号、码元</h2><ol><li>数据：<br> 传送信息的实体（有意义的符号序列）</li><li>信号<ol><li> 数字信号/离散信号</li><li> 模拟信号/连续信号</li></ol></li><li>码元<br> 固定时长的信号波形<br> n进制码元中1码元-&gt;log2n比特</li></ol><h2 id="信道（逻辑通路）、信源、信宿"><a href="#信道（逻辑通路）、信源、信宿" class="headerlink" title="信道（逻辑通路）、信源、信宿"></a>信道（逻辑通路）、信源、信宿</h2><p>数据从信源发送到信宿<br>信道是信号的传输媒介（<strong>信道是有方向的</strong>）</p><p><strong>ATT：信道上传递的信号</strong></p><ol><li> 基带信号：将数字1和0直接用两种不同的电压表示，再送到<strong>数字信道</strong>上传输（基带传输）（近距离传输）</li><li> 宽带信号：将基带信号进行调制后形成的频分复用模拟信号，再传送到<strong>模拟信道</strong>上去传输（宽带传输）（远距离传输）</li></ol><h2 id="速率、波特、带宽"><a href="#速率、波特、带宽" class="headerlink" title="速率、波特、带宽"></a>速率、波特、带宽</h2><ol><li> 码元传输速率（波特率）：单位时间内传输的码元的个数（信号脉冲个数/信号变化的次数），单位是波特（Baud）。1波特表示<strong>数字通信系统</strong>每秒传输一个码元。其中码元可以是多进制的，<strong>码元速率于进制数无关</strong></li><li> 信息传输速率（信息速率，比特率）：表示单位时间内<strong>数字通信系统</strong>传输的<strong>二进制</strong>码元的个数（即比特数）（二进制码元数AKA比特数）</li><li>[[第1章 计算机网络体系结构#^b69777带宽]]：<ol><li> 模拟信号中：最高频率和最低频率的插值即为（通频）带宽，单位赫兹（Hz）</li><li> 数字信号中：单位时间从网络中的某一点到另一点能通过对最高数据率/单位时间内通过链路的数量</li></ol></li></ol><h2 id="奈式准则和香农定理"><a href="#奈式准则和香农定理" class="headerlink" title="奈式准则和香农定理"></a>奈式准则和香农定理</h2><ol><li>==奈式准则==<br> 理想低通（无噪声、带宽限制）<br> 极限数据传输<strong>速率 = 2Wlog2V</strong>（单位为b/s）<br> W为信道带宽，单位赫兹（Hz）<br> V为每个码元离散电平的数目</li><li>==香农定理==<br> 带宽受限且有噪声<br> 极限数据传输**速率 = 2Wlog2(1+S/N)**（单位为b/s）<br> W为信道带宽，单位赫兹（Hz）<br> S为信道所传输信号的平均功率<br> N为信道内部的高斯噪声功率<br> <strong>信噪比 = 10log10(S/N)</strong></li></ol><h2 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h2><p>数据-&gt;编码-&gt;数字信号<br>数据-&gt;调制-&gt;模拟信号</p><ol><li>数字数据-&gt;数字信号<ol><li>归零编码(RZ)<br> 高1低0</li><li>非归零编码(NRZ)<br> 高1低0</li><li>反向非归零编码(NRZI)<br> 高0低1</li><li>曼彻斯特编码<br> 前高后低为1</li><li>差分曼彻斯特编码<br> 同1异0</li><li>4B/5B编码<br> 16种4位码与16种(共32种)5位码一一对应，编码效率80%<br> <img src="http://blog.zhuanjie.ltd/img/uploads/2022/09/%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F.png"></li></ol></li><li>数字数据-&gt;模拟信号<ol><li> 调幅 ASK 幅移键控</li><li> 调频 FSK 频移键控</li><li> 调相 PSK 相移键控</li><li> 调幅+调相 QAM 正交振幅调制</li></ol></li><li>模拟数据-&gt;数字信号<br> PCM脉码调制<ol><li>采样<br> 采样定理（奈奎斯特定理）：<strong>采样频率大于等于模拟数据的带宽频率的两倍f采样≥2f最大</strong></li><li> 量化：将电平数值按照分级转化为数字取整</li><li> 编码：把量化结果转换为对应的二进制编码</li></ol></li><li>模拟数据-&gt;模拟信号<br> 放大器，调制器</li></ol><h2 id="电路交换、报文交换、分组交换"><a href="#电路交换、报文交换、分组交换" class="headerlink" title="电路交换、报文交换、分组交换"></a>电路交换、报文交换、分组交换</h2><ol><li>电路交换<ol><li> 特点：独占资源，用户始终占用端到端的固定传输带宽。适用于远程批处理信息、传输或系统间实时性高的大量数据传输情况。</li><li>优点：<ol><li> 通信实验小</li><li> 有序传输</li><li> 没有冲突（全双工）</li><li> 适用范围广</li><li> 实时性强</li><li> 控制简单</li></ol></li><li>缺点：<ol><li> 建立连接时间长</li><li> 线路独占，使用效率底</li><li> 灵活性差</li><li> 难以规格化</li><li> 无存储能力</li><li> 无差错控制</li></ol></li></ol></li><li>报文交换<ol><li> 原理：存储、转发</li><li>优点：<ol><li> 无需建立连接</li><li> 动态分配路线</li><li> 提高线路可靠性</li><li> 提高线路利用率</li><li> 提供多目标服务</li></ol></li><li>缺点：<ol><li> 实时性差</li><li> 只适合数字信号</li><li> 要求网络结点有较大的缓存空间</li></ol></li></ol></li><li>分组交换<ol><li> 原理：限制要传输的数据单位的长度</li><li><strong>数据报方式</strong><br> 特点：<br> 1. 无需建立连接<br> 2. 可能会产生失序、丢失或重复分组<br> 3. 发送的分组需要包括发送端和接收端的完整地址<br> 4. 分组再交换结点存储转发时，需要排队，即有传输时延<br> 5. 网络具有冗余路径（不适合长报文和会话式通信）<br> 6. 存储转发时延小，提高网络吞吐量<br> 7. 资源利用率高</li><li><strong>虚电路方式</strong><br> 特点：<br> 1. 建立和拆除需要时间<br> 2. 连接确定了后就确定了传输路径<br> 3. 虚电路提供可靠的通信功能，能保证每个分组正确且有序到达（当接收方来不及接受数据时，可以通知发送方暂缓发送）<br> 4. 当网络某个结点或某条链路出现故障而失效时，所有经过该节点或者该链路的虚电路遭到破坏<br> 5. 分组首部不包含目的地址，而包含虚电路表示符，相对于数据报方式，其开销小</li></ol></li></ol><h2 id="传输介质（物理通路）"><a href="#传输介质（物理通路）" class="headerlink" title="传输介质（物理通路）"></a>传输介质（物理通路）</h2><p>传输介质并不知道传输的信号代表什么，而物理层规定了电气特性，传输介质位于物理层下面（第0层）</p><ol><li> 导向性传输介质：电磁波沿着固体媒介传播（铜线，光纤）</li><li> 非导向性传输介质：自由空间，介质可以是空气、真空、水</li></ol><p>介质：</p><ol><li>双绞线（模拟信号&amp;数字信号）<ol><li> 无屏蔽网（UTP）</li><li> 有屏蔽网（STP）</li><li>距离：几千米到数十千米<ol><li> 距离太远，对于模拟信号：要用放大器放大衰减信号</li><li> 距离太远，对于数字信号：要用中继器将失真信号整形</li></ol></li></ol></li><li>同轴电缆<ol><li> 基带数字信号（AKA基带同轴电缆）（局域网）</li><li> 宽带信号（AKA宽带同轴电缆）（有线电视系统）</li><li> 特点：有良好的抗干扰性，传输距离更远，价格较双绞线贵</li></ol></li><li>光纤<ol><li> 利用<strong>光脉冲</strong>通信</li><li> 带宽范围极大</li><li> 多模光纤：近距离传输</li><li> 单模光纤：近距离传输</li><li>特点：<ol><li> 传输损耗小，对远距离传输特别经济</li><li> 抗雷电和电磁干扰性能好</li><li> 无串音干扰，保密性好</li><li> 体积小重量轻</li></ol></li></ol></li><li>无线传播介质<ol><li>无线电波<br> 信号向所有方向传播（有穿透能力）（无线局域网）</li><li>微波、红外和激光<br> 信号沿固定方向传播<ol><li> 红外和激光要把传输的信号分别转换为各自的信号格式</li><li> 微波通信频率高，频段范围宽（数据率高）（eg.地面微波接力通信，卫星通信）</li><li>卫星通信：<ol><li> 优点：通信容量大、距离远、覆盖广、易于实现广播通信和多址通信</li><li> 缺点：保密性差、端到端传播时延长、受到气候影响大、误码率高、成本高</li></ol></li></ol></li></ol></li></ol><h2 id="物理层设备"><a href="#物理层设备" class="headerlink" title="物理层设备"></a>物理层设备</h2><ol><li>中继器<br> 中继器两端网段是同一个协议<br> 中继器两端的网络部分是网段，而不是子网，适用于完全相同的两类网络互联<br> 5-4-3规则：互相串联中继器不超过4个，这5段网络中只有3段能挂接计算机</li><li>集线器<br> （多口中继器）</li></ol><p><strong>ATT：放大器于中继器</strong></p><ol><li> 放大器：放大模拟信号，将衰减的信号放大</li><li> 中继器：再生数字信号，将衰减的信号整形再生</li></ol>]]></content>
      
      
      <categories>
          
          <category> 研 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第1章 计算机网络体系结构</title>
      <link href="/2022/09/20/cn1-jsjwltxjg/"/>
      <url>/2022/09/20/cn1-jsjwltxjg/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-计算机网络体系结构"><a href="#第一章-计算机网络体系结构" class="headerlink" title="第一章 计算机网络体系结构"></a>第一章 计算机网络体系结构</h1><p>#计算机网络</p><h2 id="计算机网络的发展"><a href="#计算机网络的发展" class="headerlink" title="计算机网络的发展"></a>计算机网络的发展</h2><ol><li>APARnet——internet——Internet<ol><li> internet——互联网</li><li> Internet——因特网</li></ol></li><li>三层体系结构因特网<ol><li> 主干网</li><li> 地区网</li><li> 校园网</li></ol></li><li>多层次ISP<ol><li> 主干ISP——地区ISP——本地ISP</li><li> 出现IXP</li><li> ISP：网络服务提供着（商）</li><li> IXP：因特网交换点（处于同一层次的ISP之间）</li></ol></li></ol><h2 id="计算机网路的组成"><a href="#计算机网路的组成" class="headerlink" title="计算机网路的组成"></a>计算机网路的组成</h2><ol><li> 从组成部分上看：硬件、软件、协议</li><li> 从工作方式上看：边缘部分、核心部分</li><li>从功能组成上看：通信子网、资源子网<ol><li> 通信子网：物理层、数据链路层、网络层（主要负责数据通信）</li><li>资源子网：会话层、表示层、应用层（主要负责向高层用户屏蔽下面通信子网的细节）<ul><li>  OSI模型种上三层</li></ul></li></ol></li></ol><p><strong>ATT：协议的组成部分：语法、语义、同步（时序）</strong></p><h2 id="计算机网络的功能"><a href="#计算机网络的功能" class="headerlink" title="计算机网络的功能"></a>计算机网络的功能</h2><ol><li>数据通信<br> <em>即通信子网功能</em></li><li>资源共享<br> <em>即资源子网功能</em></li><li> 分布式处理</li><li> 提高可靠性</li><li> 负载均衡</li></ol><h2 id="计算机网络的分类"><a href="#计算机网络的分类" class="headerlink" title="计算机网络的分类"></a>计算机网络的分类</h2><ol><li>按分布范围分类<ol><li>广域网（WAN）<br> <em>采用交换技术</em></li><li> 城域网（MAN）</li><li>局域网（LAN）<br> <em>采用广播技术</em></li><li> 个域网（PAN）</li></ol></li><li>按传输技术分类<ol><li>广播式网络<br> <em>常为总线型网络，共享通信信道</em></li><li>点对点网络<br> <em>常使用分组，存储、转发和路由选择机制</em></li></ol></li><li>按拓扑结构分类<ol><li> 总线型网络</li><li> 星形网络</li><li> 环形网络</li><li> 网状网络</li></ol></li><li>按使用者分类<ol><li> 公用网</li><li> 专用网</li></ol></li><li>按交换技术分类（_交换技术指的是数据交换技术_）<ol><li> 电路交换</li><li> 报文交换</li><li>分组交换<br> <em>报文交换和分组交换采用存储—转发技术</em></li></ol></li><li>按传输介质分类<ol><li> 有线网络</li><li> 无线网络</li></ol></li></ol><h2 id="计算机网络的性能指标"><a href="#计算机网络的性能指标" class="headerlink" title="计算机网络的性能指标"></a>计算机网络的性能指标</h2><ol><li>带宽<br> 指的是通信线路允许通过的信号频带范围/<strong>网络通信线路能传送的数据的能力</strong>，单位赫兹(Hz)/比特/秒(b/s)<br> ^b69777</li><li>时延<ol><li>发送时延<br> 发送时延 = 分组长度 / 信道宽度</li><li>传播时延<br> 传播时延 = 信道长度 / 电磁波在信道上的传播速率</li><li> 处理时延</li><li>排队时延<br> 总时延 = 发送时延 + 传播时延 + 处理时延 + 排队时延<br> 排队时延和处理时延一般可以忽略</li></ol></li><li>时延带宽积<br> 以比特为长度的链路单位<br> 时延带宽积 = 传播时延 * 信道带宽</li><li>往返时延<br> RTT = 两倍传播时延（忽略处理时延）</li><li>吞吐量<br> 单位时间通过某个网络（或信道、接口）的数据量，单位b/s</li><li>速率（传输速率、数据率、比特率）<br> 宏观数字信道上的传送数据的速率，单位b/s(bps)<br> 最高数据传输速率称为带宽</li><li>信道利用率<br> 信道利用率 = 有数据通过的时间 / 总时间</li></ol><p><strong>ATT：单位换算</strong></p><ol><li> 速率： 1Tb/s = 103Gb/s = 106Mb/s = 109Kb/s = 1012b/s 比特/秒 ^217130</li><li> 存储量： 1TB = 210GB = 220MB = 230KB = 240B 字节 = 8*240bit ^475694</li></ol><h2 id="计算机网络的分层结构"><a href="#计算机网络的分层结构" class="headerlink" title="计算机网络的分层结构"></a>计算机网络的分层结构</h2><ol><li> SDU 服务数据单元 每层的数据部分</li><li> PCI 协议控制信息 每层的首/尾部分</li><li>PDU 协议数据单元 每层的全部信息<br> PCI + SDU = PDU<br> n+1-PDU = n-SDU</li></ol><h2 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h2><p>OSI模型</p><p>功能</p><p>协议</p><p>SAP</p><p>[[第6章 应用层应用层]]</p><p>与用户交互</p><p>FTP, SMTP, HTTP，DHCP</p><p>提供的服务为用户界面</p><p>表示层</p><p>1. 数据格式变换 2. 数据加密解密 3. 数据的压缩与恢复</p><p>JPEG, ASCII</p><p> </p><p>会话层</p><p>1. 建立、管理、中止会话 2. 使用校验点，使通信失效时，从会话校验点/同步点继续恢复通信（大文件传输）</p><p>ADSP, ASP</p><p> </p><p>[[第5章 传输层传输层]]</p><p>1. 可靠/不可靠传输 2. <strong>差错控制</strong> 3. <strong>流量控制</strong> 4. 复用分用 5. <strong>拥塞控制</strong></p><p>TCP, UDP</p><p>端口</p><p>[[第4章 网络层网络层]]</p><p>1. 路由选择（分组转发） 2. <strong>流量控制</strong> 3. <strong>差错控制</strong> 4. <strong>拥塞控制</strong></p><p>IP, IPX, ICMP ,IGMP, ARP, RARP, OSPF</p><p>IP地址（网络地址）</p><p>[[第3章 数据链路层数据链路层]]</p><p>1. 成帧（定义帧的开始和结束） 2. <strong>差错控制</strong>（帧错+位错）（数据重发） 3. <strong>流量控制</strong>（物理寻址） 4. 访问（接入）控制（介质访问子层控制信道的访问）</p><p>SDLC, HDLC, PPP, STP, 帧中继，ARQ</p><p>MAC地址（网卡地址）</p><p>[[第2章 物理层物理层]]</p><p>1. 定义接口特性 2. 定义传输模式（单工、半双工、全双工） 3. 定义传输速率 4. 比特同步 5. 比特编码</p><p>Rj45, 802.3</p><p>网卡接口</p><p>SAP：服务访问点，逻辑接口，是一个层次系统的上下层之间进行通信的接口，N层的SAP就是N+1层可以访问N层服务的地方 ^690d1a</p><p> </p><p> </p><p> </p><blockquote><p>其中<strong>数据链路层</strong>被拆分为两个子层：<strong>逻辑控制（LLC）子层</strong>和<strong>媒体接入（MAC）子层</strong><br><strong>LLC子层</strong>与传输媒体无关，它<strong>向网络层提供无确认无连接、面向连接、带确认无连接、高速传输</strong>4种不同的连接服务类型<br><strong>MAC子层</strong>有接入传输媒体有关的内容，它向上屏蔽对物理层访问的各种差异，提供对物理层的统一访问接口，主要功能包括：<strong>组帧和拆卸帧、比特传输（帧的寻址和识别）、差错检测、透明传输</strong></p></blockquote><p>5层模型</p><p>传输单位</p><p>[[第6章 应用层应用层]]</p><p>报文</p><p>[[第5章 传输层传输层]]</p><p>报文段（TCP），用户数据报（UDP）</p><p>[[第4章 网络层网络层]]</p><p>分组，数据报</p><p>[[第3章 数据链路层数据链路层]]</p><p>帧</p><p>[[第2章 物理层物理层]]</p><p>比特流</p><p><strong>ATT： TCP/IP模型和OSI模型的比较</strong></p><ol><li>相同点：<ol><li> 都采用分层体系结构</li><li> 都是基于独立的协议栈的概念</li><li> 都可以解决异构网络的互联</li></ol></li><li>不同点：<ol><li> <strong>OSI模型</strong>定义了三个概念<strong>服务、协议和接口</strong></li><li> OSI不偏向于特定的协议</li><li> TCP/IP协议将网际协议(IP)作为一个单独的重要层次</li><li> OSI在网络层支持无连接和面向连接的通信，但在传输层只有面向连接的通信；TCP/IP在网际层只有无连接的通信模式，但在传输层有无连接和面向连接的两种模式</li></ol></li></ol><p> </p><p>OSI</p><p>TCP/IP</p><p>[[第5章 传输层传输层]]</p><p>面向连接</p><p>无连接+面向连接</p><p>[[第4章 网络层网络层]]</p><p>无连接+面向连接</p><p>无连接</p><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/09/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88-1024x763.png"></p><hr><p><strong>[[第4章 网络层#冲突域和广播域关于冲突域和广播域]]</strong></p><p>设备</p><p>所属层次</p><p>能否隔离冲突域</p><p>能否隔离广播域</p><p>[[第2章 物理层#物理层设备集线器]]</p><p>[[第2章 物理层物理层]]</p><p>不能</p><p>不能</p><p>[[第2章 物理层#物理层设备中继器]]</p><p>[[第2章 物理层物理层]]</p><p>不能</p><p>不能</p><p>[[第3章 数据链路层#交换机交换机]]</p><p>[[第3章 数据链路层数据链路层]]</p><p>能</p><p>不能</p><p>[[第3章 数据链路层#网桥网桥]]</p><p>[[第3章 数据链路层数据链路层]]</p><p>能</p><p>不能</p><p>[[第4章 网络层#路由器的组成和功能路由器]]</p><p>[[第4章 网络层网络层]]</p><p>能</p><p>能</p><p>^b35684</p>]]></content>
      
      
      <categories>
          
          <category> 研 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>每日一题——带分数</title>
      <link href="/2022/08/02/day10/"/>
      <url>/2022/08/02/day10/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>100 可以表示为带分数的形式：100 = 3 + 69258 / 714。</p><p>还可以表示为：100 = 82 + 3546 / 197。</p><p>注意特征：<strong>带分数中，数字1~9分别出现且只出现一次（不包含0）。</strong></p><p>类似这样的带分数，100 有 11 种表示法。</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>从标准输入读入一个正整数N (N&lt;1000*1000)</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>程序输出该数字用数码1~9不重复不遗漏地组成带分数表示的全部种数。</p><p><strong>注意：不要求输出每个表示，只统计有多少表示法！</strong></p><h3 id="样例输入1"><a href="#样例输入1" class="headerlink" title="样例输入1"></a>样例输入1</h3><blockquote><p> 100</p></blockquote><h3 id="样例输出1"><a href="#样例输出1" class="headerlink" title="样例输出1"></a>样例输出1</h3><blockquote><p> 11</p></blockquote><h3 id="样例输入2"><a href="#样例输入2" class="headerlink" title="样例输入2"></a>样例输入2</h3><blockquote><p> 105</p></blockquote><h3 id="样例输出2"><a href="#样例输出2" class="headerlink" title="样例输出2"></a>样例输出2</h3><blockquote><p> 6</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>暴力穷举，生成1~9的全排列，再根据数字判断循环是否进行</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="直接代码"><a href="#直接代码" class="headerlink" title="直接代码"></a>直接代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Author: 转接</span><br><span class="hljs-comment"> * @Date: 2022-08-02 16:01:02</span><br><span class="hljs-comment"> * @LastEditors: 转接</span><br><span class="hljs-comment"> * @LastEditTime: 2022-08-02 16:30:08</span><br><span class="hljs-comment"> * @Description: 带分数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">day10</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">每日一题——带分数</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">100 可以表示为带分数的形式：100 = 3 + 69258 / 714。</span><br><span class="hljs-comment">还可以表示为：100 = 82 + 3546 / 197。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, num = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; n;<br>    string s = <span class="hljs-string">&quot;123456789&quot;</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">7</span>; ++i) &#123;  <span class="hljs-comment">// i表示+前的串的长度</span><br>            string a = s.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, i);  <span class="hljs-comment">// 取出从0到i的字符串</span><br>            <span class="hljs-type">int</span> numa = <span class="hljs-built_in">atoi</span>(a.<span class="hljs-built_in">c_str</span>());  <span class="hljs-comment">// atoi传入char*类型将char类型转换为int类型</span><br>            <span class="hljs-keyword">if</span> (numa &gt;= n) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">9</span> - i - <span class="hljs-number">1</span>; ++j) &#123;  <span class="hljs-comment">// j表示+和/之间的长度</span><br>                string b = s.<span class="hljs-built_in">substr</span>(i, j);  <span class="hljs-comment">// 取出从i到/前的字符串</span><br>                string c = s.<span class="hljs-built_in">substr</span>(i + j);  <span class="hljs-comment">// 取出/后面的字符串</span><br>                <span class="hljs-type">int</span> numb = <span class="hljs-built_in">atoi</span>(b.<span class="hljs-built_in">c_str</span>());<br>                <span class="hljs-type">int</span> numc = <span class="hljs-built_in">atoi</span>(c.<span class="hljs-built_in">c_str</span>());<br>                <span class="hljs-keyword">if</span> (numb % numc == <span class="hljs-number">0</span> &amp;&amp; numa + numb / numc == n) &#123;<br>                    num++;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">while</span> (<span class="hljs-built_in">next_permutation</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>()));  <span class="hljs-comment">// 全排序</span><br>    cout &lt;&lt; num;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>存在的问题：substr耗费大量时间，其工作原理是开辟新空间拷贝原字符串再截取后再返回</p><p>解决方法：重写截取字串并转换为数字的函数，降低时间开销</p><h3 id="修改后代码"><a href="#修改后代码" class="headerlink" title="修改后代码"></a>修改后代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Author: 转接</span><br><span class="hljs-comment"> * @Date: 2022-08-02 16:01:02</span><br><span class="hljs-comment"> * @LastEditors: 转接</span><br><span class="hljs-comment"> * @LastEditTime: 2022-08-02 16:50:34</span><br><span class="hljs-comment"> * @Description: 带分数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">day10</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">每日一题——带分数</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">100 可以表示为带分数的形式：100 = 3 + 69258 / 714。</span><br><span class="hljs-comment">还可以表示为：100 = 82 + 3546 / 197。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getnum</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s, <span class="hljs-type">int</span> pos, <span class="hljs-type">int</span> len)</span> </span>&#123;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = pos; i &lt; pos + len; ++i) &#123;<br>        num += s[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        num *= <span class="hljs-number">10</span>;<br>    &#125;<br>    num /= <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">return</span> num;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, num = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; n;<br>    string s = <span class="hljs-string">&quot;123456789&quot;</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">7</span>; ++i) &#123;  <span class="hljs-comment">// i表示+前的串的长度</span><br>            <span class="hljs-type">int</span> numa = <span class="hljs-built_in">getnum</span>(s.<span class="hljs-built_in">c_str</span>(), <span class="hljs-number">0</span>, i);<br>            <span class="hljs-keyword">if</span> (numa &gt;= n) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">9</span> - i - <span class="hljs-number">1</span>; ++j) &#123;  <span class="hljs-comment">// j表示+和/之间的长度</span><br>                <span class="hljs-type">int</span> numb = <span class="hljs-built_in">getnum</span>(s.<span class="hljs-built_in">c_str</span>(), i, j);<br>                <span class="hljs-type">int</span> numc = <span class="hljs-built_in">getnum</span>(s.<span class="hljs-built_in">c_str</span>(), i + j, <span class="hljs-number">9</span> - i - j);<br>                <span class="hljs-keyword">if</span> (numb % numc == <span class="hljs-number">0</span> &amp;&amp; numa + numb / numc == n) &#123;<br>                    num++;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">while</span> (<span class="hljs-built_in">next_permutation</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>()));  <span class="hljs-comment">// 全排序</span><br>    cout &lt;&lt; num;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建IPSec服务</title>
      <link href="/2022/07/21/ipsec/"/>
      <url>/2022/07/21/ipsec/</url>
      
        <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/hwdsl2/setup-ipsec-vpn">hwdsl2/setup-ipsec-vpn: Scripts to build your own IPsec VPN server, with IPsec/L2TP, Cisco IPsec and IKEv2 (github.com)</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="脚本方式"><a href="#脚本方式" class="headerlink" title="脚本方式"></a>脚本方式</h3><h4 id="选项-1-使用脚本随机生成的-VPN-登录凭证（完成后会显示）"><a href="#选项-1-使用脚本随机生成的-VPN-登录凭证（完成后会显示）" class="headerlink" title="选项 1: 使用脚本随机生成的 VPN 登录凭证（完成后会显示）"></a>选项 1: 使用脚本随机生成的 VPN 登录凭证（完成后会显示）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://get.vpnsetup.net -O vpn.sh &amp;&amp; sudo sh vpn.sh<br></code></pre></td></tr></table></figure><h4 id="选项-2-编辑脚本并提供你自己的-VPN-登录凭证"><a href="#选项-2-编辑脚本并提供你自己的-VPN-登录凭证" class="headerlink" title="选项 2: 编辑脚本并提供你自己的 VPN 登录凭证"></a>选项 2: 编辑脚本并提供你自己的 VPN 登录凭证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://get.vpnsetup.net -O vpn.sh<br>nano -w vpn.sh<br>[替换为你自己的值： YOUR_IPSEC_PSK, YOUR_USERNAME 和 YOUR_PASSWORD]<br>sudo sh vpn.sh<br></code></pre></td></tr></table></figure><h4 id="选项-3-将你自己的-VPN-登录凭证定义为环境变量"><a href="#选项-3-将你自己的-VPN-登录凭证定义为环境变量" class="headerlink" title="选项 3: 将你自己的 VPN 登录凭证定义为环境变量"></a>选项 3: 将你自己的 VPN 登录凭证定义为环境变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">所有变量值必须用 <span class="hljs-string">&#x27;单引号&#x27;</span> 括起来</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">*不要* 在值中使用这些字符：  \ <span class="hljs-string">&quot; &#x27;</span></span><br>wget https://get.vpnsetup.net -O vpn.sh<br>sudo VPN_IPSEC_PSK=&#x27;你的IPsec预共享密钥&#x27; \<br>VPN_USER=&#x27;你的VPN用户名&#x27; \<br>VPN_PASSWORD=&#x27;你的VPN密码&#x27; \<br>sh vpn.sh<br></code></pre></td></tr></table></figure><h3 id="docker方式"><a href="#docker方式" class="headerlink" title="docker方式"></a>docker方式</h3><p>仓库地址：<a href="https://github.com/hwdsl2/docker-ipsec-vpn-server">hwdsl2/docker-ipsec-vpn-server: Docker image to run an IPsec VPN server, with IPsec/L2TP, Cisco IPsec and IKEv2 (github.com)</a></p><h4 id="创建配置文件-etc-ipsec-ipsec-env"><a href="#创建配置文件-etc-ipsec-ipsec-env" class="headerlink" title="创建配置文件/etc/ipsec/ipsec.env"></a>创建配置文件<code>/etc/ipsec/ipsec.env</code></h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">VPN_IPSEC_PSK</span>=your_ipsec_pre_shared_key<br><span class="hljs-attr">VPN_USER</span>=your_vpn_username<br><span class="hljs-attr">VPN_PASSWORD</span>=your_vpn_password<br><span class="hljs-comment">## 多用户(空格隔开)</span><br><span class="hljs-attr">VPN_ADDL_USERS</span>=xxxx1 xxxxx2<br><span class="hljs-attr">VPN_ADDL_PASSWORDS</span>=xxxx1 xxxxx2<br><span class="hljs-comment">## 默认的是谷歌的DNS</span><br><span class="hljs-attr">VPN_DNS_SRV1</span>=<span class="hljs-number">8.8</span>.<span class="hljs-number">8.8</span><br><span class="hljs-attr">VPN_DNS_SRV2</span>=<span class="hljs-number">8.8</span>.<span class="hljs-number">4.4</span><br></code></pre></td></tr></table></figure><h4 id="创建挂在卷"><a href="#创建挂在卷" class="headerlink" title="创建挂在卷"></a>创建挂在卷</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /data/ikev2-vpn-data<br></code></pre></td></tr></table></figure><h4 id="创建容器并运行"><a href="#创建容器并运行" class="headerlink" title="创建容器并运行"></a>创建容器并运行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name ipsec-vpn-server --env-file /etc/ipsec/ipsec.env --restart=always -v /data/ikev2-vpn-data:/etc/ipsec.d -p 500:500/udp -p 4500:4500/udp -d --privileged hwdsl2/ipsec-vpn-server<br></code></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="连接失败——云服务器防火墙问题"><a href="#连接失败——云服务器防火墙问题" class="headerlink" title="连接失败——云服务器防火墙问题"></a>连接失败——云服务器防火墙问题</h3><p>最少需要放行500和4500端口的UDP数据包</p><h3 id="Windows无法连接"><a href="#Windows无法连接" class="headerlink" title="Windows无法连接"></a>Windows无法连接</h3><p>控制面板设置属性——安全——允许使用这些协议</p><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/07/image-20-1024x576.png"></p><h3 id="Windows连接报错：无法建立计算机与VPN服务器之间的网络连接-因为远程服务器未响应"><a href="#Windows连接报错：无法建立计算机与VPN服务器之间的网络连接-因为远程服务器未响应" class="headerlink" title="Windows连接报错：无法建立计算机与VPN服务器之间的网络连接,因为远程服务器未响应"></a>Windows连接报错：无法建立计算机与VPN服务器之间的网络连接,因为远程服务器未响应</h3><p>管理员终端运行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">REG ADD <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\PolicyAgent&quot;</span> /v AssumeUDPEncapsulationContextOnSendRule /t REG_DWORD /d <span class="hljs-number">2</span> /f<br></code></pre></td></tr></table></figure><p>重启电脑后生效</p><h3 id="安卓IPSec登录失败"><a href="#安卓IPSec登录失败" class="headerlink" title="安卓IPSec登录失败"></a>安卓IPSec登录失败</h3><p>改用IKEv2登录，下载<a href="https://download.strongswan.org/Android/">strongswan</a>后导入后缀.sswan的配置文件</p><h2 id="个人IPSec服务器-现已失效，如有需要可访问—-gt-个人机场"><a href="#个人IPSec服务器-现已失效，如有需要可访问—-gt-个人机场" class="headerlink" title="个人IPSec服务器(现已失效，如有需要可访问—&gt;个人机场)"></a>个人IPSec服务器(现已失效，如有需要可访问—&gt;<a href="https://airport.randallanjie.uk/">个人机场</a>)</h2><p>本服务器搭建在东澳大利亚，已搭建VPN服务，提供信息如下：</p><h3 id="IPsec-VPN-server"><a href="#IPsec-VPN-server" class="headerlink" title="IPsec VPN server"></a>IPsec VPN server</h3><p>Server IP: 20.28.190.114<br>IPsec PSK: qwertyuiopasdfghjkl<br>Username: guide<br>Password: guide</p><ul><li>  如果需要个人账号请与我联系</li></ul><h3 id="IKEv2"><a href="#IKEv2" class="headerlink" title="IKEv2"></a>IKEv2</h3><p>Android配置文件：<a href="http://startpage.zhuanjie.ltd/download/vpn/vpnclient.sswan">http://startpage.zhuanjie.ltd/download/vpn/vpnclient.sswan</a></p><p>Windows &amp; Linux配置文件：<a href="http://startpage.zhuanjie.ltd/download/vpn/vpnclient.p12">http://startpage.zhuanjie.ltd/download/vpn/vpnclient.p12</a></p><p>iOS &amp; macOS配置文件：<a href="http://startpage.zhuanjie.ltd/download/vpn/vpnclient.mobileconfig">http://startpage.zhuanjie.ltd/download/vpn/vpnclient.mobileconfig</a></p><h2 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h2><p><a href="https://blog.zhuanjie.ltd/img/uploads/2022/10/wireguard-x86-0.5.3.msi">wireguard-x86-0.5.3</a><a href="https://blog.zhuanjie.ltd/img/uploads/2022/10/wireguard-x86-0.5.3.msi">下载</a></p><p><a href="https://blog.zhuanjie.ltd/img/uploads/2022/10/wireguard-amd64-0.5.3.msi">wireguard-amd64-0.5.3</a><a href="https://blog.zhuanjie.ltd/img/uploads/2022/10/wireguard-amd64-0.5.3.msi">下载</a></p><p><a href="https://blog.zhuanjie.ltd/img/uploads/2022/10/wireguard-arm64-0.5.3.msi">wireguard-arm64-0.5.3</a><a href="https://blog.zhuanjie.ltd/img/uploads/2022/10/wireguard-arm64-0.5.3.msi">下载</a></p><p><a href="https://blog.zhuanjie.ltd/img/uploads/2022/10/WireGuard.apk">WireGuard.apk</a><a href="https://blog.zhuanjie.ltd/img/uploads/2022/10/WireGuard.apk">下载</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>每日一题——翻硬币</title>
      <link href="/2022/07/14/day9/"/>
      <url>/2022/07/14/day9/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>小明正在玩一个“翻硬币”的游戏。</p><p>桌上放着排成一排的若干硬币。我们用 * 表示正面，用 o 表示反面（是小写字母，不是零）。</p><p>比如，可能情形是：**oo***oooo</p><p>如果同时翻转左边的两个硬币，则变为：oooo***oooo</p><p>现在小明的问题是：如果已知了初始状态和要达到的目标状态，每次只能同时翻转相邻的两个硬币,那么对特定的局面，最少要翻动多少次呢？<br>我们约定：把翻动相邻的两个硬币叫做一步操作。</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>两行等长的字符串，分别表示初始状态和要达到的目标状态。每行的长度&lt;1000</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>一个整数，表示最小操作步数。</p><h3 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1"></a>输入样例1</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">**********<br>o****o****<br></code></pre></td></tr></table></figure><h3 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1"></a>输出样例1</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">5<br></code></pre></td></tr></table></figure><h3 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2"></a>输入样例2</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">*o**o***o***<br>*o***o**o***<br></code></pre></td></tr></table></figure><h3 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2"></a>输出样例2</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">1<br></code></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="暴力循环解法"><a href="#暴力循环解法" class="headerlink" title="暴力循环解法"></a>暴力循环解法</h3><ul><li>  从头依次比对判断，出现不同的元素开始将其和其后的硬币翻转，直至最后一个硬币，如果不同则输入有误，如果相同则输出反转次数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Author: 转接</span><br><span class="hljs-comment"> * @Date: 2022-07-14 12:00:21</span><br><span class="hljs-comment"> * @LastEditors: 转接</span><br><span class="hljs-comment"> * @LastEditTime: 2022-07-14 14:26:08</span><br><span class="hljs-comment"> * @Description: 翻硬币</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">day9</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">每日一题——翻硬币</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">如果已知了初始状态和要达到的目标状态，每次只能同时翻转相邻的两个硬币,那么对特定的局面，最少要翻动多少次呢？</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">char</span>* a, <span class="hljs-type">int</span> i)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a[i] == <span class="hljs-string">&#x27;*&#x27;</span>)&#123;<br>        a[i] = <span class="hljs-string">&#x27;o&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i] == <span class="hljs-string">&#x27;o&#x27;</span>)&#123;<br>        a[i] = <span class="hljs-string">&#x27;*&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;出现非法字符&quot;</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">char</span> a[<span class="hljs-number">1000</span>],b[<span class="hljs-number">1000</span>];<br>    cin &gt;&gt; a &gt;&gt; b;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(a) != <span class="hljs-built_in">strlen</span>(b))&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;两字符串长度不一致！&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(a);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len<span class="hljs-number">-1</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[i] != b[i])&#123;<br>            <span class="hljs-built_in">change</span>(a, i);<br>            <span class="hljs-built_in">change</span>(a, i+<span class="hljs-number">1</span>);<br>            num++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(a[len<span class="hljs-number">-1</span>] != b[len<span class="hljs-number">-1</span>])&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;输入有误，请检查输入&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    cout &lt;&lt; num;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="利用不同元素数组下标解"><a href="#利用不同元素数组下标解" class="headerlink" title="利用不同元素数组下标解"></a>利用不同元素数组下标解</h3><ul><li>  记录下所有不同的元素的数组下标，奇数个则证明输入有误，偶数个则将每两个为一组，对于第n组，需要变换第2n个元素的下标减去2n-1个元素的下标，最后求和</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Author: 转接</span><br><span class="hljs-comment"> * @Date: 2022-07-14 12:00:21</span><br><span class="hljs-comment"> * @LastEditors: 转接</span><br><span class="hljs-comment"> * @LastEditTime: 2022-07-14 14:33:09</span><br><span class="hljs-comment"> * @Description: 翻硬币</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">day0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">每日一题——翻硬币</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">如果已知了初始状态和要达到的目标状态，每次只能同时翻转相邻的两个硬币,那么对特定的局面，最少要翻动多少次呢？</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">char</span> a[<span class="hljs-number">1000</span>],b[<span class="hljs-number">1000</span>];<br>    cin &gt;&gt; a &gt;&gt; b;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(a) != <span class="hljs-built_in">strlen</span>(b))&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;两字符串长度不一致！&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(a);<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[i] != b[i])&#123;<br>            q.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(q.<span class="hljs-built_in">size</span>() % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>)&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;输入有误，请检查输入&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;<br>        num-=q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        num+=q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    cout &lt;&lt; num;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>今日校园自动签到</title>
      <link href="/2022/07/08/jrxy-auto-sign/"/>
      <url>/2022/07/08/jrxy-auto-sign/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>此项目本意是为北京印刷学院学子提供方便，代码方面针对性的对北印信工22暑期签到进行了优化</strong></p><p>北京印刷学院服务器目前每天晚上例行维护，签到时间请自行设定到早上七点半以后</p><p>如有疑问可以在GitHub上提交issue或在本文下方评论</p><p>项目Github地址：<a href="https://github.com/Zhuanjier/jrxySign">Zhuanjier/jrxySign: 北京印刷学院今日校园自动签到 (github.com)</a></p><p>稳定版阿里云函数直接上传<a href="https://github.com/Zhuanjier/jrxySign/files/9104079/stable-code.zip">此链接</a>下载的压缩包解压后的文件夹即可</p><h2 id="近期运行日志"><a href="#近期运行日志" class="headerlink" title="近期运行日志"></a>近期运行日志</h2><p>如果乱码请更换设备查看，url直接指向文本文件</p><p><a href="https://startpage.zhuanjie.ltd/api/signlog.txt">https://startpage.zhuanjie.ltd/api/signlog.txt</a></p><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><h3 id="v1-8-8-beta"><a href="#v1-8-8-beta" class="headerlink" title="v1.8.8(beta)"></a>v1.8.8(beta)</h3><ul><li>  适配了北印信工的签到系统</li><li>  调整新增了签到选项为其他需要填写信息的情况</li></ul><h3 id="v1-8-9"><a href="#v1-8-9" class="headerlink" title="v1.8.9"></a>v1.8.9</h3><ul><li>  完善上一版本更新的稳定性</li><li>  更新了日志文档</li></ul><h3 id="v1-9-0-beta"><a href="#v1-9-0-beta" class="headerlink" title="v1.9.0(beta)"></a>v1.9.0(beta)</h3><ul><li>  新增本地保存登录信息session的<code>wise</code>模块，免于签到一次登录一次（未测试）（由于会挤掉手机端今日校园，该功能已废弃）</li></ul><h3 id="v1-9-2"><a href="#v1-9-2" class="headerlink" title="v1.9.2"></a>v1.9.2</h3><ul><li>  提高代码稳定性</li><li>  优化文档</li></ul><h3 id="v2-0-0"><a href="#v2-0-0" class="headerlink" title="v2.0.0"></a>v2.0.0</h3><ul><li>  修复部分代码上的bug</li></ul><h3 id="v2-5-0"><a href="#v2-5-0" class="headerlink" title="v2.5.0"></a>v2.5.0</h3><ul><li>  完成对新教务和日期变量的适配，配置文件中的extra可填写$Data表示当前UTC日期的前一天</li></ul><h2 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h2><ol><li>notifyOption（通知方式）<ul><li>  0为禁用</li><li>1为webApi模式<ul><li>  此方式正在调试</li></ul></li><li>2为APPRISE模式<ul><li>  此方式正在调试</li></ul></li><li>  3为企业微信</li></ul></li><li>ocrOption（腾讯云OCR服务）<ul><li>  用来防止学校教务验证码</li></ul></li><li>httpProxy（全局HTTP代理）<ul><li>  填入家用ip即可</li></ul></li><li>users（用户配置）<ol><li>user（用户1）<ol><li>type（任务类型）<ul><li>  0：收集</li><li>  1：签到</li><li>  2：查寝</li><li>  3：政工签到</li><li>  4：教师工作日志</li></ul></li><li> schoolName（学校全称）</li><li> username（教务登录账号）</li><li> password（教务登录密码）</li><li> address（签到等显示地址）</li><li> formTitle（签到等表单包含字段）</li><li>notifyOption（通知方式）<ul><li>  和顶部参数一致，不填默认按照顶部参数执行，填入不同参数即为独立配置</li><li>  rcvOption（为接受消息的账号，可以为Email账号（需要配置邮箱）、QQ号（需要配置qq机器人）、或者是企业微信ID（需要配置企业微信））</li></ul></li><li> abnormalReason（反馈信息，置空）</li><li> lon（经度）（经纬度查询网址:<a href="http://api.map.baidu.com/lbsapi/getpoint/index.html">http://api.map.baidu.com/lbsapi/getpoint/index.html</a>）</li><li> lat（纬度）</li><li> checkTitle（是否检查表单的标题）     *   1：检查     *   0：不检查</li><li>forms（表单信息）     1.  form（问题1）<pre><code class="hljs">1.  title（问题标题）2.  value（需要选择问题选项的值）    *   如果要选择选项“体温低于37.3”，则填入“体温低于37.3”3.  extra（附加结果）    *   如果选项中选择其它后需要填入信息，在此处填入信息（如果不需要可以删除此条），可以用$Date表示运行时的前一天，如“yyyy年mm月dd日”     2.  form（问题2...）*   同上一条同级配置</code></pre></li></ol></li><li>user（用户2…）<ul><li>  同上一条同级配置</li></ul></li></ol></li></ol><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="部署前准备"><a href="#部署前准备" class="headerlink" title="部署前准备"></a>部署前准备</h3><p>下载config.yam并且填写内容，必填内容如下：</p><ul><li>  username: ‘’ —学号</li><li>  password: ‘’ —密码（登录学校教务的密码）</li><li>  address: ‘’ —地址（今日校园签到页面上面的地址信息）</li><li>  lon: —经度 经纬度查询网址:<a href="http://api.map.baidu.com/lbsapi/getpoint/index.html">http://api.map.baidu.com/lbsapi/getpoint/index.html</a></li><li>  lat: —纬度 </li></ul><h3 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h3><ul><li>  安装Python3.6+环境</li><li>  下载并解压项目代码包</li><li>  修改<code>config.yml</code>文件中的相关配置内容</li><li>  运行<code>pip install -r requirements.txt -t ./ -i https://mirrors.aliyun.com/pypi/simple</code>安装项目依赖</li><li>  执行<code>Python index.py</code>即可运行项目</li></ul><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/07/image-4.png"></p><p>pycharm测试运行结果</p><h3 id="阿里云函数"><a href="#阿里云函数" class="headerlink" title="阿里云函数"></a>阿里云函数</h3><ul><li>  <a href="https://github.com/Zhuanjier/jrxySign/archive/refs/heads/main.zip">下载</a>并解压项目代码包（或者通过git获取包<a href="https://github.com/Zhuanjier/jrxySign.git%EF%BC%89">https://github.com/Zhuanjier/jrxySign.git）</a></li></ul><p>登录阿里云进入<a href="https://help.aliyun.com/document_detail/122602.html">服务及</a><a href="https://fcnext.console.aliyun.com/cn-hangzhou/services">函数</a>页面，开通服务</p><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/07/image-8-1024x644.png"></p><ul><li>  创建服务</li></ul><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/07/image-9.png"></p><ul><li>  创建云函数并且修改配置</li></ul><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/07/image-10-1024x537.png"></p><ul><li>  设置触发器</li></ul><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/07/image-11-1024x421.png"></p><ul><li>  打开函数详情</li></ul><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/07/image-12-1024x399.png"></p><ul><li>  在下方终端中运行如下代码段（<strong>末尾有英文的句点，下文同理</strong>）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip3 install -r requirements.txt -t .<br></code></pre></td></tr></table></figure><ul><li>  运行完成后部署测试</li><li>  如果出现错误，根据提示查看相应信息</li><li>此处列举几条遇到的问题：<ul><li>  出现No module named ‘yaml’错误时，终端运行 <code>pip install pyyaml -t .</code> 解决</li><li>  出现No module named ‘tencentcloud’错误时，终端运行 <code>pip install --upgrade tencentcloud-sdk-python -t .</code> 解决</li><li>  阿里云运行函数需要修改action文件下的Utils.py文件的136行，其中文件地址由<code>signlog.txt</code>改为<code>/tmp/signlog.txt</code> 解决（原因：阿里云未开放除/tmp以外文件的写入权限）</li><li>  同上一条action文件下的Utils.py文件的末尾两个函数（saveWise函数和getWise函数）也需要修改地址</li></ul></li></ul><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/07/image-13.png"></p><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/07/image-14.png"></p><ul><li>  执行部署代码，然后运行测试</li><li>  查看日志</li></ul><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/07/image-19.png"></p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul><li>  如果输出418错误如图则将config.yml中的httpProxy填写为你当前查询到的自己的<a href="https://ipaddress.com/">ip（点击此处查询自己的ip）</a></li></ul><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/07/image-18.png"></p><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/07/image-17-1024x636.png"></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h3><p>本项目的源代码在MPL2.0协议下发布，同时附加以下条目：</p><ul><li>  <strong>非商业性使用</strong> — 不得将此项目及其衍生的项目的源代码和二进制产品用于任何商业和盈利用途</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux下将长期运行命令变为系统服务</title>
      <link href="/2022/06/13/linux-systemctl/"/>
      <url>/2022/06/13/linux-systemctl/</url>
      
        <content type="html"><![CDATA[<p>在/lib/systemd/system/中新建“服务名.service”文件。</p><p>vim /lib/systemd/system/服务名.service 内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Desctiption</span> = 服务名称<br><span class="hljs-attr">After</span> = network.target syslog.target<br><span class="hljs-attr">Wants</span> = network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Type</span> = simple<br><span class="hljs-attr">ExecStart</span> = “命令”<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span> = multi-user.target<br></code></pre></td></tr></table></figure><p><strong>启动服务</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start 服务名.service<br></code></pre></td></tr></table></figure><p><strong>查看状态</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl status 服务名.service<br></code></pre></td></tr></table></figure><p><strong>设置开机自启</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl enable 服务名.service<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>编译原理实验4</title>
      <link href="/2022/06/11/byyl4/"/>
      <url>/2022/06/11/byyl4/</url>
      
        <content type="html"><![CDATA[<p>编译器设计与实现</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a><strong>实验内容</strong></h2><p>定义一个程序设计语言，确定编译器设计方法，构造相应的属性文法。根据属性文法设计编译器（可以手工设计亦可自动生成），并设计中间代码解释器，其能够解释执行编译后的中间代码。</p><p>要求输入一个合法的源程序，输出其中间代码形式的目标程序并能够解释执行生成的目标代码，并得到预期人结果。</p><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a><strong>实验目的</strong></h2><p>通过实验完整地了解编译器设计过程，掌握编译原理中各种算法及算法的应用。</p><h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a><strong>实验准备</strong></h2><h3 id="程序设计语言的文法定义"><a href="#程序设计语言的文法定义" class="headerlink" title="程序设计语言的文法定义"></a>程序设计语言的文法定义</h3><p>可以定义PL/1语言的文法，亦可根据C语言定义一个简单的C语言文法。</p><p><strong>lexical 词法分析</strong>：token类型token_type、分隔符号split_char_type、注释note_char_type、正则表达式字典regex_dict</p><p><strong>syntax 语法分析</strong>：Sign类为符号类。Production类为产生式。</p><p><strong>semantic 语义分析</strong>：定义一个符号表池，每次调用函数的时候使用深拷贝从这里取局部变量表。SemanticRule类别为语义规则。SemanticRuleFactory类为语义规则工厂，根据给出的 rule_key 返回相应的实例。</p><h3 id="确定编译器设计方法，构造相应的属性文法"><a href="#确定编译器设计方法，构造相应的属性文法" class="headerlink" title="确定编译器设计方法，构造相应的属性文法"></a>确定编译器设计方法，构造相应的属性文法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">put_source</span>(<span class="hljs-params">self, source</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        装填词法分析结果</span><br><span class="hljs-string">        :param source: 词法分析结果</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.__source.clear()<br>        self.__terminals.clear()<br>        <span class="hljs-comment"># 装填词法分析结果</span><br>        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> source:<br>            self.__source.append(s)<br>        <span class="hljs-comment"># 将 tokens 转换成终结符</span><br>        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> self.__source:<br>            self.__terminals.append(Sign(s.<span class="hljs-built_in">type</span>, s.<span class="hljs-built_in">str</span>, s.line))<br>        <span class="hljs-comment"># 在所有 tokens 的最后填入一个 #</span><br>        self.__terminals.append(Sign(<span class="hljs-string">&#x27;pound&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><h3 id="实验源码"><a href="#实验源码" class="headerlink" title="实验源码"></a>实验源码</h3><p><a href="http://gitlab.zhuanjie.ltd/Randall/byyl4">Randall Chu / 编译原理实验4 · GitLab (zhuanjie.ltd)</a></p><h3 id="输出代码"><a href="#输出代码" class="headerlink" title="输出代码"></a>输出代码</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (v == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> u;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">gcd</span><span class="hljs-params">(v, u-u/v*v)</span></span>;<br>    &#125;<br>    <span class="hljs-comment">/* u-u/v*v* == u mod v */</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x;<br>    <span class="hljs-keyword">int</span> y;<br>    x = input();<br>    y = input();<br>    output(gcd(x, y));<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实验截图"><a href="#实验截图" class="headerlink" title="实验截图"></a>实验截图</h3><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/06/1.png"></p><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/06/2.png"></p><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/06/3.png"></p><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>通过这次编译器设计，我完整地了解编译器设计过程，掌握编译原理中各种算法及算法的应用。首先是词法分析识别Token序列，syntax 语法分析和semantic 语义分析。词法分析使用正则表达式，语法分析使用LL(1)文法分析器， 语义分析使用自上而下翻译，使用 Python 语言编写。main.py 编译器主程序；error.py 存放错误相关的类和代码；test.c 要编译的文件。三大分析中 rule.py 即是支持编译器的所有文法、词法、语义规则。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>编译原理实验3</title>
      <link href="/2022/06/02/byyl3/"/>
      <url>/2022/06/02/byyl3/</url>
      
        <content type="html"><![CDATA[<p>语义分析常用算法的实现及应用实验<br>以某种方式输入一个上下文无关文法，构造其LL分析表、算符优先分析表及LR分析表，并能够差别一个字符串是否是给定文法中的句子</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a><strong>实验内容</strong></h2><p>以某种方式输入一个上下文无关文法，构造其LL分析表、算符优先分析表及LR分析表，并能够差别一个字符串是否是给定文法中的句子</p><p>在实验一或实验二的基础上，建立一个表达式的文法，并生成该表达式的计算程序。</p><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a><strong>实验目的</strong></h2><p>1、进一步理解文法特别是上下文无关文法相关概念</p><p>2、掌握求First集、Follow集、FirstVt集及LastVt集算法，并能够应用其构造文法的LL分析表、算符优先分析表及LR分析表</p><p>3、通过分析LL(1)文法、算符优先文法及LR(1)文法进一步理解自动编程方法</p><h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a><strong>实验准备</strong></h2><h3 id="文法的输入"><a href="#文法的输入" class="headerlink" title="文法的输入"></a><strong>文法的输入</strong></h3><p>在一个文框中输入文法规则，每个规则占一行，文法规则以如下形式输入：左部符号::=文法规则右部符号串</p><p>第一条规则的左部符号即为文法的开始符号。一个（左部符号或右部符号）符号使用一个字符串表示，如果有两个形如“A::=α和A::=β”的规则，则可以合并成“A::=α｜β”。</p><h3 id="左部符号与右部符号的确定"><a href="#左部符号与右部符号的确定" class="headerlink" title="左部符号与右部符号的确定"></a><strong>左部符号与右部符号的确定</strong></h3><p>左部符号的确定：位于每个规则左部即为左部符号。</p><p>右部符号的确定：将每个右部符号串使用左部符号之符号串将其分隔成字符串序列，则不是左部符号之符号串即为右部符号或右部符号串组成的字符串。分隔的原则是“长度优先”，即一个长左部符号串不得再分隔成字符串序列，一个字符串优先使用较长的左部符号之符号串分隔。</p><h3 id="文法的存储表示"><a href="#文法的存储表示" class="headerlink" title="文法的存储表示"></a><strong>文法的存储表示</strong></h3><p>关键记数：左部符号个数nVn，右部符号个数nVt，规则个数nRule</p><p>符号表：使用一个字符串数组存储左部及右部符号，左部符号字符串在前，右部字符串在后。每个符号使用其在符号表中的下标表示，当下标是nVn+nVt时，符号是空符号（ε），当下标是nVn+nVt+1时，符号是结束符号（#）。</p><p>规则列表：使用一个规则数组存储规则列表，一条规则由左部符号（使用其在符号表中下标表示）及左部符号序列（即符号之下标序列）表示。</p><h3 id="基本操作算法描述"><a href="#基本操作算法描述" class="headerlink" title="基本操作算法描述"></a><strong>基本操作算法描述</strong></h3><h4 id="求First集算法"><a href="#求First集算法" class="headerlink" title="求First集算法"></a><strong>求First集算法</strong></h4><p>先初始化非终结符的First集为空，初始化终结符的First集合为自己；开始循环，当First集没有更新就结束循环。循环内：新建一个标记flag初始化为False，遍历所有非终结符，每次遍历非终结符时遍历所有产生式。新建一个标记mark初始化为True，当mark为True并且遍历到产生式的末尾就结束。如果还存在没有添加的即First[Yi]中没有ε，则将First[Yi]添加到First[X]中，同时将标记mark更新为False。如果是第一个符号，则将First[Yi]中的非ε添加到First[X]中，同时flag标记更新为True。如果Yi不能推出ε就标记为False；如果所有的Yi都推出ε则将ε添加到First[X]中。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">def</span> <span class="hljs-variable">getFirst</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-built_in">None</span><span class="hljs-operator">:</span><br>    <span class="hljs-variable">global</span> <span class="hljs-type">non_term</span><span class="hljs-operator">,</span> <span class="hljs-variable">term</span><span class="hljs-operator">,</span> <span class="hljs-built_in">First</span><br>    <span class="hljs-type">#</span> 初始化非终结符的<span class="hljs-built_in">First</span>集为空<br>    <span class="hljs-variable">for</span> <span class="hljs-variable">it</span> <span class="hljs-variable">in</span> <span class="hljs-type">non_term</span><span class="hljs-operator">:</span> <span class="hljs-built_in">First</span><span class="hljs-punctuation">[</span><span class="hljs-variable">it</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">=</span> <span class="hljs-variable">set</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-type">#</span> 初始化终结符的<span class="hljs-built_in">First</span>集合为自己<br>    <span class="hljs-variable">for</span> <span class="hljs-variable">it</span> <span class="hljs-variable">in</span> <span class="hljs-variable">term</span><span class="hljs-operator">:</span><br>        <span class="hljs-built_in">First</span><span class="hljs-punctuation">[</span><span class="hljs-variable">it</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">=</span> <span class="hljs-variable">set</span><span class="hljs-punctuation">(</span><span class="hljs-variable">it</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">True</span><br>    <span class="hljs-variable">while</span> <span class="hljs-variable">flag</span><span class="hljs-operator">:</span>  <span class="hljs-type">#</span> 当<span class="hljs-built_in">First</span>集没有更新就结束<br>        <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">False</span>  <span class="hljs-type">#</span> 新建一个标记<span class="hljs-variable">flag</span>初始化为<span class="hljs-built_in">False</span><br>        <span class="hljs-variable">for</span> <span class="hljs-variable">X</span> <span class="hljs-variable">in</span> <span class="hljs-type">non_term</span><span class="hljs-operator">:</span>  <span class="hljs-type">#</span> 遍历所有非终结符<br>            <span class="hljs-variable">for</span> <span class="hljs-variable">Y</span> <span class="hljs-variable">in</span> <span class="hljs-variable">production</span><span class="hljs-punctuation">[</span><span class="hljs-variable">X</span><span class="hljs-punctuation">]</span><span class="hljs-operator">:</span>  <span class="hljs-type">#</span> 遍历所有产生式<br>                <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>                <span class="hljs-variable">mark</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">True</span>  <span class="hljs-type">#</span> 新建一个标记<span class="hljs-variable">mark</span>初始化为<span class="hljs-built_in">True</span><br>                <span class="hljs-variable">while</span> <span class="hljs-variable">mark</span> <span class="hljs-variable">and</span> <span class="hljs-variable">i</span> <span class="hljs-operator">&lt;</span> <span class="hljs-variable">len</span><span class="hljs-punctuation">(</span><span class="hljs-variable">Y</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span>  <span class="hljs-type">#</span> 当<span class="hljs-variable">mark</span>为<span class="hljs-built_in">True</span>并且遍历到产生式的末尾就结束<br>                    <span class="hljs-variable">if</span> <span class="hljs-variable">not</span> <span class="hljs-built_in">First</span><span class="hljs-punctuation">[</span><span class="hljs-variable">Y</span><span class="hljs-punctuation">[</span><span class="hljs-variable">i</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">-</span> <span class="hljs-variable">set</span><span class="hljs-punctuation">(</span><span class="hljs-variable">epsilon</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;=</span> <span class="hljs-built_in">First</span><span class="hljs-punctuation">[</span><span class="hljs-variable">X</span><span class="hljs-punctuation">]</span><span class="hljs-operator">:</span>  <span class="hljs-type">#</span> 还存在没有添加的<br>                        <span class="hljs-type">#</span> <span class="hljs-variable">print</span><span class="hljs-punctuation">(</span><span class="hljs-operator">&#x27;</span><span class="hljs-built_in">First</span><span class="hljs-punctuation">[</span><span class="hljs-operator">&#x27;</span> <span class="hljs-operator">,</span> <span class="hljs-variable">X</span><span class="hljs-operator">,</span> <span class="hljs-operator">&#x27;</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">=</span> <span class="hljs-operator">&#x27;,</span> <span class="hljs-string">&quot;   &quot;</span><span class="hljs-operator">,</span> <span class="hljs-built_in">First</span><span class="hljs-punctuation">[</span><span class="hljs-variable">X</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-operator">&#x27;</span><span class="hljs-built_in">First</span><span class="hljs-punctuation">[</span><span class="hljs-operator">&#x27;,</span> <span class="hljs-variable">Y</span><span class="hljs-punctuation">[</span><span class="hljs-variable">i</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">,</span> <span class="hljs-operator">&#x27;</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">=</span> <span class="hljs-operator">&#x27;</span> <span class="hljs-operator">,</span> <span class="hljs-built_in">First</span><span class="hljs-punctuation">[</span><span class="hljs-variable">Y</span><span class="hljs-punctuation">[</span><span class="hljs-variable">i</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br>                        <span class="hljs-type">#</span> <span class="hljs-built_in">First</span><span class="hljs-punctuation">[</span><span class="hljs-variable">Yi</span><span class="hljs-punctuation">]</span> 中没有 ε<br>                        <span class="hljs-variable">if</span> <span class="hljs-variable">epsilon</span> <span class="hljs-variable">not</span> <span class="hljs-variable">in</span> <span class="hljs-built_in">First</span><span class="hljs-punctuation">[</span><span class="hljs-variable">Y</span><span class="hljs-punctuation">[</span><span class="hljs-variable">i</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-variable">and</span> <span class="hljs-variable">Y</span><span class="hljs-punctuation">[</span><span class="hljs-variable">i</span><span class="hljs-punctuation">]</span> <span class="hljs-variable">in</span> <span class="hljs-type">non_term</span> <span class="hljs-variable">and</span> <span class="hljs-variable">i</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span><span class="hljs-operator">:</span>  <span class="hljs-type">#</span> 如果不是第一个符号<br>                            <span class="hljs-built_in">First</span><span class="hljs-punctuation">[</span><span class="hljs-variable">X</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">First</span><span class="hljs-punctuation">[</span><span class="hljs-variable">Y</span><span class="hljs-punctuation">[</span><span class="hljs-variable">i</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span>  <span class="hljs-type">#</span> 将 <span class="hljs-built_in">First</span><span class="hljs-punctuation">[</span><span class="hljs-variable">Yi</span><span class="hljs-punctuation">]</span> 添加到 <span class="hljs-built_in">First</span><span class="hljs-punctuation">[</span><span class="hljs-variable">X</span><span class="hljs-punctuation">]</span> 中<br>                            <span class="hljs-variable">mark</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">False</span>  <span class="hljs-type">#</span> 标记更新为<span class="hljs-built_in">False</span><br>                        <span class="hljs-variable">else</span><span class="hljs-operator">:</span>  <span class="hljs-type">#</span> 如果是第一个符号<br>                            <span class="hljs-built_in">First</span><span class="hljs-punctuation">[</span><span class="hljs-variable">X</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">First</span><span class="hljs-punctuation">[</span><span class="hljs-variable">Y</span><span class="hljs-punctuation">[</span><span class="hljs-variable">i</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">-</span> <span class="hljs-variable">set</span><span class="hljs-punctuation">(</span><span class="hljs-variable">epsilon</span><span class="hljs-punctuation">)</span>  <span class="hljs-type">#</span> 将 <span class="hljs-built_in">First</span><span class="hljs-punctuation">[</span><span class="hljs-variable">Yi</span><span class="hljs-punctuation">]</span> 中的非 ε 添加到 <span class="hljs-built_in">First</span><span class="hljs-punctuation">[</span><span class="hljs-variable">X</span><span class="hljs-punctuation">]</span> 中<br>                            <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">True</span>  <span class="hljs-type">#</span> <span class="hljs-variable">flag</span>标记更新为<span class="hljs-built_in">True</span><br>                    <span class="hljs-variable">if</span> <span class="hljs-variable">epsilon</span> <span class="hljs-variable">not</span> <span class="hljs-variable">in</span> <span class="hljs-built_in">First</span><span class="hljs-punctuation">[</span><span class="hljs-variable">Y</span><span class="hljs-punctuation">[</span><span class="hljs-variable">i</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-operator">:</span>  <span class="hljs-type">#</span> 如果 <span class="hljs-variable">Yi</span> 不能推出 ε 就标记为 <span class="hljs-built_in">False</span><br>                        <span class="hljs-variable">mark</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">False</span>  <span class="hljs-type">#</span> <span class="hljs-variable">mark</span>标记更新为<span class="hljs-built_in">False</span><br>                    <span class="hljs-variable">i</span> <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                <span class="hljs-variable">if</span> <span class="hljs-variable">mark</span><span class="hljs-operator">:</span>  <span class="hljs-type">#</span> 如果所有的 <span class="hljs-variable">Yi</span> 都推出 ε<br>                    <span class="hljs-built_in">First</span><span class="hljs-punctuation">[</span><span class="hljs-variable">X</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">=</span> <span class="hljs-variable">set</span><span class="hljs-punctuation">(</span><span class="hljs-variable">epsilon</span><span class="hljs-punctuation">)</span>  <span class="hljs-type">#</span> 将 ε 添加到 <span class="hljs-built_in">First</span><span class="hljs-punctuation">[</span><span class="hljs-variable">X</span><span class="hljs-punctuation">]</span> 中<br><span class="hljs-variable">return</span> <span class="hljs-built_in">None</span><br></code></pre></td></tr></table></figure><h4 id="求Follow集算法"><a href="#求Follow集算法" class="headerlink" title="求Follow集算法"></a><strong>求Follow集算法</strong></h4><p>初始化后将 # 号加入到Follow[s] 中，新建一个标记flag初始化为True。开始循环，当Follow集不再更新，算法结束。循环内：标记flag初为False，遍历所有非终结符。每次遍历非终结符时遍历所有产生式，扫描产生式时遍历所有产生式的每一个符号。bi 是终结符则跳过，否则新建一个标记mark初始化为True，遍历所有产生式的每一个符号。如果可以更新则将 First[Bj] 中的非 ε 添加到 Follow[Bi] 中，设置标记flag为True。如果 Bj 不能推出 ε 就标记为 False，设置mark标记为False。判断mark，如果为True，那么A-&gt;αBβ and β-&gt;ε。如果可以更新，将 Follow[A] 添加到 Follow[B] 中，设置flag为True。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs clean">def getFollow() -&gt; None:<br>    global non_term, term, First, Follow, start_sym<br>    for A <span class="hljs-keyword">in</span> non_term:<br>        Follow[A] = set()  # 初始化<br>    Follow[start_sym].add(end_sym)  # 将 # 号加入到Follow[s] 中<br>    flag = <span class="hljs-literal">True</span>  # 新建一个标记flag初始化为<span class="hljs-literal">True</span><br>    while flag:  # 当Follow集不再更新，算法结束<br>        flag = <span class="hljs-literal">False</span>  # 标记flag初为<span class="hljs-literal">False</span><br>        for A <span class="hljs-keyword">in</span> non_term:  # 遍历所有非终结符<br>            for B <span class="hljs-keyword">in</span> production[A]:  # 遍历所有产生式<br>                for i <span class="hljs-keyword">in</span> range(len(B)):  # 遍历所有产生式的每一个符号<br>                    # bi 是终结符则跳过<br>                    <span class="hljs-keyword">if</span> B[i] <span class="hljs-keyword">in</span> term:<br>                        continue<br>                    mark = <span class="hljs-literal">True</span>  # 新建一个标记mark初始化为<span class="hljs-literal">True</span><br>                    for j <span class="hljs-keyword">in</span> range(i + <span class="hljs-number">1</span>, len(B)):  # 遍历所有产生式的每一个符号<br>                        <span class="hljs-keyword">if</span> not First[B[j]] - set(epsilon) &lt;= Follow[B[i]]:  # 可以更新<br>                            Follow[B[i]] = First[B[j]] - set(epsilon)  # 将 First[Bj] 中的非 ε 添加到 Follow[Bi] 中<br>                            flag = <span class="hljs-literal">True</span>  # 发生了改变<br>                        <span class="hljs-keyword">if</span> epsilon not <span class="hljs-keyword">in</span> First[B[j]]:  # 如果 Bj 不能推出 ε 就标记为 <span class="hljs-literal">False</span><br>                            mark = <span class="hljs-literal">False</span>  # 设置mark标记为<span class="hljs-literal">False</span><br>                        break<br>                    <span class="hljs-keyword">if</span> mark:  # A-&gt;αBβ and β-&gt;ε<br>                        <span class="hljs-keyword">if</span> not Follow[A] &lt;= Follow[B[i]]:  # 可以更新<br>                            Follow[B[i]] = Follow[A]  # 将 Follow[A] 添加到 Follow[B] 中<br>                            flag = <span class="hljs-literal">True</span>  # 发生了改变<br>    return None<br></code></pre></td></tr></table></figure><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><p>1. 编写代码</p><p><a href="http://gitlab.zhuanjie.ltd/Randall/byyl3">Randall Chu / 编译原理实验3 · GitLab (zhuanjie.ltd)</a></p><p>2. 测试文法</p><p>LL1文法</p><p>E-&gt;TA<br>A-&gt;+TAε<br>T-&gt;FB<br>B-&gt;*FBε<br>F-&gt;i(E)</p><p>非LL1文法</p><p>S-&gt;AB<br>S-&gt;bC<br>A-&gt;ε<br>A-&gt;b<br>B-&gt;ε<br>B-&gt;aD<br>C-&gt;AD<br>C-&gt;b<br>D-&gt;aS<br>D-&gt;c</p><p>3. 测试运行(实验环境Windows11 Python3.10 pycharm)，如图：</p><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/06/image-8.png"></p><p>4. 输出信息</p><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/06/image-9.png"></p><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/06/image-11.png"></p><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/06/image-12.png"></p><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>通过本次实验我进一步理解了文法特别是上下文无关文法相关概念，掌握了求First集、Follow集、FirstVt集及LastVt集算法，并能够应用其构造文法的LL分析表、算符优先分析表及LR分析表。我也通过分析LL(1)文法、算符优先文法及LR(1)文法进一步理解了自动编程方法。刚刚写完分析符号串逻辑思路代码，这个心情是无比激动的，但是又有诸多的bug，内心是无比崩溃的，然后经过一行一行的修改，慢慢的调终于弄好了。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>编译原理实验2</title>
      <link href="/2022/06/02/byyl2/"/>
      <url>/2022/06/02/byyl2/</url>
      
        <content type="html"><![CDATA[<h2 id="实验内容："><a href="#实验内容：" class="headerlink" title="实验内容："></a><strong>实验内容：</strong></h2><p>输入一组正则表达式，输出其转换后的最简的确定有限自动机，并根据生成的确定有限自动机完成实验一的任务。（即完成词法分析任务）</p><p>输入一转换图，生成与之等价的正则表达式（未完成）</p><h2 id="实验准备："><a href="#实验准备：" class="headerlink" title="实验准备："></a><strong>实验准备：</strong></h2><p>正则表达式的语义定义：符号表Σ上的正则表达式α定义一个Σ上的一个符号串的集合，记为L(α)，其定义如下：</p><p>R::=R1R2       {L(R)=L(R1)∪L(R2)}</p><p>R::=R1R2        {L(R)=L(R1)L(R2)}</p><p>R::=R1*          {L(R)=</p><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/06/image-2.png"></p><p>}</p><p>R::=(R1)          {L(R)=L(R1)     }</p><p>R::=a              {a∈Σ,且 L(R)={a} }</p><p>R::=ε      {ε不是Σ中的元素，L(R)={} }</p><p>转换图的定义：符号表Σ上转移T是一个带有权值的有向图T=(V,A),这是V是有向图T的顶点集合，其中的元素称之为状态，因此V亦称状态集，A是弧的集合，弧带有一个权α，其是Σ上的一个正则表达式。其满足如下条件：</p><ol><li> 存在唯一一个状态S0称为开始状态，其无引入弧</li><li> 存在唯一一个状态S1称为终止状态，其无引出弧</li></ol><p>转换图定义的语言记为L(T)，其是Σ上的一个符号串的集合，Σ上的符号串α∈L(T)当且仅当存在一个由开始状态S0到终止状态S1的路径V0α1V1α2……Vn-1αnVn。</p><p>其中V0=S0，Vn=S1，（Vi-1,Vi, αi） (i=1,2,……,n)是T上的弧，且α∈L(α1)……L(αn)。</p><p>如果A中每个弧上的正则表达式是Σ上的一个符号或ε（无任何符号），则转换图称之为不确定的有限自动机。</p><p>如果A中每个弧上的正则表达式只能是Σ上的符号且任两个弧（V1,V2,α1）、（V’1,V’2,α’1），如果V1=V’1，则V2&lt;&gt;V’2。</p><h2 id="基本算法："><a href="#基本算法：" class="headerlink" title="基本算法："></a><strong>基本算法：</strong></h2><p>将正则表达式转换成不确定的有限自动机：</p><p>对于一个正则表达式α，构造一个转移图，由开始状态S0引出一个到终止状态S1的弧，（S0,S1, α）。</p><p>如果有多个正则表达式α1，……，αn，先为每个αi(1&lt;=i&lt;=n)构造一个转换图Ti。建立一个新的转换图T，构造如下：添加一个Sb状态，为Ｔ的开始状态，对每个αi对应的转换图Ti的开始状态Si，添加弧(Sb,Si,ε)。添加一个新状态Se，为T的终止状态，对每个αi对应转换图Ti的终止状态S’i，添加弧（S’i,Sb,ε）。</p><p>重复如下操作，直到无状态转换图T无变化</p><p>对T中的每个弧(S1,S2,α)，将α分解成两个正则表达式α1与α2由运算OP组成，即α=α1　OP　α2。根据OP做如下操作：</p><p>OP是链接运算且α1与α2皆非ε(即不为空串)，则于T中删除弧(S1,S2,α),于T中添加一个状态S，并将弧(S1,S,α1)与(S,S2,α2)添加到T中；</p><p>OP是链接运算且α1=(α’)，α2=ε，则于T中删除弧(S1,S2,α)，添加弧(S1,S2,α’)到T中；</p><p>OP是或运算，则于T中删除弧(S1,S2,α)，将弧(S1,S2,α1)与弧(S1,S2,α)添加到T中；</p><p>OP是闭包运算，且α2=ε，则于T中删除弧(S1,S2,α)，于T中添加一个新状态S，并将弧(S1,S,ε)、(S,S,α1)及(S,S2,ε)添加到T中。</p><p>将不确定有限自动机确定化：不确定有限自动机记为NFA，则按照如下操作构造一个确定有限自动机DFA其与NFA等价。</p><p>构造NFA中的状态集组成的集合Ｆ，初始时Ｆ为空；</p><p>将NFA状态集closure({S0})添加到Ｆ中（S0是NFA的开始状态）；</p><p>重复如下操作，直到Ｆ中无新元素增加止</p><p>对Ｆ中任一元素Ｓ(NFA的状态集)，对符号表Σ中的每个符号a，将closure(Ｓa)添加到Ｆ中。有关Ｓa定义如下：</p><p>Ｓa={s 于Ｓ中存在一个状态s’，使得（s’, s, a）是NFA中的一个弧}</p><p>定义转移图T如下：则以Ｆ中元素为状态，对Ｆ中每个元素Ｓ，则有弧(Ｓ，Ｓa, a)。如果Ｆ中的元素Ｓ（NFA的状态集）中含有NFA的终止状态，则其Ｓ是T的终止状态。T的开始状态是closure({S0})。</p><p>确定有限自动机的化简操作：</p><p>将DFA化简为最简单的sDFA操作如下：</p><p>建立DFA状态集的一个分划：π，初始时π中仅有两个集合，一个是由DFA中状态组成的集合，另一个不是终止状态组成的集合。</p><p>重复如下操作</p><p>对符号表Σ上的每一个符号a做如下操作</p><p>建立一个空分划π0（即π0是一个空的状态集合之集合）</p><p>对π中的每个集合Ｓ0</p><p>对π中的第i个集合Ｓi</p><p>令Ｓ0,i,a={s∈Ｓ0　 存在弧(s,s1,a)，这里s1∈Ｓi}</p><p>If(Ｓ0,i,a非空)将Ｓ0,i,a添加到π0中</p><p>将π0记之为π</p><h2 id="自动生成词法分析程序："><a href="#自动生成词法分析程序：" class="headerlink" title="自动生成词法分析程序："></a><strong>自动生成词法分析程序：</strong></h2><p>类Disjoint:并查集, 用于计算等价关系；</p><p>类Automata:有穷自动机：</p><ol><li> 有穷状态集(对应有向图中的节点)</li><li> 输入字母表(状态转移边的标注)</li><li> 状态转移规则(对应有向图中的边)</li><li> 初始状态</li><li> 终止状态集</li></ol><p>检查转移图的合法性:</p><ol><li> 起始状态必须在状态集中</li><li> 终止状态必须在状态集中</li></ol><p>检验是否为确定的有穷自动机(DFA) 标准:</p><ol><li> 不能有 epsilon 作为输入的字母</li><li> 存在某状态对于某字母有多种后继状态</li></ol><h2 id="实验过程："><a href="#实验过程：" class="headerlink" title="实验过程："></a><strong>实验过程：</strong></h2><ol><li> 编写代码</li></ol><p>源码：<a href="http://gitlab.zhuanjie.ltd/Randall/byyl2">Randall Chu / 编译原理实验2 · GitLab (zhuanjie.ltd)</a></p><ol><li> 测试运行(实验环境Windows11 Python3.10 pycharm)，如图：</li></ol><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/06/image-3.png"></p><ol><li> 输出信息：</li></ol><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/06/image-4.png"></p><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/06/image-5.png"></p><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/06/image-6.png"></p><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/06/image-7.png"></p><p><strong>实验总结：</strong></p><p>通过本次实验我学会了从正则表达式转NFA(不确定的有穷自动机)、NFA转DFA(确定的有穷自动机)和DFA的最小化。同时我也尝试输出了自动机的转移矩阵和输出自动机的状态转移图。输出自动机的状态转移图使用的是图形可视化软件Graphviz的使用，他能够将将结构信息表示为抽象图形和网络图。在编程过程中程序抛出了ExecutableNotFound的异常信息，经过检查发现为未将Graphviz的安装地址置于系统的环境变量中。状态图中：以圆圈表示状态（圆圈内为状态名），箭头表示状态转移边。以start标记引出箭头指向起始状态，以双圈表示终止状态。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>编译原理实验1</title>
      <link href="/2022/06/02/byyl1/"/>
      <url>/2022/06/02/byyl1/</url>
      
        <content type="html"><![CDATA[<h2 id="实验内容与要求"><a href="#实验内容与要求" class="headerlink" title="实验内容与要求"></a>实验内容与要求</h2><p>设计一种程序设计语言并定义其词法，输入使用该程序语言编写的源程序，输出经过词法分析生成的符号表及将源程序的字节流转换成单词的单词流。</p><p>创建一个词法分析程序，它支持对正规文法的分析。必须使用DFA（确定性有限自动机）或NFA（非确定性有限自动机）来实现这一项目。该程序的输入是一个文本文件，包括一组由该正规文法产生的产生式以及待识别源代码字符串。该程序的输出是一个符号表（二元式），它由5种类型符号：关键词，识别符，常量，界符和操作符。</p><h2 id="实验目的："><a href="#实验目的：" class="headerlink" title="实验目的："></a>实验目的：</h2><p>通过实验理解文法及文法在编写词法分析中的应用、理解符号表及掌握符号管理技术。</p><h2 id="实验准备："><a href="#实验准备：" class="headerlink" title="实验准备："></a>实验准备：</h2><h3 id="程序设计语言："><a href="#程序设计语言：" class="headerlink" title="程序设计语言："></a>程序设计语言：</h3><p>程序设计语言为PL0语言，其特点是数据类型只有整数类型，具有三种程序结构（顺序、分支及循环），有过程定义，但过程无参数，允许分程序嵌套定义。具有常量定义、变量定义等。PL0语言的单词分类：分隔符、运算符、常数、标识符及保留字，具体如下</p><ol><li> <strong>分隔符</strong>：.(圆点)、,(逗号)、;(分号)、((左圆括号)、)(右圆括号)、=(等号)及:=(赋值号)；</li><li> <strong>运算符</strong>：分为算术运算符和关系运算符；</li><li> <strong>算术运算符</strong>：+(加)、-(减)、*(乘)、/(除)及+(取正)、-(取负)；</li><li> <strong>关系运算符</strong>：=(等于)、#(不等)、&lt;(小于)、&lt;=(小于等于)、&gt;(大于)、&gt;=(大于等于)及odd(是否为偶数)；</li><li> <strong>常数</strong>：由0到9组成的整形常数；</li><li> <strong>标识符</strong>：由字母开始由字母及数字组成的符号串；</li><li> <strong>保留字</strong>：保留字不分大小写，有如下这些：begin、call、const、do、end、if、odd、procedure、read、then、var、while、write、else、BEGIN、CALL、CONST、DO、END、IF、ODD、PROCEDURE、READ、THEN、VAR、WHILE、WHILE、ELSE；</li></ol><p>char *kword[28]={“begin”,”call”,”const”,”do”,”end”,”if”,”odd”,”procedure”,”read”,”then”,”var”,”while”,”write”,”else”,”BEGIN”,”CALL”,”CONST”,”DO”,”END”,”IF”,”ODD”,”PROCEDURE”,”READ”,”THEN”,”VAR”,”WHILE”,”WHILE”,”ELSE”};</p><ul><li>  <strong>常数的文法定义</strong>：</li></ul><p>N::=DDN</p><p>D::=[0..9]；</p><ul><li>  <strong>标识符的文法定义</strong>：</li></ul><p>ID::=LTL</p><p>L::=[a..z]</p><p>T::=LTLD</p><p>D::=[0..9]；</p><ol><li> <strong>单词的处理</strong>：一个单词由单词类别及单词值组成。分隔符、运算符及保留字一个单词一个类别，常数一个类别，标识符一个类别，每个类别使用一个整数编码。标识符、运算符及保留字保存在符号表中；</li><li> <strong>单词表示</strong>：使用结构体表示一个单词，结构体的组成如下：</li></ol><p><strong>单词类别</strong>：使用一个整数编码；</p><p><strong>单词值</strong>：如果是分隔符、运算符则单词值无意义，如果是标识符或保留字，则单词值为其存储在符号表中的下标，如果是常数，则单词值为常数值；</p><ol><li> 存储NFA的数据结构为二维结构体，结构体定义如下</li></ol><p>struct NFA_set</p><p>{</p><p>char set[100];</p><p>int len=0;</p><p>};</p><p>用子集法将NFA转化为DFA。</p><h2 id="实验过程："><a href="#实验过程：" class="headerlink" title="实验过程："></a>实验过程：</h2><ul><li>  源程序</li></ul><p><a href="http://gitlab.zhuanjie.ltd/Randall/byyl1">Randall Chu / 编译原理实验一 · GitLab (zhuanjie.ltd)</a></p><ul><li>  运行结果之载图</li></ul><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/06/image.png"></p><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/06/image-1.png"></p><h2 id="实验总结："><a href="#实验总结：" class="headerlink" title="实验总结："></a>实验总结：</h2><p>通过本次实验，我学到了很多东西。首先是加深了对编译原理课程的理解，对词法分析有了更进一步的掌握，其次是编程能力的提高。这一次的编译原理课程实验，我更注重数据结构的使用，数据结构的好坏直接决定了代码的复杂度和代码量，有一些可以用链表结构的地方尽量避免用链表，换用数组和一个表示长度的整型变量的数据结构来表示，因为链表虽然方便灵活，但是链接的使用会导致后台运算量的增加。通过这一段时间写词法分析器，我对一个编译器的组成有了更深层次的认识。</p><p>如果增加判断数据的类型，新增单精度和双精度数据。单精度：取值范围在正负1.5X10的负45次方到3.4X10的38次方之间，精度为7位数。双精度：取值范围在正负5.0X10的负324到1.7X10的308次方之间，精度为15到16位数。增加科学计数法表示数字的模式，在运算符中新增符号e。如果整数类型引入八进制整数、十六进制整数、长整数及短整数应该在判断数字之前增加判断，新增前缀判断0b、0B为二进制，0开头为八进制，0x、0X开头为十六进制，在判断为几进制数后还要新增判断该数字中的每个数字是否都有该进制的有效的数字。词法分析器的主要任务是读入源程序的输入字符、将它们组成词素，生成并输出一个词法单元序列。过滤掉源程序中的注释和空白，将编译器生成的错误消息和源程序的位置联系起来。有时，词法分析器可以分成两个级联的处理阶段：1）扫描阶段主要负责完成一些不需要生词词法单元的简单处理，比如删除注释和将多个连续的空白字符压缩成一个字符2）     词法分析阶段是较为复杂的部分，它处理扫描阶段的输出并生成词法单元用子集法将NFA转化为DFA。转化过程与课本中子集法的转化过程是一致的。我的程序中，int Is_in(NFA_set temp)函数用于判断新产生的一个子集是否是已经存在的，防止重复。不重复则返回-1，重复则返回重复的编号。void get_closure(NFA_set &amp;temp)函数用于计算ε-closure。bool Is_contained_Y(NFA_set temp)函数用于判断该状态是否是终态。</p><p>转化过程是具体实现是：做一个NFA_set类型的栈，新状态不停的进栈，每次从堆栈中弹出一个，计算其转换的结果，是新状态就进栈，重复则丢弃，只记录好dfa的转换，直到栈空。最后成功构造出DFA。对输入源程序的扫描过程很简单，一次读入一个字符，成串的送入匹配和DFA判断其合法性。给出输出结果。</p><p>删除注释需要读取到“//”直接跳过本行后面的内容，读取到“/*”则暂停分析程序一路扫描跳过，直到扫描到“*/”恢复程序运行。</p><p>宏替换需要在调用宏时，首先对参数进行检查，看看是否包含任何由#define定义的符号。如果是，它们首先被替换。替换文本随后被插入到程序中原来文本的位置。对于宏，参数名被它们的值替换。最后，再次对结果文件进行扫描，看看它是否包含任何由#define定义的符号。如果是，就重复上述处理过程。</p><p>宏展开是一个替换的过程，考虑对上述宏的调用则是一个无限递归的展开过程；为了防止无限递归这种情况的产生，宏展开时会做一个标记，再次对于展开时就不再对其进行替换，这种情况同样适用于非直接自引用的情况。如果宏的参数不是被字符串化或与其它token进行拼接，则宏的参数是完全进行替换的。一旦替换完成，替换后的宏体会被再次扫描完成宏体部分的宏展开。</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于各种排序</title>
      <link href="/2022/04/11/all-kinds-of-sort/"/>
      <url>/2022/04/11/all-kinds-of-sort/</url>
      
        <content type="html"><![CDATA[<p><a href="http://startpage.zhuanjie.ltd:8888/down/W4UMsxpMhjTb">源码及测试样例下载</a></p><h2 id="LSD-Least-Significant-Digit-基数排序"><a href="#LSD-Least-Significant-Digit-基数排序" class="headerlink" title="LSD(Least Significant Digit)基数排序"></a>LSD(Least Significant Digit)基数排序</h2><p>需要r个辅助队列（本代码中r为10）</p><ul><li>  时间复杂度O(d(n+r))</li><li>  空间复杂度O(r)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *<span class="hljs-title function_">LSD</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> l)</span><br>&#123;<br>    <span class="hljs-type">int</span> n = l - f + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> m = <span class="hljs-built_in">log</span>(n) / <span class="hljs-built_in">log</span>(<span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-type">int</span>&gt; q[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-type">int</span> t = a[f + j] % (<span class="hljs-type">int</span>)<span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>, i + <span class="hljs-number">1</span>);<br>            t = t / (<span class="hljs-type">int</span>)<span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>, i);<br>            q[t].push(a[f + j]);<br>        &#125;<br>        <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)&#123;<br>            <span class="hljs-keyword">while</span>(!q[j].empty())&#123;<br>                a[f + k] = q[j].front();<br>                q[j].pop();<br>                k++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="MSD-Most-Significant-Digit-基数排序"><a href="#MSD-Most-Significant-Digit-基数排序" class="headerlink" title="MSD(Most Significant Digit)基数排序"></a>MSD(Most Significant Digit)基数排序</h2><p>需要r个辅助队列（本代码中r为10）</p><ul><li>  时间复杂度O(d(n+r))</li><li>  空间复杂度O(r)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *<span class="hljs-title function_">MSD</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> l)</span><br>&#123;<br>    <span class="hljs-type">int</span> n = l - f + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> m = <span class="hljs-built_in">log</span>(n) / <span class="hljs-built_in">log</span>(<span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-type">int</span>&gt; q[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-type">int</span> t = a[f + j] / (<span class="hljs-type">int</span>)<span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>, i);<br>            t = t % <span class="hljs-number">10</span>;<br>            q[t].push(a[f + j]);<br>        &#125;<br>        <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)&#123;<br>            <span class="hljs-keyword">while</span>(!q[j].empty())&#123;<br>                a[f + k] = q[j].front();<br>                q[j].pop();<br>                k++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="QS-Quick-Sort-快速排序"><a href="#QS-Quick-Sort-快速排序" class="headerlink" title="QS(Quick Sort)快速排序"></a>QS(Quick Sort)快速排序</h2><ul><li>  时间复杂度O(nlogn)</li><li>  空间复杂度O(1)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *<span class="hljs-title function_">QS</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> l)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(f &gt;= l) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-type">int</span> i = f, j = l;<br>    <span class="hljs-type">int</span> x = a[f];<br>    <span class="hljs-keyword">while</span>(i &lt; j)&#123;<br>        <span class="hljs-keyword">while</span>(i &lt; j &amp;&amp; a[j] &gt;= x) j--;<br>        <span class="hljs-keyword">if</span>(i &lt; j) a[i++] = a[j];<br>        <span class="hljs-keyword">while</span>(i &lt; j &amp;&amp; a[i] &lt;= x) i++;<br>        <span class="hljs-keyword">if</span>(i &lt; j) a[j--] = a[i];<br>    &#125;<br>    a[i] = x;<br>    QS(a, f, i - <span class="hljs-number">1</span>);<br>    QS(a, i + <span class="hljs-number">1</span>, l);<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="MS-Merge-Sort-归并排序"><a href="#MS-Merge-Sort-归并排序" class="headerlink" title="MS(Merge Sort)归并排序"></a>MS(Merge Sort)归并排序</h2><ul><li>  时间复杂度O(nlogn)</li><li>  空间复杂度O(n)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *<span class="hljs-title function_">MS</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> l)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(f &gt;= l) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-type">int</span> m = (f + l) / <span class="hljs-number">2</span>;<br>    MS(a, f, m);<br>    MS(a, m + <span class="hljs-number">1</span>, l);<br>    <span class="hljs-type">int</span> *b = new <span class="hljs-type">int</span>[l - f + <span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> i = f, j = m + <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i &lt;= m &amp;&amp; j &lt;= l)&#123;<br>        <span class="hljs-keyword">if</span>(a[i] &lt; a[j]) b[k++] = a[i++];<br>        <span class="hljs-keyword">else</span> b[k++] = a[j++];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(i &lt;= m) b[k++] = a[i++];<br>    <span class="hljs-keyword">while</span>(j &lt;= l) b[k++] = a[j++];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) a[f + i] = b[i];<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SS-Shell-Sort-希尔排序"><a href="#SS-Shell-Sort-希尔排序" class="headerlink" title="SS(Shell Sort)希尔排序"></a>SS(Shell Sort)希尔排序</h2><ul><li>  时间复杂度O(n^1.3)</li><li>  空间复杂度O(1)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *<span class="hljs-title function_">SS</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> l)</span><br>&#123;<br>    <span class="hljs-type">int</span> n = l - f + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> h = <span class="hljs-number">1</span>;<br>    h = n / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">while</span>(h &gt;= <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = f + h; i &lt;= l; i++)&#123;<br>            <span class="hljs-type">int</span> t = a[i];<br>            <span class="hljs-type">int</span> j = i - h;<br>            <span class="hljs-keyword">while</span>(j &gt;= f &amp;&amp; a[j] &gt; t)&#123;<br>                a[j + h] = a[j];<br>                j -= h;<br>            &#125;<br>            a[j + h] = t;<br>        &#125;<br>        h /= <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IS-Insertion-Sort-插入排序"><a href="#IS-Insertion-Sort-插入排序" class="headerlink" title="IS(Insertion Sort)插入排序"></a>IS(Insertion Sort)插入排序</h2><ul><li>  时间复杂度O(n^2)</li><li>  空间复杂度O(1)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *<span class="hljs-title function_">IS</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> l)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = f + <span class="hljs-number">1</span>; i &lt;= l; i++)&#123;<br>        <span class="hljs-type">int</span> t = a[i];<br>        <span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(j &gt;= f &amp;&amp; a[j] &gt; t)&#123;<br>            a[j + <span class="hljs-number">1</span>] = a[j];<br>            j--;<br>        &#125;<br>        a[j + <span class="hljs-number">1</span>] = t;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="BS-Bubble-Sort-冒泡排序"><a href="#BS-Bubble-Sort-冒泡排序" class="headerlink" title="BS(Bubble Sort)冒泡排序"></a>BS(Bubble Sort)冒泡排序</h2><ul><li>  时间复杂度O(n^2)</li><li>  空间复杂度O(1)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *<span class="hljs-title function_">BS</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> l)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = f; i &lt; l; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = f; j &lt; l - i; j++)&#123;<br>            <span class="hljs-keyword">if</span>(a[j] &gt; a[j + <span class="hljs-number">1</span>])&#123;<br>                <span class="hljs-type">int</span> t = a[j];<br>                a[j] = a[j + <span class="hljs-number">1</span>];<br>                a[j + <span class="hljs-number">1</span>] = t;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试部分："><a href="#测试部分：" class="headerlink" title="测试部分："></a>测试部分：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Author: 转接</span><br><span class="hljs-comment"> * @Date: 2022-04-11 13:27:41</span><br><span class="hljs-comment"> * @LastEditors: 转接</span><br><span class="hljs-comment"> * @LastEditTime: 2022-04-11 15:19:31</span><br><span class="hljs-comment"> * @Description: 各种排序算法</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// LSD(Least Significant Digit)基数排序</span><br><span class="hljs-comment">// 需要r个辅助队列（本代码中r为10）</span><br><span class="hljs-comment">// 时间复杂度O(d(n+r))</span><br><span class="hljs-comment">// 空间复杂度O(r)</span><br><span class="hljs-type">int</span> *<span class="hljs-title function_">LSD</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> l)</span><br>&#123;<br>    <span class="hljs-type">int</span> n = l - f + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> m = <span class="hljs-built_in">log</span>(n) / <span class="hljs-built_in">log</span>(<span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-type">int</span>&gt; q[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-type">int</span> t = a[f + j] % (<span class="hljs-type">int</span>)<span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>, i + <span class="hljs-number">1</span>);<br>            t = t / (<span class="hljs-type">int</span>)<span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>, i);<br>            q[t].push(a[f + j]);<br>        &#125;<br>        <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)&#123;<br>            <span class="hljs-keyword">while</span>(!q[j].empty())&#123;<br>                a[f + k] = q[j].front();<br>                q[j].pop();<br>                k++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-comment">// MSD(Most Significant Digit)基数排序</span><br><span class="hljs-comment">// 需要r个辅助队列（本代码中r为10）</span><br><span class="hljs-comment">// 时间复杂度O(d(n+r))</span><br><span class="hljs-comment">// 空间复杂度O(r)</span><br><span class="hljs-type">int</span> *<span class="hljs-title function_">MSD</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> l)</span><br>&#123;<br>    <span class="hljs-type">int</span> n = l - f + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> m = <span class="hljs-built_in">log</span>(n) / <span class="hljs-built_in">log</span>(<span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-type">int</span>&gt; q[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-type">int</span> t = a[f + j] / (<span class="hljs-type">int</span>)<span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>, i);<br>            t = t % <span class="hljs-number">10</span>;<br>            q[t].push(a[f + j]);<br>        &#125;<br>        <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)&#123;<br>            <span class="hljs-keyword">while</span>(!q[j].empty())&#123;<br>                a[f + k] = q[j].front();<br>                q[j].pop();<br>                k++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-comment">// QS(Quick Sort)快速排序</span><br><span class="hljs-comment">// 时间复杂度O(nlogn)</span><br><span class="hljs-comment">// 空间复杂度O(1)</span><br><span class="hljs-type">int</span> *<span class="hljs-title function_">QS</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> l)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(f &gt;= l) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-type">int</span> i = f, j = l;<br>    <span class="hljs-type">int</span> x = a[f];<br>    <span class="hljs-keyword">while</span>(i &lt; j)&#123;<br>        <span class="hljs-keyword">while</span>(i &lt; j &amp;&amp; a[j] &gt;= x) j--;<br>        <span class="hljs-keyword">if</span>(i &lt; j) a[i++] = a[j];<br>        <span class="hljs-keyword">while</span>(i &lt; j &amp;&amp; a[i] &lt;= x) i++;<br>        <span class="hljs-keyword">if</span>(i &lt; j) a[j--] = a[i];<br>    &#125;<br>    a[i] = x;<br>    QS(a, f, i - <span class="hljs-number">1</span>);<br>    QS(a, i + <span class="hljs-number">1</span>, l);<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-comment">// MS(Merge Sort)归并排序</span><br><span class="hljs-comment">// 时间复杂度O(nlogn)</span><br><span class="hljs-comment">// 空间复杂度O(n)</span><br><span class="hljs-type">int</span> *<span class="hljs-title function_">MS</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> l)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(f &gt;= l) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-type">int</span> m = (f + l) / <span class="hljs-number">2</span>;<br>    MS(a, f, m);<br>    MS(a, m + <span class="hljs-number">1</span>, l);<br>    <span class="hljs-type">int</span> *b = new <span class="hljs-type">int</span>[l - f + <span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> i = f, j = m + <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i &lt;= m &amp;&amp; j &lt;= l)&#123;<br>        <span class="hljs-keyword">if</span>(a[i] &lt; a[j]) b[k++] = a[i++];<br>        <span class="hljs-keyword">else</span> b[k++] = a[j++];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(i &lt;= m) b[k++] = a[i++];<br>    <span class="hljs-keyword">while</span>(j &lt;= l) b[k++] = a[j++];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) a[f + i] = b[i];<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-comment">// SS(Shell Sort)希尔排序</span><br><span class="hljs-comment">// 时间复杂度O(n^1.3)</span><br><span class="hljs-comment">// 空间复杂度O(1)</span><br><span class="hljs-type">int</span> *<span class="hljs-title function_">SS</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> l)</span><br>&#123;<br>    <span class="hljs-type">int</span> n = l - f + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> h = <span class="hljs-number">1</span>;<br>    h = n / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">while</span>(h &gt;= <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = f + h; i &lt;= l; i++)&#123;<br>            <span class="hljs-type">int</span> t = a[i];<br>            <span class="hljs-type">int</span> j = i - h;<br>            <span class="hljs-keyword">while</span>(j &gt;= f &amp;&amp; a[j] &gt; t)&#123;<br>                a[j + h] = a[j];<br>                j -= h;<br>            &#125;<br>            a[j + h] = t;<br>        &#125;<br>        h /= <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-comment">// IS(Insertion Sort)插入排序</span><br><span class="hljs-comment">// 时间复杂度O(n^2)</span><br><span class="hljs-comment">// 空间复杂度O(1)</span><br><span class="hljs-type">int</span> *<span class="hljs-title function_">IS</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> l)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = f + <span class="hljs-number">1</span>; i &lt;= l; i++)&#123;<br>        <span class="hljs-type">int</span> t = a[i];<br>        <span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(j &gt;= f &amp;&amp; a[j] &gt; t)&#123;<br>            a[j + <span class="hljs-number">1</span>] = a[j];<br>            j--;<br>        &#125;<br>        a[j + <span class="hljs-number">1</span>] = t;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-comment">// BS(Bubble Sort)冒泡排序</span><br><span class="hljs-comment">// 时间复杂度O(n^2)</span><br><span class="hljs-comment">// 空间复杂度O(1)</span><br><span class="hljs-type">int</span> *<span class="hljs-title function_">BS</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> l)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = f; i &lt; l; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = f; j &lt; l - i; j++)&#123;<br>            <span class="hljs-keyword">if</span>(a[j] &gt; a[j + <span class="hljs-number">1</span>])&#123;<br>                <span class="hljs-type">int</span> t = a[j];<br>                a[j] = a[j + <span class="hljs-number">1</span>];<br>                a[j + <span class="hljs-number">1</span>] = t;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">10000</span>;<br>    <span class="hljs-comment">// 生成n个随机数</span><br>    <span class="hljs-type">int</span> a[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        a[i] = rand() % <span class="hljs-number">10000</span>;<br>    &#125;<br>    <span class="hljs-comment">// 将数据写入文件</span><br>    ofstream <span class="hljs-title function_">fout</span><span class="hljs-params">(<span class="hljs-string">&quot;data.txt&quot;</span>)</span>;<br>    fout &lt;&lt;  <span class="hljs-string">&quot;排序前：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        fout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    fout &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    fout.close();<br>    <span class="hljs-comment">// LSD基数排序</span><br>    <span class="hljs-comment">// 记录时间</span><br>    <span class="hljs-type">clock_t</span> time1 = clock();<br>    <span class="hljs-type">int</span> *b = LSD(a,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-type">clock_t</span> time2 = clock();<br>    <span class="hljs-comment">// 输出结果追加到data.txt</span><br>    fout.open(<span class="hljs-string">&quot;data.txt&quot;</span>, ios::app);<br>    fout &lt;&lt; <span class="hljs-string">&quot;LSD基数排序后：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        fout &lt;&lt; b[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    fout &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    fout.close();<br><br>    <span class="hljs-comment">// MSD基数排序</span><br>    <span class="hljs-comment">// 记录时间</span><br>    <span class="hljs-type">clock_t</span> time3 = clock();<br>    <span class="hljs-type">int</span> *c = MSD(a,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-type">clock_t</span> time4 = clock();<br>    <span class="hljs-comment">// 输出结果追加到data.txt</span><br>    fout.open(<span class="hljs-string">&quot;data.txt&quot;</span>, ios::app);<br>    fout &lt;&lt; <span class="hljs-string">&quot;MSD基数排序后：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        fout &lt;&lt; c[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    fout &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    fout.close();<br><br>    <span class="hljs-comment">// QS快速排序</span><br>    <span class="hljs-comment">// 记录时间</span><br>    <span class="hljs-type">clock_t</span> time5 = clock();<br>    <span class="hljs-type">int</span> *d = QS(a,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-type">clock_t</span> time6 = clock();<br>    <span class="hljs-comment">// 输出结果追加到data.txt</span><br>    fout.open(<span class="hljs-string">&quot;data.txt&quot;</span>, ios::app);<br>    fout &lt;&lt; <span class="hljs-string">&quot;QS快速排序后：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        fout &lt;&lt; d[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    fout &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    fout.close();<br><br>    <span class="hljs-comment">// MS归并排序</span><br>    <span class="hljs-comment">// 记录时间</span><br>    <span class="hljs-type">clock_t</span> time7 = clock();<br>    <span class="hljs-type">int</span> *e = MS(a,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-type">clock_t</span> time8 = clock();<br>    <span class="hljs-comment">// 输出结果追加到data.txt</span><br>    fout.open(<span class="hljs-string">&quot;data.txt&quot;</span>, ios::app);<br>    fout &lt;&lt; <span class="hljs-string">&quot;MS归并排序后：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        fout &lt;&lt; e[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    fout &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    fout.close();<br><br>    <span class="hljs-comment">// SS希尔排序</span><br>    <span class="hljs-comment">// 记录时间</span><br>    <span class="hljs-type">clock_t</span> time9 = clock();<br>    <span class="hljs-type">int</span> *f = SS(a,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-type">clock_t</span> time10 = clock();<br>    <span class="hljs-comment">// 输出结果追加到data.txt</span><br>    fout.open(<span class="hljs-string">&quot;data.txt&quot;</span>, ios::app);<br>    fout &lt;&lt; <span class="hljs-string">&quot;SS希尔排序后：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        fout &lt;&lt; f[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    fout &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    fout.close();<br><br>    <span class="hljs-comment">// IS插入排序</span><br>    <span class="hljs-comment">// 记录时间</span><br>    <span class="hljs-type">clock_t</span> time11 = clock();<br>    <span class="hljs-type">int</span> *g = IS(a,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-type">clock_t</span> time12 = clock();<br>    <span class="hljs-comment">// 输出结果追加到data.txt</span><br>    fout.open(<span class="hljs-string">&quot;data.txt&quot;</span>, ios::app);<br>    fout &lt;&lt; <span class="hljs-string">&quot;IS插入排序后：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        fout &lt;&lt; g[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    fout &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    fout.close();<br><br>    <span class="hljs-comment">// BS冒泡排序</span><br>    <span class="hljs-comment">// 记录时间</span><br>    <span class="hljs-type">clock_t</span> time15 = clock();<br>    <span class="hljs-type">int</span> *k = BS(a,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-type">clock_t</span> time16 = clock();<br>    <span class="hljs-comment">// 输出结果追加到data.txt</span><br>    fout.open(<span class="hljs-string">&quot;data.txt&quot;</span>, ios::app);<br>    fout &lt;&lt; <span class="hljs-string">&quot;BS冒泡排序后：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        fout &lt;&lt; k[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    fout &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    fout.close();<br><br>    <span class="hljs-comment">// 最后输出排序时间比较</span><br>    fout.open(<span class="hljs-string">&quot;data.txt&quot;</span>, ios::app);<br>    fout &lt;&lt; <span class="hljs-string">&quot;-----------------------------------------------&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    fout &lt;&lt; <span class="hljs-string">&quot;LSD基数排序用时：&quot;</span> &lt;&lt; (<span class="hljs-type">double</span>)(time2 - time1) / CLOCKS_PER_SEC &lt;&lt; <span class="hljs-string">&quot;s&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    fout &lt;&lt; <span class="hljs-string">&quot;MSD基数排序用时：&quot;</span> &lt;&lt; (<span class="hljs-type">double</span>)(time4 - time3) / CLOCKS_PER_SEC &lt;&lt; <span class="hljs-string">&quot;s&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    fout &lt;&lt; <span class="hljs-string">&quot;QS快速排序用时：&quot;</span> &lt;&lt; (<span class="hljs-type">double</span>)(time6 - time5) / CLOCKS_PER_SEC &lt;&lt; <span class="hljs-string">&quot;s&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    fout &lt;&lt; <span class="hljs-string">&quot;MS归并排序用时：&quot;</span> &lt;&lt; (<span class="hljs-type">double</span>)(time8 - time7) / CLOCKS_PER_SEC &lt;&lt; <span class="hljs-string">&quot;s&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    fout &lt;&lt; <span class="hljs-string">&quot;SS希尔排序用时：&quot;</span> &lt;&lt; (<span class="hljs-type">double</span>)(time10 - time9) / CLOCKS_PER_SEC &lt;&lt; <span class="hljs-string">&quot;s&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    fout &lt;&lt; <span class="hljs-string">&quot;IS插入排序用时：&quot;</span> &lt;&lt; (<span class="hljs-type">double</span>)(time12 - time11) / CLOCKS_PER_SEC &lt;&lt; <span class="hljs-string">&quot;s&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    fout.close();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>每日一题——九进制转十进制</title>
      <link href="/2022/04/11/day8/"/>
      <url>/2022/04/11/day8/</url>
      
        <content type="html"><![CDATA[<ul><li>  day8</li></ul><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>九进制正整数 (2022)9 转换成十进制等于多少？</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Author: 转接</span><br><span class="hljs-comment"> * @Date: 2022-04-11 12:00:25</span><br><span class="hljs-comment"> * @LastEditors: 转接</span><br><span class="hljs-comment"> * @LastEditTime: 2022-04-11 12:08:28</span><br><span class="hljs-comment"> * @Description: 九进制转十进制</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">day8</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">每日一题——九进制转十进制</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">九进制正整数 (2022)9 转换成十进制等于多少？</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">switch_num</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span>&#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(num)&#123;<br>        sum += (num%<span class="hljs-number">10</span>)*<span class="hljs-built_in">pow</span>(<span class="hljs-number">9</span>,i);<br>        num /= <span class="hljs-number">10</span>;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> num;<br>    cin&gt;&gt;num;<br>    cout&lt;&lt;switch_num(num);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>每日一题——错误票据</title>
      <link href="/2022/03/23/day7/"/>
      <url>/2022/03/23/day7/</url>
      
        <content type="html"><![CDATA[<ul><li>  day7</li></ul><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>某涉密单位下发了某种票据，并要在年终全部收回。<br>每张票据有唯一的ID号。全年所有票据的ID号是连续的，但ID的开始数码是随机选定的。<br>因为工作人员疏忽，在录入ID号的时候发生了一处错误，造成了某个ID断号，另外一个ID重号。<br>你的任务是通过编程，找出断号的ID和重号的ID。<br>假设断号不可能发生在最大和最小号。</p><p>（ATT：TODO改用vector获取字符流判断）</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>要求程序首先输入一个整数N(N&lt;100)表示后面数据行数。<br>接着读入N行数据。<br>每行数据长度不等，是用空格分开的若干个（不大于100个）正整数（不大于100000），请注意行内和行末可能有多余的空格，你的程序需要能处理这些空格。<br>每个整数代表一个ID号。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>要求程序输出1行，含两个整数m n，用空格分隔。<br>其中，m表示断号ID，n表示重号ID</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><p>样例输入1</p><blockquote><p>2<br>5 6 8 11 9<br>10 12 </p></blockquote><p>样例输出1</p><blockquote><p> 7 9</p></blockquote><p>样例输入2</p><blockquote><p> 6<br>164 178 108 109 180 155 141 159 104 182 179 118 137 184 115 124 125 129 168 196<br>172 189 127 107 112 192 103 131 133 169 158<br>128 102 110 148 139 157 140 195 197<br>185 152 135 106 123 173 122 136 174 191 145 116 151 143 175 120 161 134 162 190<br>149 138 142 146 199 126 165 156 153 193 144 166 170 121 171 132 101 194 187 188<br>113 130 176 154 177 120 117 150 114 183 186 181 100 163 160 167 147 198 111 119</p></blockquote><p>样例输出2</p><blockquote><p> 105 120</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> n 10000</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> a[n] = &#123;<span class="hljs-number">0</span>&#125;,<br>            N,     <span class="hljs-comment">//行数 </span><br>    min = <span class="hljs-number">10000</span>, max = <span class="hljs-number">0</span>, <span class="hljs-comment">//id开始值和id结束值 </span><br>    m;   <span class="hljs-comment">//中间值 </span><br>    <span class="hljs-type">char</span> c;  <span class="hljs-comment">//用来判断空格和回车</span><br>    cin&gt;&gt;N;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;  <span class="hljs-comment">//外循环，循环 “输入的行数” 的次数 </span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>            cin&gt;&gt;m;<br>            <span class="hljs-keyword">if</span>(m &gt; max) max = m;<br>            <span class="hljs-keyword">if</span>(m &lt; min) min = m;<span class="hljs-comment">//注意：这里不能用else if()语句。。。。</span><br><br>            a[m]++;    <span class="hljs-comment">//用数组的下标存连续的id值（不用0下标）</span><br>            <span class="hljs-comment">//确定范围后，数组的值==0，为断号</span><br>            <span class="hljs-comment">//数组的值==2，为重号 </span><br><br>            c = <span class="hljs-built_in">getchar</span>(); <span class="hljs-comment">//提取空格或换行符</span><br>            <span class="hljs-keyword">if</span>(c != <span class="hljs-string">&#x27; &#x27;</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = min; i &lt;= max; i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[i] == <span class="hljs-number">0</span>)cout&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i] == <span class="hljs-number">2</span>)cout&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>每日一题——三部排序</title>
      <link href="/2022/03/22/day6/"/>
      <url>/2022/03/22/day6/</url>
      
        <content type="html"><![CDATA[<ul><li>  day6</li></ul><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>如果给定数组：<br>25,18,-2,0,16,-5,33,21,0,19,-16,25,-3,0<br>则排序后为：<br>-3,-2,-16,-5,0,0,0,21,19,33,25,16,18,25</p><p>请分析代码逻辑，并推测划线处的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">sort3p</span><span class="hljs-params">(<span class="hljs-type">int</span>* x, <span class="hljs-type">int</span> len)</span><br>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right = len<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(p&lt;=right)&#123;<br>        <span class="hljs-keyword">if</span>(x[p]&lt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-type">int</span> t = x[left];<br>            x[left] = x[p];<br>            x[p] = t;<br>            left++;<br>            p++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x[p]&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-type">int</span> t = x[right];<br>            x[right] = x[p];<br>            x[p] = t;<br>            right--;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            __________________________;  <span class="hljs-comment">//填空位置</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果给定数组：<br>25,18,-2,0,16,-5,33,21,0,19,-16,25,-3,0<br>则排序后为：<br>-3,-2,-16,-5,0,0,0,21,19,33,25,16,18,25</p><p>请分析代码逻辑，并推测划线处的代码</p><h2 id="答案格式"><a href="#答案格式" class="headerlink" title="答案格式"></a>答案格式</h2><p>仅把应填在横线上缺少的代码作为答案</p><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><p>p++</p><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort3p</span><span class="hljs-params">(<span class="hljs-type">int</span>* x, <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right = len<span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">while</span>(p&lt;=right)&#123;<br>        <span class="hljs-keyword">if</span>(x[p]&lt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-type">int</span> t = x[left];<br>            x[left] = x[p];<br>            x[p] = t;<br>            left++;<br>            p++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x[p]&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-type">int</span> t = x[right];<br>            x[right] = x[p];<br>            x[p] = t;<br>            right--;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            p++;<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">14</span>]=&#123;<span class="hljs-number">25</span>,<span class="hljs-number">18</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">16</span>,<span class="hljs-number">-5</span>,<span class="hljs-number">33</span>,<span class="hljs-number">21</span>,<span class="hljs-number">0</span>,<span class="hljs-number">19</span>,<span class="hljs-number">-16</span>,<span class="hljs-number">25</span>,<span class="hljs-number">-3</span>,<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">sort3p</span>(a,<span class="hljs-number">14</span>);<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">14</span>; i++)<br>        cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-3 -2 -16 -5 0 0 0 21 19 33 25 16 18 25<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>每日一题——前缀判断</title>
      <link href="/2022/03/21/day5/"/>
      <url>/2022/03/21/day5/</url>
      
        <content type="html"><![CDATA[<ul><li>  day5</li></ul><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>如下的代码判断 needle_start指向的串是否为haystack_start指向的串的前缀，如不是，则返回NULL。<br>比如：”abcd1234” 就包含了 “abc” 为前缀</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span>* <span class="hljs-title function_">prefix</span><span class="hljs-params">(<span class="hljs-type">char</span>* haystack_start, <span class="hljs-type">char</span>* needle_start)</span><br>&#123;<br>    <span class="hljs-type">char</span>* haystack = haystack_start;<br>    <span class="hljs-type">char</span>* needle = needle_start;<br>    <span class="hljs-keyword">while</span>(*haystack &amp;&amp; *needle)&#123;<br>        <span class="hljs-keyword">if</span>(__________________) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//填空位置</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(*needle) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> haystack_start;<br>&#125;<br></code></pre></td></tr></table></figure><p>请分析代码逻辑，并推测划线处的代码</p><h2 id="答案格式"><a href="#答案格式" class="headerlink" title="答案格式"></a>答案格式</h2><p>仅把应填在横线上缺少的代码作为答案</p><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><blockquote><p> *(haystack++) != *(needle++)</p></blockquote><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">prefix</span><span class="hljs-params">(<span class="hljs-type">char</span>* haystack_start, <span class="hljs-type">char</span>* needle_start)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span>* haystack = haystack_start;<br>    <span class="hljs-type">char</span>* needle = needle_start;<br>    <span class="hljs-keyword">while</span>(*haystack &amp;&amp; *needle)&#123;<br>        <span class="hljs-keyword">if</span>(*(haystack++) != *(needle++)) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">//填空位置</span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(*needle) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">return</span> haystack_start;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> *a=<span class="hljs-built_in">prefix</span>(<span class="hljs-string">&quot;abc123&quot;</span>,<span class="hljs-string">&quot;abc&quot;</span>);<br>    <span class="hljs-type">char</span> *b=<span class="hljs-built_in">prefix</span>(<span class="hljs-string">&quot;abc123&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>);<br>    <span class="hljs-keyword">if</span>(a == <span class="hljs-literal">NULL</span>)&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;a = NULL&quot;</span> &lt;&lt; endl;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(b == <span class="hljs-literal">NULL</span>)&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;b = NULL&quot;</span> &lt;&lt; endl;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">a = abc123<br>b = NULL<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>每日一题——黄金连分数</title>
      <link href="/2022/03/20/day4/"/>
      <url>/2022/03/20/day4/</url>
      
        <content type="html"><![CDATA[<ul><li>  day4</li></ul><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>黄金分割数0.61803… 是个无理数，这个常数十分重要，在许多工程问题中会出现。有时需要把这个数字求得很精确。<br>对于某些精密工程，常数的精度很重要。也许你听说过哈勃太空望远镜，它首次升空后就发现了一处人工加工错误，对那样一个庞然大物，其实只是镜面加工时有比头发丝还细许多倍的一处错误而已，却使它成了“近视眼”!!<br>言归正传，我们如何求得黄金分割数的尽可能精确的值呢？有许多方法。<br>比较简单的一种是用连分数：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">                 1<br>黄金数 = <span class="hljs-params">---------------------</span><br>                     1<br>         1 + <span class="hljs-params">-----------------</span><br>                      1<br>             1 + <span class="hljs-params">-------------</span><br>                        1<br>                 1 + <span class="hljs-params">---------</span><br>                      1 + <span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><p>这个连分数计算的“层数”越多，它的值越接近黄金分割数。<br>请你利用这一特性，求出黄金分割数的足够精确值，要求四舍五入到小数点后100位。<br>小数点后3位的值为：0.618<br>小数点后4位的值为：0.6180<br>小数点后5位的值为：0.61803<br>小数点后7位的值为：0.6180340<br>（注意尾部的0，不能忽略）<br>你的任务是：写出精确到小数点后100位精度的黄金分割值。<br>注意：尾数的四舍五入！ 尾数是0也要保留！</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一个小数，其小数点后有100位数字</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>本题如果采用递归来计算就会造成栈溢出。观察黄金数，1层嵌套的结果是1，2层嵌套的结果是1/2，3层嵌套的结果是2/3，3层嵌套的结果是3/5…即每层的嵌套结果是斐波那契数列的前一项与后一项的比值。所以本题利用斐波那契数列的推导来求值。</p><p>且由于C没有能表示一百位小数的数据类型，需要自己定义string类型是数据的加法和除法，而除法可以看作多次减法，即需要完成string类型数据的加减除。在函数体中要注意0的个数和位置。在加法中要先创建一个比加数和被加数长度中更长的那个的长度加一个的string类型数组用来存放结果，再将加数和被加数反序，依次相加，遇到进位需要进位（TODO：本代码中判断加数区域代码可优化，不必在b已经完成加法后且没有进位的情况下继续使用temp）。减法要注意循环借位，借完要保证中间的每一位都是’9’。除法要循环利用到减法，如果不够减，则将其末尾添0再减。</p><p>最后结果肯定是随着斐波那契数列往后循环前100位小数一定不会再改变，要利用循环找到前一百位不再改变的数据。</p><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><blockquote><p> 0.6180339887498948482045868343656381177203091798057628621354486227052604628189024497072072041893911375</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 判断a,b大小</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">comp</span><span class="hljs-params">(string a, string b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a.<span class="hljs-built_in">find_first_not_of</span>(<span class="hljs-string">&#x27;0&#x27;</span>) == string::npos)&#123;<br>        a = <span class="hljs-string">&quot;0&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        a.<span class="hljs-built_in">substr</span>(a.<span class="hljs-built_in">find_first_not_of</span>(<span class="hljs-string">&#x27;0&#x27;</span>));<br>    &#125;<br>    <span class="hljs-keyword">if</span>(b.<span class="hljs-built_in">find_first_not_of</span>(<span class="hljs-string">&#x27;0&#x27;</span>) == string::npos)&#123;<br>        b = <span class="hljs-string">&quot;0&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        b.<span class="hljs-built_in">substr</span>(b.<span class="hljs-built_in">find_first_not_of</span>(<span class="hljs-string">&#x27;0&#x27;</span>));<br>    &#125;<br>    <span class="hljs-keyword">if</span>(a.<span class="hljs-built_in">length</span>() &gt; b.<span class="hljs-built_in">length</span>())&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a.<span class="hljs-built_in">length</span>() &lt; b.<span class="hljs-built_in">length</span>())&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(a &gt; b)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a &lt; b)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 加法</span><br><span class="hljs-function">string <span class="hljs-title">add</span><span class="hljs-params">(string a, string b)</span></span>&#123;<br>    <span class="hljs-type">int</span> tmp = <span class="hljs-number">0</span>; <span class="hljs-comment">// 用于记录进位值</span><br>    <span class="hljs-comment">// 去除首部的0后</span><br>    a = a.<span class="hljs-built_in">substr</span>(a.<span class="hljs-built_in">find_first_not_of</span>(<span class="hljs-string">&#x27;0&#x27;</span>));<br>    b = b.<span class="hljs-built_in">substr</span>(b.<span class="hljs-built_in">find_first_not_of</span>(<span class="hljs-string">&#x27;0&#x27;</span>));<br>    <span class="hljs-comment">// 将a，b进行反序，方便后续计算</span><br>    <span class="hljs-built_in">reverse</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-built_in">reverse</span>(b.<span class="hljs-built_in">begin</span>(), b.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-comment">// 创建结果字符串定义其长度为a，b长度的最大值加1（加一防止a，b相加后产生进位）</span><br>    <span class="hljs-function">string <span class="hljs-title">ans</span><span class="hljs-params">(max(a.length(),b.length())+<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;0&#x27;</span>)</span></span>;<br>    <span class="hljs-comment">// 拷贝a到ans中准备计算</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-built_in">length</span>(); i++)&#123;<br>        ans[i] = a[i];<br>    &#125;<br>    <span class="hljs-comment">// 依次循环进行相加</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ans.<span class="hljs-built_in">length</span>(); i++)&#123;<br>        <span class="hljs-keyword">if</span>(i &lt; b.<span class="hljs-built_in">length</span>())&#123;<br>            tmp += (ans[i] - <span class="hljs-string">&#x27;0&#x27;</span>) + (b[i] - <span class="hljs-string">&#x27;0&#x27;</span>); <span class="hljs-comment">// 计算此位置的tmp</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            tmp += ans[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<br>        ans[i] = tmp%<span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>; <span class="hljs-comment">// 将目前位置tmp中个位数存入ans</span><br>        tmp /= <span class="hljs-number">10</span>; <span class="hljs-comment">// 标志下一位进位数</span><br>    &#125;<br>    <span class="hljs-built_in">reverse</span>(ans.<span class="hljs-built_in">begin</span>(), ans.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">return</span> ans.<span class="hljs-built_in">substr</span>(ans.<span class="hljs-built_in">find_first_not_of</span>(<span class="hljs-string">&#x27;0&#x27;</span>));<br>&#125;<br><br><span class="hljs-comment">// 减法 默认a大于b的情况</span><br><span class="hljs-function">string <span class="hljs-title">subtract</span><span class="hljs-params">(string a, string b)</span></span>&#123;<br>    <span class="hljs-comment">// 去除首部的0后</span><br>    <span class="hljs-keyword">if</span>(a.<span class="hljs-built_in">find_first_not_of</span>(<span class="hljs-string">&#x27;0&#x27;</span>) == string::npos)&#123;<br>        a = <span class="hljs-string">&quot;0&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        a = a.<span class="hljs-built_in">substr</span>(a.<span class="hljs-built_in">find_first_not_of</span>(<span class="hljs-string">&#x27;0&#x27;</span>));<br>    &#125;<br>    <span class="hljs-keyword">if</span>(b.<span class="hljs-built_in">find_first_not_of</span>(<span class="hljs-string">&#x27;0&#x27;</span>) == string::npos)&#123;<br>        b = <span class="hljs-string">&quot;0&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        b = b.<span class="hljs-built_in">substr</span>(b.<span class="hljs-built_in">find_first_not_of</span>(<span class="hljs-string">&#x27;0&#x27;</span>));<br>    &#125;<br>    <span class="hljs-comment">// 将a，b进行反序，方便后续计算</span><br>    <span class="hljs-built_in">reverse</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-built_in">reverse</span>(b.<span class="hljs-built_in">begin</span>(), b.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; b.<span class="hljs-built_in">length</span>(); i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[i] &gt;= b[i])&#123;<br>            a[i] = a[i] - b[i] + <span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">int</span> k = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(a[i+k] == <span class="hljs-string">&#x27;0&#x27;</span>)&#123;<br>                a[i+k] = <span class="hljs-string">&#x27;9&#x27;</span>;<br>                k++;<br>            &#125;<br>            a[i+k] = a[i+k] - <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// a[i]变为a[i]加上10（借）减去b[i]</span><br>            <span class="hljs-comment">// (a[i] - &#x27;0&#x27; + 10) - (b[i] - &#x27;0&#x27;) + &#x27;0&#x27;</span><br>            <span class="hljs-comment">// 化简为a[i] - b[i] + 10 + &#x27;0&#x27;</span><br>            a[i] = a[i] - b[i] + <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">reverse</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">if</span>(a.<span class="hljs-built_in">find_first_not_of</span>(<span class="hljs-string">&#x27;0&#x27;</span>) == string::npos)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">substr</span>(a.<span class="hljs-built_in">find_first_not_of</span>(<span class="hljs-string">&#x27;0&#x27;</span>));<br>&#125;<br><br><span class="hljs-comment">// 除法 默认a小于b，且a，b大于0</span><br><span class="hljs-function">string <span class="hljs-title">divide</span><span class="hljs-params">(string a, string b)</span></span>&#123;<br>    <span class="hljs-comment">// 由题意结果必然是以0.开头的小数</span><br>    string ans = <span class="hljs-string">&quot;0.&quot;</span>;<br>    <span class="hljs-comment">// 记录减法次数</span><br>    <span class="hljs-type">int</span> times;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">101</span>; i++)&#123;<br>        a.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>        <span class="hljs-comment">// 初始化减去的次数</span><br>        times = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-built_in">comp</span>(a, b) &gt;= <span class="hljs-number">0</span>)&#123;<br>            a = <span class="hljs-built_in">subtract</span>(a, b);<br>            times++;<br>        &#125;<br>        <span class="hljs-type">char</span> temp = times + <span class="hljs-string">&#x27;0&#x27;</span>;<br>        ans.<span class="hljs-built_in">append</span>(<span class="hljs-number">1</span>,temp);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string a = <span class="hljs-string">&quot;1&quot;</span>;<br>    string b = <span class="hljs-string">&quot;1&quot;</span>;<br>    string res = <span class="hljs-string">&quot;1&quot;</span>;<br>    <span class="hljs-comment">// 斐波那契数列</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        string temp = b;<br>        b = <span class="hljs-built_in">add</span>(a, b);<br>        a = temp;<br>        <span class="hljs-keyword">if</span>(res == <span class="hljs-built_in">divide</span>(a, b))&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            res = <span class="hljs-built_in">divide</span>(a, b);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(res[<span class="hljs-number">102</span>]-<span class="hljs-string">&#x27;0&#x27;</span> &lt; <span class="hljs-number">5</span>)&#123;<br>        res = res.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, res.<span class="hljs-built_in">length</span>() - <span class="hljs-number">1</span>);<br>        cout &lt;&lt; res &lt;&lt; endl;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        res = res.<span class="hljs-built_in">substr</span>(<span class="hljs-number">2</span>, res.<span class="hljs-built_in">length</span>() - <span class="hljs-number">3</span>);<br>        res = <span class="hljs-built_in">add</span>(res, <span class="hljs-string">&quot;1&quot;</span>);<br>        cout &lt;&lt; <span class="hljs-string">&quot;0.&quot;</span> &lt;&lt; res &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>每日一题——第39级台阶</title>
      <link href="/2022/03/19/day3/"/>
      <url>/2022/03/19/day3/</url>
      
        <content type="html"><![CDATA[<ul><li>  day3</li></ul><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>小明刚刚看完电影《第39级台阶》，离开电影院的时候，他数了数礼堂前的台阶数，恰好是39级!<br>站在台阶前，他突然又想着一个问题：<br>如果我每一步只能迈上1个或2个台阶。先迈左脚，然后左右交替，最后一步是迈右脚，也就是说一共要走偶数步。那么，上完39级台阶，有多少种不同的上法呢？<br>请你利用计算机的优势，帮助小明寻找答案。</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一个整数</p><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><blockquote><p> 51167078</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> totol;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> last, <span class="hljs-type">int</span> steps)</span>&#123;<br>    <span class="hljs-keyword">if</span>(last &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(last == <span class="hljs-number">0</span> &amp;&amp; steps%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>        totol++;<br>    &#125;<br>    fun(last - <span class="hljs-number">1</span>, steps + <span class="hljs-number">1</span>);<br>    fun(last - <span class="hljs-number">2</span>, steps + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    fun(<span class="hljs-number">39</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,totol);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>每日一题——马虎的算式</title>
      <link href="/2022/03/18/day2/"/>
      <url>/2022/03/18/day2/</url>
      
        <content type="html"><![CDATA[<ul><li>  day2</li></ul><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>小明是个急性子，上小学的时候经常把老师写在黑板上的题目抄错了。<br>有一次，老师出的题目是：36 x 495 = ?<br>他却给抄成了：396 x 45 = ?<br>但结果却很戏剧性，他的答案竟然是对的！！<br>因为 36 * 495 = 396 * 45 = 17820<br>类似这样的巧合情况可能还有很多，比如：27 * 594 = 297 * 54<br>假设 a b c d e 代表1~9不同的5个数字（注意是各不相同的数字，且不含0）<br>能满足形如： ab * cde = adb * ce 这样的算式一共有多少种呢？</p><p>请你利用计算机的优势寻找所有的可能，并回答不同算式的种类数。<br>满足乘法交换律的算式计为不同的种类，所以答案肯定是个偶数。</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>只提交一个表示最终统计种类数的数字，不要提交解答过程或其它多余的内容</p><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><blockquote><p> 142</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c, <span class="hljs-type">int</span> d,<span class="hljs-type">int</span> e)</span>&#123;<br>    <span class="hljs-keyword">return</span> (a*<span class="hljs-number">10</span>+b)*(c*<span class="hljs-number">100</span>+d*<span class="hljs-number">10</span>+e) == (a*<span class="hljs-number">100</span>+d*<span class="hljs-number">10</span>+b)*(c*<span class="hljs-number">10</span>+e);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a = <span class="hljs-number">1</span>; a &lt; <span class="hljs-number">10</span>; a++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> b = <span class="hljs-number">1</span>; b &lt; <span class="hljs-number">10</span>; b++)&#123;<br>            <span class="hljs-keyword">if</span>(b == a)&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> c = <span class="hljs-number">1</span>; c &lt; <span class="hljs-number">10</span>; c++)&#123;<br>                <span class="hljs-keyword">if</span>(c == b  c == a)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> d = <span class="hljs-number">1</span>; d &lt; <span class="hljs-number">10</span>; d++)&#123;<br>                    <span class="hljs-keyword">if</span>(d == c  d == b  d == a)&#123;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> e = <span class="hljs-number">1</span>; e &lt; <span class="hljs-number">10</span>; e++)&#123;<br>                        <span class="hljs-keyword">if</span>(e == d  e == c  e == b  e == a)&#123;<br>                            <span class="hljs-keyword">continue</span>;<br>                        &#125;<br>                        <span class="hljs-comment">//printf(&quot;%d%d%d%d%d\n&quot;,a, b, c, d, e);</span><br>                        <span class="hljs-keyword">if</span>(judge(a, b, c, d, e))&#123;<br>                            num++;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,num);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>每日一题——高斯日记</title>
      <link href="/2022/03/17/day1/"/>
      <url>/2022/03/17/day1/</url>
      
        <content type="html"><![CDATA[<ul><li>  day1</li></ul><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>大数学家高斯有个好习惯：无论如何都要记日记。</p><p>他的日记有个与众不同的地方，他从不注明年月日，而是用一个整数代替，比如：4210。</p><p>后来人们知道，那个整数就是日期，它表示那一天是高斯出生后的第几天。这或许也是个好习惯，它时时刻刻提醒着主人：日子又过去一天，还有多少时光可以用于浪费呢？</p><p>高斯出生于：1777年4月30日。</p><p>在高斯发现的一个重要定理的日记上标注着：5343，因此可算出那天是：1791年12月15日。</p><p>高斯获得博士学位的那天日记上标着：8113。</p><p>请你算出高斯获得博士学位的年月日。</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><blockquote><p> yyyy-mm-dd, 例如：1980-03-21</p></blockquote><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><blockquote><p> 1799-07-16</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> monthn[<span class="hljs-number">12</span>] = &#123;<span class="hljs-number">31</span>, <span class="hljs-number">28</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>&#125;;<br><span class="hljs-type">int</span> monthd[<span class="hljs-number">12</span>] = &#123;<span class="hljs-number">31</span>, <span class="hljs-number">29</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>&#125;;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">IsLeap</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span>&#123;<br>    <span class="hljs-keyword">if</span>(year%<span class="hljs-number">400</span> == <span class="hljs-number">0</span>  (year%<span class="hljs-number">100</span> != <span class="hljs-number">0</span> &amp;&amp; year%<span class="hljs-number">4</span> == <span class="hljs-number">0</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Last</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span>&#123;<br>    <span class="hljs-type">int</span> *monthi;<br>    <span class="hljs-keyword">if</span>(IsLeap(year))&#123;<br>        monthi = &amp;monthd[<span class="hljs-number">0</span>];<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        monthi = &amp;monthn[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-type">int</span> result = monthi[month<span class="hljs-number">-1</span>] - day;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = month ; i &lt; <span class="hljs-number">12</span>; i++)&#123;<br>        result += monthi[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Past</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span>&#123;<br>    <span class="hljs-type">int</span> *monthi;<br>    <span class="hljs-keyword">if</span>(IsLeap(year))&#123;<br>        monthi = &amp;monthd[<span class="hljs-number">0</span>];<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        monthi = &amp;monthn[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-type">int</span> result = day;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; month<span class="hljs-number">-1</span>; i++)&#123;<br>        result += monthi[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">To</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span>&#123;<br>    <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1777</span>; i &lt;= year; i++)&#123;<br>        <span class="hljs-keyword">if</span>(IsLeap(i))&#123;<br>            result += <span class="hljs-number">366</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            result += <span class="hljs-number">365</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 出生当天算第一天 </span><br>    <span class="hljs-keyword">return</span> result-Past(<span class="hljs-number">1777</span>, <span class="hljs-number">4</span>, <span class="hljs-number">30</span>)-Last(year, month, day)+<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//printf(&quot;%d&quot;,To(1791,12,15));</span><br>    <span class="hljs-comment">//printf(&quot;%d&quot;,To(1777,12,31));</span><br>    <span class="hljs-type">int</span> num = <span class="hljs-number">8113</span> - To(<span class="hljs-number">1777</span>,<span class="hljs-number">12</span>,<span class="hljs-number">31</span>);<br>    <span class="hljs-type">int</span> year = <span class="hljs-number">1777</span>;<br>    <span class="hljs-type">int</span> month = <span class="hljs-number">12</span>, day = <span class="hljs-number">31</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-type">int</span> temp = num;<br>        <span class="hljs-keyword">if</span>(IsLeap(year+<span class="hljs-number">1</span>))&#123;<br>            temp -= <span class="hljs-number">366</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            temp -= <span class="hljs-number">365</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(temp &lt; <span class="hljs-number">0</span>)&#123;<br>            year ++;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            year ++;<br>            num = temp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> *monthi;<br>    <span class="hljs-keyword">if</span>(IsLeap(year))&#123;<br>        monthi = &amp;monthd[<span class="hljs-number">0</span>];<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        monthi = &amp;monthn[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(month = <span class="hljs-number">1</span>; month &lt;= <span class="hljs-number">12</span>; month++)&#123;<br>        <span class="hljs-keyword">if</span>(num - monthi[month<span class="hljs-number">-1</span>] &gt; <span class="hljs-number">0</span>)&#123;<br>            num -= monthi[month<span class="hljs-number">-1</span>];<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            day = num;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d-%d-%d&quot;</span>,year,month,day);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>八数码问题</title>
      <link href="/2022/03/10/eight-digital-problems/"/>
      <url>/2022/03/10/eight-digital-problems/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>在3×3的棋盘上，摆有八个棋子，每个棋子上标有1至8的某一数字。棋盘中留有一个空格，空格用0来表示。空格周围的棋子可以移到空格中。要求解的问题是：给出一种初始布局（初始状态）和目标布局，找到一种移动方法，实现从初始布局到目标布局的转变。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>依据题意可以优先考虑<strong>广度优先算法</strong>(BFS)，创建一个队列先将根结点（初始状态）入队，然后再依次取出队列中队首元素，判断队首结点数据是否与目标数据相同。如果不同再，将空格可以移动的几个方向移动后的状态保存到结点后依次入队，重复上述出队操作直至找到目标数据或者队空。</p><h3 id="深度优先算法"><a href="#深度优先算法" class="headerlink" title="深度优先算法"></a>深度优先算法</h3><p><strong>深度优先算法</strong>要优先给出遍历的深度，因为数码移动没有限制，除了深度限制没有其他情况可以结束深度遍历，按照一个顺序（如上下左右）进行遍历，待循环到深度限制后开始回溯，回溯到第一个可以新增子节点的结点即可继续顺序往下遍历，此时需要跳过回溯到此节点次数个遍历方向（如第二次回溯到此结点，此结点能向上下左，第二次回溯到此节点要跳过往上和下的方向而去遍历左方向）。</p><h3 id="启发式搜索-A"><a href="#启发式搜索-A" class="headerlink" title="启发式搜索(A*)"></a>启发式搜索(A*)</h3><p><strong>启发式搜索(A*)</strong> ，在BFS搜索算法中，如果能在搜索的每一步都利用估价函数**f(n)=g(n)+h(n)<strong>对表</strong>(队列)**中的节点进行排序(<strong>g(n)表示从初始结点到任意结点n的实际代价，h(n)表示从结点n到目标点的启发式评估代价</strong>)，则该搜索算法为A*算法。由于估价函数中带有问题自身的启发性信息，因此，A算法又称为启发式搜索算法。对启发式搜索算法，又可根据搜索过程中选择扩展节点的范围，将其分为全局择优搜索算法和局部择优搜索算法。</p><p>在全局择优搜索中，每当需要扩展节点时，总是从表的所有节点中选择一个估价函数值最小的节点进行扩展。其搜索过程可能描述如下：</p><ol><li> 把初始节点originalData放入表中，f(originalData)=g(originalData)+h(originalData)；</li><li> 如果表空则问题无解，如果表非空，取出表(队列)的第一个记录为temp；</li><li> 判断temp是否是目标结点，如果是targetData则输出信息，结束运行；如果不是targetData则判断其是否有可拓展结点；</li><li> 如果其不可拓展，则返回步骤2；</li><li> 如果可拓展，则生成其可拓展的结点，计算每个结点的f(n)，并且设置指针指向其父节点后将其存入表中；</li><li> 根据表中结点的f(n)值进行从小到大排序后返回步骤2；</li></ol><p>eg.</p><p><img src="https://blog.zhuanjie.ltd/img/uploads/2022/03/eg.png" alt="示例"></p><hr><h2 id="代码及运行结果"><a href="#代码及运行结果" class="headerlink" title="代码及运行结果"></a>代码及运行结果</h2><h3 id="广度优先"><a href="#广度优先" class="headerlink" title="广度优先"></a>广度优先</h3><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Author: 转接</span><br><span class="hljs-comment"> * @Date: 2022-03-12 13:10:57</span><br><span class="hljs-comment"> * @LastEditors: 转接</span><br><span class="hljs-comment"> * @LastEditTime: 2022-03-14 12:28:26</span><br><span class="hljs-comment"> * @Description: 八数码问题广度优先求解</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Data</span>&#123;</span><br>    <span class="hljs-type">int</span> data[<span class="hljs-number">9</span>]; <span class="hljs-comment">// 存放数据</span><br>    <span class="hljs-type">int</span> step; <span class="hljs-comment">// 记录步数</span><br>    <span class="hljs-type">int</span> last; <span class="hljs-comment">// 上一步操作 上 下 左 右 1 2 3 4</span><br>    <span class="hljs-type">int</span> *action = new <span class="hljs-type">int</span>[step];<span class="hljs-comment">// 每一步操作 上 下 左 右 1 2 3 4</span><br>&#125; Data;<br><br><span class="hljs-type">int</span> tempPosition[<span class="hljs-number">9</span>][<span class="hljs-number">2</span>] = &#123; <span class="hljs-comment">// 位置 上下左右 </span><br>    &#123;<span class="hljs-number">0</span>, <span class="hljs-number">5</span>&#125;, <span class="hljs-comment">// 0号位 0 1 0 1 = 5</span><br>    &#123;<span class="hljs-number">1</span>, <span class="hljs-number">7</span>&#125;, <span class="hljs-comment">// 1号位 0 1 1 1 = 7</span><br>    &#123;<span class="hljs-number">2</span>, <span class="hljs-number">6</span>&#125;, <span class="hljs-comment">// 2号位 0 1 1 0 = 6</span><br>    &#123;<span class="hljs-number">3</span>, <span class="hljs-number">13</span>&#125;, <span class="hljs-comment">// 3号位 1 1 0 1 = 13</span><br>    &#123;<span class="hljs-number">4</span>, <span class="hljs-number">15</span>&#125;, <span class="hljs-comment">// 4号位 1 1 1 1 = 15</span><br>    &#123;<span class="hljs-number">5</span>, <span class="hljs-number">14</span>&#125;, <span class="hljs-comment">// 5号位 1 1 1 0 = 14</span><br>    &#123;<span class="hljs-number">6</span>, <span class="hljs-number">9</span>&#125;, <span class="hljs-comment">// 6号位 1 0 0 1 = 9</span><br>    &#123;<span class="hljs-number">7</span>, <span class="hljs-number">11</span>&#125;, <span class="hljs-comment">// 7号位 1 0 1 1 = 11</span><br>    &#123;<span class="hljs-number">8</span>, <span class="hljs-number">10</span>&#125;, <span class="hljs-comment">// 8号位 1 0 1 0 = 10</span><br>&#125;;  <span class="hljs-comment">// 上tempPosition[i][1]&gt;=8 下tempPosition[i][1]%8&gt;=4 左tempPosition[i][1]%8%4&gt;=2 右tempPosition[i][1]%8%4%2&gt;=1</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">GetNextAction</span><span class="hljs-params">(Data data)</span>&#123;<br>    <span class="hljs-type">int</span> *temp = data.data;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(temp[i] == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> tp = tempPosition[i][<span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> last = data.last;<br>    <span class="hljs-keyword">if</span>(last == <span class="hljs-number">1</span>)&#123; <span class="hljs-comment">// 上一步向上移动</span><br>        tp = tp - <span class="hljs-number">4</span>; <span class="hljs-comment">// 不让其向下移动</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(last == <span class="hljs-number">2</span>)&#123; <span class="hljs-comment">// 上一步向下移动</span><br>        tp = tp - <span class="hljs-number">8</span>; <span class="hljs-comment">// 不让其向上移动</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(last == <span class="hljs-number">3</span>)&#123; <span class="hljs-comment">// 上一步向左移动</span><br>        tp = tp - <span class="hljs-number">1</span>; <span class="hljs-comment">// 不让其向右移动</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(last == <span class="hljs-number">4</span>)&#123; <span class="hljs-comment">// 上一步向右移动</span><br>        tp = tp - <span class="hljs-number">2</span>; <span class="hljs-comment">// 不让其向左移动</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> tp;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Judge</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr1, <span class="hljs-type">int</span> *arr2)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arr1[i] != arr2[i])&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">(Data data)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)&#123;<br>            <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; data.data[i * <span class="hljs-number">3</span> + j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    Data originalData, targetArray;<br>    <span class="hljs-type">int</span> *arraytest1 = new <span class="hljs-type">int</span>[<span class="hljs-number">9</span>];<br>    <span class="hljs-type">int</span> *arraytest2 = new <span class="hljs-type">int</span>[<span class="hljs-number">9</span>];<br>    originalData.step = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入原始数据：&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; originalData.data[i];<br>    &#125;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入变换后数据：&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; targetArray.data[i];<br>    &#125;<br>    <span class="hljs-comment">// 数组输到arraytest</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        arraytest1[i] = originalData.data[i];<br>        arraytest2[i] = targetArray.data[i];<br>    &#125;<br>    <span class="hljs-comment">// 判断问题是否有解</span><br>    <span class="hljs-type">int</span> cnt1 = <span class="hljs-number">0</span>, cnt2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arraytest1[i] == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br>            <span class="hljs-keyword">if</span>(arraytest1[j] &gt; arraytest1[i])&#123;<br>                cnt1++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arraytest2[i] == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br>            <span class="hljs-keyword">if</span>(arraytest2[j] &gt; arraytest2[i])&#123;<br>                cnt2++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(cnt1%<span class="hljs-number">2</span> != cnt2%<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;E0: 输入有误！问题无解&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 排序</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(arraytest1[i] &lt; arraytest1[j])&#123;<br>                <span class="hljs-type">int</span> temp = arraytest1[i];<br>                arraytest1[i] = arraytest1[j];<br>                arraytest1[j] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(arraytest2[i] &lt; arraytest2[j])&#123;<br>                <span class="hljs-type">int</span> temp = arraytest2[i];<br>                arraytest2[i] = arraytest2[j];<br>                arraytest2[j] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//判断排序后的数组是否相等</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arraytest1[i] != arraytest2[i])&#123;<br>            <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;E1: 输入有误！请检查输入&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    delete[] arraytest1;<br>    delete[] arraytest2;<br>    <span class="hljs-type">clock_t</span> start, finish;<br><span class="hljs-type">double</span> Total_time;<br>    start = clock();<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">queue</span>&lt;Data&gt; q;<br>    q.push(originalData);<br>    <span class="hljs-type">int</span> action = <span class="hljs-number">0</span>;<br>    Data temp;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123; <span class="hljs-comment">// 没必要设置成!q.empty()，只要循环继续就不可避免增加队列中的数据</span><br>        temp = q.front();<br>        q.pop();<br>        <span class="hljs-comment">// std::cout &lt;&lt; &quot;==========当前取出的元素：=========&quot; &lt;&lt; std::endl;</span><br>        <span class="hljs-comment">// Print(temp);</span><br>        <span class="hljs-keyword">if</span>(Judge(temp.data, targetArray.data))&#123;<br>            <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找到了！需要&quot;</span> &lt;&lt; temp.step &lt;&lt; <span class="hljs-string">&quot;步&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; <span class="hljs-comment">// 找到空(0)位置</span><br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(temp.data[i] == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> nextAction = GetNextAction(temp);<br>        <span class="hljs-keyword">if</span>(nextAction&gt;=<span class="hljs-number">8</span>)&#123;<br>            <span class="hljs-type">int</span> arrayList[<span class="hljs-number">9</span>];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; j++)&#123;<br>                arrayList[j] = temp.data[j];<br>            &#125;<br>            arrayList[i] = arrayList[i<span class="hljs-number">-3</span>];<br>            arrayList[i<span class="hljs-number">-3</span>] = <span class="hljs-number">0</span>;<br>            Data nextData;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; j++)&#123;<br>                nextData.data[j] = arrayList[j];<br>            &#125;<br>            nextData.step = temp.step + <span class="hljs-number">1</span>;<br>            nextData.last = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; temp.step; j++)&#123;<br>                nextData.action[j] = temp.action[j];<br>            &#125;<br>            nextData.action[temp.step] = <span class="hljs-number">1</span>;<br>            q.push(nextData);<br>            <span class="hljs-comment">// std::cout &lt;&lt; &quot;上nextData&quot; &lt;&lt; std::endl;</span><br>            <span class="hljs-comment">// Print(nextData);</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(nextAction%<span class="hljs-number">8</span>&gt;=<span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-type">int</span> arrayList[<span class="hljs-number">9</span>];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; j++)&#123;<br>                arrayList[j] = temp.data[j];<br>            &#125;<br>            arrayList[i] = arrayList[i+<span class="hljs-number">3</span>];<br>            arrayList[i+<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>;<br>            Data nextData;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; j++)&#123;<br>                nextData.data[j] = arrayList[j];<br>            &#125;<br>            nextData.step = temp.step + <span class="hljs-number">1</span>;<br>            nextData.last = <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; temp.step; j++)&#123;<br>                nextData.action[j] = temp.action[j];<br>            &#125;<br>            nextData.action[temp.step] = <span class="hljs-number">2</span>;<br>            q.push(nextData);<br>            <span class="hljs-comment">// std::cout &lt;&lt; &quot;下nextData&quot; &lt;&lt; std::endl;</span><br>            <span class="hljs-comment">// Print(nextData);</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(nextAction%<span class="hljs-number">8</span>%<span class="hljs-number">4</span>&gt;=<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-type">int</span> arrayList[<span class="hljs-number">9</span>];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; j++)&#123;<br>                arrayList[j] = temp.data[j];<br>            &#125;<br>            arrayList[i] = arrayList[i<span class="hljs-number">-1</span>];<br>            arrayList[i<span class="hljs-number">-1</span>] = <span class="hljs-number">0</span>;<br>            Data nextData;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; j++)&#123;<br>                nextData.data[j] = arrayList[j];<br>            &#125;<br>            nextData.step = temp.step + <span class="hljs-number">1</span>;<br>            nextData.last = <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; temp.step; j++)&#123;<br>                nextData.action[j] = temp.action[j];<br>            &#125;<br>            nextData.action[temp.step] = <span class="hljs-number">3</span>;<br>            q.push(nextData);<br>            <span class="hljs-comment">// std::cout &lt;&lt; &quot;左nextData&quot; &lt;&lt; std::endl;</span><br>            <span class="hljs-comment">// Print(nextData);</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(nextAction%<span class="hljs-number">8</span>%<span class="hljs-number">4</span>%<span class="hljs-number">2</span>&gt;=<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-type">int</span> arrayList[<span class="hljs-number">9</span>];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; j++)&#123;<br>                arrayList[j] = temp.data[j];<br>            &#125;<br>            arrayList[i] = arrayList[i+<span class="hljs-number">1</span>];<br>            arrayList[i+<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>            Data nextData;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; j++)&#123;<br>                nextData.data[j] = arrayList[j];<br>            &#125;<br>            nextData.step = temp.step + <span class="hljs-number">1</span>;<br>            nextData.last = <span class="hljs-number">4</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; temp.step; j++)&#123;<br>                nextData.action[j] = temp.action[j];<br>            &#125;<br>            nextData.action[temp.step] = <span class="hljs-number">4</span>;<br>            q.push(nextData);<br>            <span class="hljs-comment">// std::cout &lt;&lt; &quot;右nextData&quot; &lt;&lt; std::endl;</span><br>            <span class="hljs-comment">// Print(nextData);</span><br>        &#125;<br>        <br>    &#125;<br>    finish = clock();<br>    <span class="hljs-comment">// 输出结果</span><br>    <span class="hljs-type">int</span> steps = temp.step;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;步骤为：&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-type">int</span> *result = new <span class="hljs-type">int</span>[temp.step];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; temp.step; i++)&#123;<br>        result[i] = temp.action[i];<br>    &#125;<br>    Print(originalData);<br>    <span class="hljs-type">int</span> tempArray[<span class="hljs-number">9</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        tempArray[i] = originalData.data[i];<br>    &#125;<br>    <span class="hljs-type">int</span> position;<br>    <span class="hljs-keyword">for</span>(position = <span class="hljs-number">0</span>; position &lt; <span class="hljs-number">9</span>; position++)&#123;<br>        <span class="hljs-keyword">if</span>(tempArray[position] == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; temp.step; i++)&#123;<br>        <span class="hljs-keyword">if</span>(result[i] == <span class="hljs-number">1</span>)&#123;<br>            tempArray[position] = tempArray[position<span class="hljs-number">-3</span>];<br>            tempArray[position<span class="hljs-number">-3</span>] = <span class="hljs-number">0</span>;<br>            position -= <span class="hljs-number">3</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(result[i] == <span class="hljs-number">2</span>)&#123;<br>            tempArray[position] = tempArray[position+<span class="hljs-number">3</span>];<br>            tempArray[position+<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>;<br>            position += <span class="hljs-number">3</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(result[i] == <span class="hljs-number">3</span>)&#123;<br>            tempArray[position] = tempArray[position<span class="hljs-number">-1</span>];<br>            tempArray[position<span class="hljs-number">-1</span>] = <span class="hljs-number">0</span>;<br>            position -= <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(result[i] == <span class="hljs-number">4</span>)&#123;<br>            tempArray[position] = tempArray[position+<span class="hljs-number">1</span>];<br>            tempArray[position+<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>            position += <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;E2: 计算错误！请重试&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">3</span>; k++)&#123;<br>                <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; tempArray[j*<span class="hljs-number">3</span>+k] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>            &#125;<br>            <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>        &#125;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    &#125;<br>    delete[] result;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; steps &lt;&lt; <span class="hljs-string">&quot;步，搜索用时：&quot;</span> &lt;&lt; (<span class="hljs-type">double</span>)(finish - start) / CLOCKS_PER_SEC &lt;&lt; <span class="hljs-string">&quot;s&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="C-运行结果"><a href="#C-运行结果" class="headerlink" title="C++运行结果"></a>C++运行结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell">请输入原始数据：<br>1 2 3<br>0 4 5<br>6 7 8<br>请输入变换后数据：<br>0 2 3<br>1 7 5<br>4 6 8<br>找到了！需要5步<br>步骤为：<br>1 2 3<br>0 4 5<br>6 7 8<br><br>1 2 3<br>4 0 5<br>6 7 8<br><br>1 2 3<br>4 7 5<br>6 0 8<br><br>1 2 3<br>4 7 5<br>0 6 8<br><br>1 2 3<br>0 7 5<br>4 6 8<br><br>0 2 3<br>1 7 5<br>4 6 8<br><br>5步，搜索用时：0.001s<br></code></pre></td></tr></table></figure><hr><h3 id="深度优先"><a href="#深度优先" class="headerlink" title="深度优先"></a>深度优先</h3><h4 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h4><blockquote><p>ATT: 此段代码存在bug，数据规模过大可能出现计算失败，空位在中间的时候为了节省内存可能不是最优先算法而将其先向上移动一格再进行计算</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Author: 转接</span><br><span class="hljs-comment"> * @Date: 2022-03-10 12:24:48</span><br><span class="hljs-comment"> * @LastEditors: 转接</span><br><span class="hljs-comment"> * @LastEditTime: 2022-03-14 12:22:57</span><br><span class="hljs-comment"> * @Description: 八数码问题深度优先求解</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-comment">// 数据</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">data</span>&#123;<br>    <span class="hljs-type">int</span> data[<span class="hljs-number">9</span>];<br>    <span class="hljs-type">int</span> step;<br>&#125;Data;<br><br><span class="hljs-comment">// 链树</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">NodeTag</span>&#123;<br>    Data data;<br>    <span class="hljs-type">int</span> childNum;<br>    NodeTag *father; <span class="hljs-comment">// 父结点</span><br>    NodeTag *child1; <span class="hljs-comment">// 子结点1</span><br>    NodeTag *child2; <span class="hljs-comment">// 子结点2</span><br>    NodeTag *child3; <span class="hljs-comment">// 子结点3</span><br>    <span class="hljs-type">int</span> lastFunction = <span class="hljs-number">0</span>; <span class="hljs-comment">// 上一个功能 上下左右 1234</span><br>    <span class="hljs-type">int</span> skip = <span class="hljs-number">0</span>; <span class="hljs-comment">// 回溯到该结点的使用次数</span><br>    <span class="hljs-type">int</span> back = <span class="hljs-number">0</span>; <span class="hljs-comment">// 是否回溯到该结点过</span><br>&#125;NodeTag, *NodeTree;<br><br><span class="hljs-comment">// 链表存储回溯结点</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">NodeLink</span>&#123;<br>    NodeTree node; <span class="hljs-comment">// 溯结点</span><br>    NodeLink *next;<br>&#125;NodeLink, *NodeLinkList;<br><br><span class="hljs-type">int</span> childNum[] = &#123; <span class="hljs-comment">// 子结点数量</span><br>        <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<br>        <span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<br>        <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        1,2,3,</span><br><span class="hljs-comment">        4,5,6,</span><br><span class="hljs-comment">        7,8,9</span><br><span class="hljs-comment">        */</span><br>    &#125;;<br><span class="hljs-type">int</span> tempPosition[<span class="hljs-number">9</span>][<span class="hljs-number">2</span>] = &#123; <span class="hljs-comment">// 位置 上下左右 </span><br>    &#123;<span class="hljs-number">0</span>, <span class="hljs-number">5</span>&#125;, <span class="hljs-comment">// 0号位 0 1 0 1 = 5</span><br>    &#123;<span class="hljs-number">1</span>, <span class="hljs-number">7</span>&#125;, <span class="hljs-comment">// 1号位 0 1 1 1 = 7</span><br>    &#123;<span class="hljs-number">2</span>, <span class="hljs-number">6</span>&#125;, <span class="hljs-comment">// 2号位 0 1 1 0 = 6</span><br>    &#123;<span class="hljs-number">3</span>, <span class="hljs-number">13</span>&#125;, <span class="hljs-comment">// 3号位 1 1 0 1 = 13</span><br>    &#123;<span class="hljs-number">4</span>, <span class="hljs-number">15</span>&#125;, <span class="hljs-comment">// 4号位 1 1 1 1 = 15</span><br>    &#123;<span class="hljs-number">5</span>, <span class="hljs-number">14</span>&#125;, <span class="hljs-comment">// 5号位 1 1 1 0 = 14</span><br>    &#123;<span class="hljs-number">6</span>, <span class="hljs-number">9</span>&#125;, <span class="hljs-comment">// 6号位 1 0 0 1 = 9</span><br>    &#123;<span class="hljs-number">7</span>, <span class="hljs-number">11</span>&#125;, <span class="hljs-comment">// 7号位 1 0 1 1 = 11</span><br>    &#123;<span class="hljs-number">8</span>, <span class="hljs-number">10</span>&#125;, <span class="hljs-comment">// 8号位 1 0 1 0 = 10</span><br>&#125;;  <span class="hljs-comment">// 上tempPosition[i][1]&gt;=8 下tempPosition[i][1]%8&gt;=4 左tempPosition[i][1]%8%4&gt;=2 右tempPosition[i][1]%8%4%2&gt;=1</span><br><br><span class="hljs-comment">// 初始化树 将原始数据originalData存入第一个结点</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">InitTree</span><span class="hljs-params">(NodeTree &amp;tree, Data originalData)</span></span>&#123;<br>    tree = <span class="hljs-keyword">new</span> NodeTag;<br>    tree-&gt;data = originalData;<br>    tree-&gt;childNum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(tree-&gt;data.data[i] == <span class="hljs-number">0</span>)&#123;<br>            tree-&gt;childNum = childNum[i]+<span class="hljs-number">1</span>; <span class="hljs-comment">// 设置子结点数量</span><br>        &#125;<br>    &#125;<br>    tree-&gt;father = <span class="hljs-literal">NULL</span>;<br>    tree-&gt;child1 = <span class="hljs-literal">NULL</span>;<br>    tree-&gt;child2 = <span class="hljs-literal">NULL</span>;<br>    tree-&gt;child3 = <span class="hljs-literal">NULL</span>;<br>    tree-&gt;lastFunction = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> i<span class="hljs-number">-1</span>; <span class="hljs-comment">// 将0的位置返回</span><br>&#125;<br><br><span class="hljs-comment">// 插入结点到树</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">InsertNode</span><span class="hljs-params">(NodeTree &amp;tree, NodeTree &amp;node)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(tree-&gt;childNum == <span class="hljs-number">1</span>)&#123; <span class="hljs-comment">// 只能有一个子结点的结点</span><br>        <span class="hljs-keyword">if</span>(tree-&gt;child1 == <span class="hljs-literal">NULL</span>)&#123;<br>            tree-&gt;child1 = node;<br>            node-&gt;father = tree;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;E2.1:数据规模错误&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tree-&gt;childNum == <span class="hljs-number">2</span>)&#123; <span class="hljs-comment">// 只能有两个子结点的结点</span><br>        <span class="hljs-keyword">if</span>(tree-&gt;child1 == <span class="hljs-literal">NULL</span>)&#123;<br>            tree-&gt;child1 = node;<br>            node-&gt;father = tree;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tree-&gt;child2 == <span class="hljs-literal">NULL</span>)&#123;<br>            tree-&gt;child2 = node;<br>            node-&gt;father = tree;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;E2.2:数据规模错误&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tree-&gt;childNum == <span class="hljs-number">3</span>)&#123; <span class="hljs-comment">// 只能有三个子结点的结点</span><br>        <span class="hljs-keyword">if</span>(tree-&gt;child1 == <span class="hljs-literal">NULL</span>)&#123;<br>            tree-&gt;child1 = node;<br>            node-&gt;father = tree;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tree-&gt;child2 == <span class="hljs-literal">NULL</span>)&#123;<br>            tree-&gt;child2 = node;<br>            node-&gt;father = tree;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tree-&gt;child3 == <span class="hljs-literal">NULL</span>)&#123;<br>            tree-&gt;child3 = node;<br>            node-&gt;father = tree;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;E2.3:数据规模错误&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 初始化链表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitLink</span><span class="hljs-params">(NodeLinkList &amp;link)</span></span>&#123;<br>    link = <span class="hljs-keyword">new</span> NodeLink;<br>    link-&gt;node = <span class="hljs-literal">NULL</span>;<br>    link-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">// 插入结点到链表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InsertLink</span><span class="hljs-params">(NodeLinkList &amp;link, NodeTree &amp;node)</span></span>&#123;<br>    NodeLinkList temp = link;<br>    <span class="hljs-keyword">while</span>(temp-&gt;next != <span class="hljs-literal">NULL</span>)&#123;<br>        temp = temp-&gt;next;<br>    &#125;<br>    temp-&gt;next = <span class="hljs-keyword">new</span> NodeLink;<br>    temp-&gt;next-&gt;node = node;<br>    temp-&gt;next-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">// 在链表中查找结点是否存在</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SearchLink</span><span class="hljs-params">(NodeLinkList &amp;link, NodeTree &amp;node)</span></span>&#123;<br>    NodeLinkList temp = link;<br>    <span class="hljs-keyword">while</span>(temp-&gt;next != <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">if</span>(temp-&gt;next-&gt;node == node)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        temp = temp-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断两Data中的数据是否相等</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">judge</span><span class="hljs-params">(Data data1, Data data2)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(data1.data[i] != data2.data[i])&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 规范输出结点中的数据</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(NodeTree tempNode)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)&#123;<br>            std::cout &lt;&lt; tempNode-&gt;data.data[i*<span class="hljs-number">3</span>+j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        std::cout &lt;&lt; std::endl;<br>    &#125;<br>    std::cout &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Data originalData, targetArray; <span class="hljs-comment">// 原始数据 和 目标数据</span><br>    <span class="hljs-type">int</span> *arraytest1 = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">9</span>];<br>    <span class="hljs-type">int</span> *arraytest2 = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">9</span>];<br>    originalData.step = <span class="hljs-number">0</span>; <span class="hljs-comment">// 初始化步数</span><br>    targetArray.step = <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> state = <span class="hljs-number">1</span>; <span class="hljs-comment">// 程序错误状态</span><br>    <span class="hljs-type">int</span> middle = <span class="hljs-number">0</span>; <span class="hljs-comment">// 判断0是否为中间结点</span><br>    <span class="hljs-type">int</span> deep;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;请输入原始数据：&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        std::cin &gt;&gt; originalData.data[i];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(originalData.data[<span class="hljs-number">4</span>] == <span class="hljs-number">0</span>)&#123;<br>        middle = <span class="hljs-number">1</span>;<br>        originalData.data[<span class="hljs-number">4</span>] = originalData.data[<span class="hljs-number">1</span>];<br>        originalData.data[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    &#125;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;请输入变换后数据：&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        std::cin &gt;&gt; targetArray.data[i];<br>    &#125;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;请输入搜索深度：&quot;</span> &lt;&lt; std::endl;<br>    std::cin &gt;&gt; deep;<br>    <span class="hljs-type">clock_t</span> start, finish;<br><span class="hljs-type">double</span> Total_time;<br>    start = <span class="hljs-built_in">clock</span>();<br>    <span class="hljs-comment">// 数组输到arraytest</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        arraytest1[i] = originalData.data[i];<br>        arraytest2[i] = targetArray.data[i];<br>    &#125;<br>    <span class="hljs-comment">// 判断问题是否有解</span><br>    <span class="hljs-type">int</span> cnt1 = <span class="hljs-number">0</span>, cnt2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arraytest1[i] == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br>            <span class="hljs-keyword">if</span>(arraytest1[j] &gt; arraytest1[i])&#123;<br>                cnt1++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arraytest2[i] == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br>            <span class="hljs-keyword">if</span>(arraytest2[j] &gt; arraytest2[i])&#123;<br>                cnt2++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(cnt1%<span class="hljs-number">2</span> != cnt2%<span class="hljs-number">2</span>)&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;E0: 输入有误！问题无解&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 排序</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(arraytest1[i] &lt; arraytest1[j])&#123;<br>                <span class="hljs-type">int</span> temp = arraytest1[i];<br>                arraytest1[i] = arraytest1[j];<br>                arraytest1[j] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(arraytest2[i] &lt; arraytest2[j])&#123;<br>                <span class="hljs-type">int</span> temp = arraytest2[i];<br>                arraytest2[i] = arraytest2[j];<br>                arraytest2[j] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//判断排序后的数组是否相等</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arraytest1[i] != arraytest2[i])&#123;<br>            state = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(arraytest1);<br>    <span class="hljs-built_in">free</span>(arraytest2);<br>    NodeTree tree;<br>    <span class="hljs-type">int</span> tempNum = <span class="hljs-built_in">InitTree</span>(tree, originalData);<br>    <span class="hljs-keyword">if</span>(tree-&gt;childNum == <span class="hljs-number">0</span> &amp;&amp; state)&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;E1:数据输入有误&quot;</span> &lt;&lt; std::endl;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;输入的数据要用表示空位，请检查输入！&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    NodeTree tempNode = tree; <span class="hljs-comment">// 临时当前结点</span><br>    NodeLinkList link; <span class="hljs-comment">// 创建链表用来存储回溯结点</span><br>    <span class="hljs-built_in">InitLink</span>(link);<br>    <span class="hljs-type">int</span> step = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-comment">// 判断是否到达目标状态</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(tempNode-&gt;data, targetArray) == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">if</span>(middle)&#123;<br>                tempNode-&gt;data.step++;<br>            &#125;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;搜索完成，步数为：&quot;</span> &lt;&lt; tempNode-&gt;data.step &lt;&lt; std::endl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// 开始搜索</span><br>        <span class="hljs-comment">// 空格(0)向上移动</span><br>        <span class="hljs-keyword">if</span>(tempNode-&gt;data.step&lt;deep &amp;&amp; tempPosition[tempNum][<span class="hljs-number">1</span>] &gt;= <span class="hljs-number">8</span> &amp;&amp; tempNode-&gt;lastFunction != <span class="hljs-number">4</span> &amp;&amp; (tempNode-&gt;back == <span class="hljs-number">0</span>  --tempNode-&gt;skip &lt;= <span class="hljs-number">0</span>))&#123; <br>            <span class="hljs-comment">// 保证深度未达到目标深度，能向上交换的同时上一次不是向下移动，且不是跳过状态</span><br>            Data tempData;<br>            tempData.step = tempNode-&gt;data.step + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123; <span class="hljs-comment">// 复制</span><br>                tempData.data[i] = tempNode-&gt;data.data[i];<br>            &#125;<br>            <span class="hljs-comment">// 交换</span><br>            tempData.data[tempNum] = tempData.data[tempNum<span class="hljs-number">-3</span>];<br>            tempData.data[tempNum<span class="hljs-number">-3</span>] = <span class="hljs-number">0</span>;<br>            tempNum = tempNum<span class="hljs-number">-3</span>; <span class="hljs-comment">// 标记交换后的位置</span><br>            NodeTree node = <span class="hljs-keyword">new</span> NodeTag;<br>            node-&gt;data = tempData;<br>            node-&gt;childNum = childNum[tempNum];<br>            node-&gt;father = tempNode;<br>            node-&gt;child1 = <span class="hljs-literal">NULL</span>;<br>            node-&gt;child2 = <span class="hljs-literal">NULL</span>;<br>            node-&gt;child3 = <span class="hljs-literal">NULL</span>;<br>            node-&gt;lastFunction = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">InsertNode</span>(tempNode, node))&#123;<br>                std::cout &lt;&lt; <span class="hljs-string">&quot;查找失败！尝试增加查找深度!&quot;</span> &lt;&lt; std::endl;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            tempNode = node;<br>            <br>        &#125;<br>        <span class="hljs-comment">// 下</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tempNode-&gt;data.step&lt;deep &amp;&amp; tempPosition[tempNum][<span class="hljs-number">1</span>]%<span class="hljs-number">8</span>&gt;=<span class="hljs-number">4</span> &amp;&amp; tempNode-&gt;lastFunction != <span class="hljs-number">1</span> &amp;&amp; (tempNode-&gt;back == <span class="hljs-number">0</span>  --tempNode-&gt;skip &lt;= <span class="hljs-number">0</span>))&#123;<br>            <span class="hljs-comment">// 保证深度未达到目标深度，能向下交换的同时上一次不是向上移动，且不是跳过状态</span><br>            Data tempData;<br>            tempData.step = tempNode-&gt;data.step + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123; <span class="hljs-comment">// 复制</span><br>                tempData.data[i] = tempNode-&gt;data.data[i];<br>            &#125;<br>            <span class="hljs-comment">// 交换</span><br>            tempData.data[tempNum] = tempData.data[tempNum+<span class="hljs-number">3</span>];<br>            tempData.data[tempNum+<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>;<br>            tempNum = tempNum+<span class="hljs-number">3</span>; <span class="hljs-comment">// 标记交换后的位置</span><br>            NodeTree node = <span class="hljs-keyword">new</span> NodeTag;<br>            node-&gt;data = tempData;<br>            node-&gt;childNum = childNum[tempNum];<br>            node-&gt;father = tempNode;<br>            node-&gt;child1 = <span class="hljs-literal">NULL</span>;<br>            node-&gt;child2 = <span class="hljs-literal">NULL</span>;<br>            node-&gt;child3 = <span class="hljs-literal">NULL</span>;<br>            node-&gt;lastFunction = <span class="hljs-number">4</span>;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">InsertNode</span>(tempNode, node))&#123;<br>                std::cout &lt;&lt; <span class="hljs-string">&quot;查找失败！尝试增加查找深度!&quot;</span> &lt;&lt; std::endl;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            tempNode = node;<br>        &#125;<br>        <span class="hljs-comment">// 左</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tempNode-&gt;data.step&lt;deep &amp;&amp; tempPosition[tempNum][<span class="hljs-number">1</span>]%<span class="hljs-number">8</span>%<span class="hljs-number">4</span>&gt;=<span class="hljs-number">2</span> &amp;&amp; tempNode-&gt;lastFunction != <span class="hljs-number">3</span> &amp;&amp; (tempNode-&gt;back == <span class="hljs-number">0</span>  --tempNode-&gt;skip &lt;= <span class="hljs-number">0</span>))&#123; <br>            <span class="hljs-comment">// 保证深度未达到目标深度，能向左交换的同时上一次不是向右移动，且不是跳过状态</span><br>            Data tempData;<br>            tempData.step = tempNode-&gt;data.step + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123; <span class="hljs-comment">// 复制</span><br>                tempData.data[i] = tempNode-&gt;data.data[i];<br>            &#125;<br>            <span class="hljs-comment">// 交换</span><br>            tempData.data[tempNum] = tempData.data[tempNum<span class="hljs-number">-1</span>];<br>            tempData.data[tempNum<span class="hljs-number">-1</span>] = <span class="hljs-number">0</span>;<br>            tempNum = tempNum<span class="hljs-number">-1</span>; <span class="hljs-comment">// 标记交换后的位置</span><br>            NodeTree node = <span class="hljs-keyword">new</span> NodeTag;<br>            node-&gt;data = tempData;<br>            node-&gt;childNum = childNum[tempNum];<br>            node-&gt;father = tempNode;<br>            node-&gt;child1 = <span class="hljs-literal">NULL</span>;<br>            node-&gt;child2 = <span class="hljs-literal">NULL</span>;<br>            node-&gt;child3 = <span class="hljs-literal">NULL</span>;<br>            node-&gt;lastFunction = <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">InsertNode</span>(tempNode, node))&#123;<br>                std::cout &lt;&lt; <span class="hljs-string">&quot;查找失败！尝试增加查找深度!&quot;</span> &lt;&lt; std::endl;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            tempNode = node;<br>        &#125;<br>        <span class="hljs-comment">// 右</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tempNode-&gt;data.step&lt;deep &amp;&amp; tempPosition[tempNum][<span class="hljs-number">1</span>]%<span class="hljs-number">8</span>%<span class="hljs-number">4</span>%<span class="hljs-number">2</span>&gt;=<span class="hljs-number">1</span> &amp;&amp; tempNode-&gt;lastFunction != <span class="hljs-number">2</span> &amp;&amp; (tempNode-&gt;back == <span class="hljs-number">0</span>  --tempNode-&gt;skip &lt;= <span class="hljs-number">0</span>))&#123;<br>            <span class="hljs-comment">// 保证深度未达到目标深度，能向右交换的同时上一次不是向左移动，且不是跳过状态</span><br>            Data tempData;<br>            tempData.step = tempNode-&gt;data.step + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123; <span class="hljs-comment">// 复制</span><br>                tempData.data[i] = tempNode-&gt;data.data[i];<br>            &#125;<br>            <span class="hljs-comment">// 交换</span><br>            tempData.data[tempNum] = tempData.data[tempNum+<span class="hljs-number">1</span>];<br>            tempData.data[tempNum+<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>            tempNum = tempNum+<span class="hljs-number">1</span>; <span class="hljs-comment">// 标记交换后的位置</span><br>            NodeTree node = <span class="hljs-keyword">new</span> NodeTag;<br>            node-&gt;data = tempData;<br>            node-&gt;childNum = childNum[tempNum];<br>            node-&gt;father = tempNode;<br>            node-&gt;child1 = <span class="hljs-literal">NULL</span>;<br>            node-&gt;child2 = <span class="hljs-literal">NULL</span>;<br>            node-&gt;child3 = <span class="hljs-literal">NULL</span>;<br>            node-&gt;lastFunction = <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">InsertNode</span>(tempNode, node))&#123;<br>                std::cout &lt;&lt; <span class="hljs-string">&quot;查找失败！尝试增加查找深度!&quot;</span> &lt;&lt; std::endl;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            tempNode = node;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">do</span>&#123;<br>                tempNode = tempNode-&gt;father;<br>                <span class="hljs-keyword">if</span>(tempNode-&gt;childNum == <span class="hljs-number">2</span> &amp;&amp; tempNode-&gt;child2 == <span class="hljs-literal">NULL</span>)&#123;<br>                    <span class="hljs-comment">// 将结点插入链表</span><br>                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">SearchLink</span>(link, tempNode) == <span class="hljs-number">0</span>)&#123;<br>                        <span class="hljs-built_in">InsertLink</span>(link, tempNode);<br>                        tempNode-&gt;skip++;<br>                    &#125;<br>                    tempNode-&gt;skip++;<br>                    tempNode-&gt;back = <span class="hljs-number">1</span>;<br>                    step--;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tempNode-&gt;childNum == <span class="hljs-number">3</span> &amp;&amp; tempNode-&gt;child3 == <span class="hljs-literal">NULL</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">SearchLink</span>(link, tempNode) == <span class="hljs-number">0</span>)&#123;<br>                        <span class="hljs-built_in">InsertLink</span>(link, tempNode);<br>                        tempNode-&gt;skip++;<br>                    &#125;<br>                    tempNode-&gt;skip++;<br>                    tempNode-&gt;back = <span class="hljs-number">1</span>;<br>                    step--;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>            &#125;<span class="hljs-keyword">while</span>(tempNode != tree);<br>            <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>                <span class="hljs-keyword">if</span>(tempNode-&gt;data.data[i] == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            tempNum = i;<br>        &#125;<br>        <span class="hljs-comment">// std::cout &lt;&lt; &quot;step: &quot; &lt;&lt; step &lt;&lt; std::endl;</span><br>        <span class="hljs-comment">// Print(tempNode);</span><br>    &#125;<br>    finish = <span class="hljs-built_in">clock</span>();<br>    <span class="hljs-type">int</span> steps = tempNode-&gt;data.step;<br>    <span class="hljs-comment">// 判断是否搜索完成将结点压入栈中</span><br>    std::stack &lt;NodeTree&gt; tempStack;<br>    <span class="hljs-keyword">while</span>(tempNode != tree)&#123;<br>        tempStack.<span class="hljs-built_in">push</span>(tempNode);<br>        tempNode = tempNode-&gt;father;<br>    &#125;<br>    <span class="hljs-comment">// 打印输出栈</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;输出步骤：&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">if</span>(middle)&#123; <span class="hljs-comment">//如果最开始空格(0)位置在中间</span><br>        tree-&gt;data.data[<span class="hljs-number">1</span>]=tree-&gt;data.data[<span class="hljs-number">4</span>];<br>        tree-&gt;data.data[<span class="hljs-number">4</span>]=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">Print</span>(tree);<br>        tree-&gt;data.data[<span class="hljs-number">4</span>]=tree-&gt;data.data[<span class="hljs-number">1</span>];<br>        tree-&gt;data.data[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">Print</span>(tree);<br>    <span class="hljs-keyword">while</span>(!tempStack.<span class="hljs-built_in">empty</span>())&#123;<br>        tempNode = tempStack.<span class="hljs-built_in">top</span>();<br>        tempStack.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-built_in">Print</span>(tempNode);<br>    &#125;<br>    std::cout &lt;&lt; steps &lt;&lt; <span class="hljs-string">&quot;步，搜索用时：&quot;</span> &lt;&lt; (<span class="hljs-type">double</span>)(finish - start) / CLOCKS_PER_SEC &lt;&lt; <span class="hljs-string">&quot;s&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="C-运行结果-1"><a href="#C-运行结果-1" class="headerlink" title="C++运行结果"></a>C++运行结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">请输入原始数据：<br>1 2 3<br>4 5 6<br>7 8 0  <br>请输入变换后数据：<br>1 2 3<br>4 5 6<br>0 7 8<br>请输入搜索深度：<br>3<br>搜索完成，步数为：2<br>输出步骤：<br>1 2 3<br>4 5 6<br>7 8 0<br><br>1 2 3<br>4 5 6<br>7 0 8<br><br>1 2 3<br>4 5 6<br>0 7 8<br><br>2步，搜索用时：0.002s<br></code></pre></td></tr></table></figure><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Author: 转接</span><br><span class="hljs-string">Date: 2022-03-14 12:41:19</span><br><span class="hljs-string">LastEditors: 转接</span><br><span class="hljs-string">LastEditTime: 2022-03-14 14:16:59</span><br><span class="hljs-string">Description: 八数码问题深度优先求解</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> copy<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-comment"># 找到空位</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">local</span>(<span class="hljs-params">tempData</span>):<br>    a = np.array(tempData)<br>    i,j = np.where(a == <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> i[<span class="hljs-number">0</span>],j[<span class="hljs-number">0</span>]<br><br><span class="hljs-comment"># 向上移动</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ToUp</span>(<span class="hljs-params">tempData</span>):<br>    i,j =  local(tempData)<br>    arr = copy.deepcopy(tempData)<br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(tempData)-<span class="hljs-number">1</span>):<br>        arr[i][j],arr[i-<span class="hljs-number">1</span>][j] = arr[i-<span class="hljs-number">1</span>][j],arr[i][j]       <br>        <span class="hljs-keyword">return</span> arr<br><br><span class="hljs-comment"># 向下移动</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ToDown</span>(<span class="hljs-params">tempData</span>):<br>    i,j =  local(tempData)<br>    arr = copy.deepcopy(tempData)<br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> (<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(tempData)-<span class="hljs-number">2</span>):<br>        arr[i][j],arr[i+<span class="hljs-number">1</span>][j] = arr[i+<span class="hljs-number">1</span>][j],arr[i][j]<br>        <span class="hljs-keyword">return</span> arr<br><br><span class="hljs-comment"># 向左移动</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ToRight</span>(<span class="hljs-params">tempData</span>):<br>    i,j =  local(tempData)<br>    arr = copy.deepcopy(tempData)<br>    <span class="hljs-keyword">if</span> j <span class="hljs-keyword">in</span> (<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(tempData)-<span class="hljs-number">2</span>):<br>        arr[i][j], arr[i][j+<span class="hljs-number">1</span>] = arr[i][j+<span class="hljs-number">1</span>],arr[i][j]<br>        <span class="hljs-keyword">return</span> arr<br><span class="hljs-comment"># 向右移动</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ToLeft</span>(<span class="hljs-params">tempData</span>):<br>    i,j =  local(tempData)<br>    arr = copy.deepcopy(tempData)<br>    <span class="hljs-keyword">if</span> j <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(tempData)-<span class="hljs-number">1</span>):<br>        arr[i][j],arr[i][j-<span class="hljs-number">1</span>] = arr[i][j-<span class="hljs-number">1</span>],arr[i][j]<br>    <span class="hljs-keyword">return</span> arr<br><br><span class="hljs-comment"># 格式化输出</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">OutPrint</span>(<span class="hljs-params">tempData</span>):<br>    <span class="hljs-keyword">for</span> arr <span class="hljs-keyword">in</span> tempData:<br>        <span class="hljs-built_in">print</span>(arr[<span class="hljs-number">0</span>],arr[<span class="hljs-number">1</span>],arr[<span class="hljs-number">2</span>])<br>    <span class="hljs-built_in">print</span>()<br><br><span class="hljs-comment"># 定义一个节点类用于存放必要的数据</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,data,level,parent</span>):<br>        self.data=data<br>        self.level=level<br>        self.parent = parent<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 输入数据</span><br>    originalData = [<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入原始数据：\n&quot;</span>).split())), <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())), <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))]<br>    targetArray = [<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入变换后数据：\n&quot;</span>).split())), <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())), <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))]<br>    list1 = []<br>    list2 = []<br>    <span class="hljs-comment"># 数组输到list</span><br>    <span class="hljs-keyword">for</span> arr <span class="hljs-keyword">in</span> originalData:<br>        list1.append(arr[<span class="hljs-number">0</span>])<br>        list1.append(arr[<span class="hljs-number">1</span>])<br>        list1.append(arr[<span class="hljs-number">2</span>])<br>    <span class="hljs-keyword">for</span> arr <span class="hljs-keyword">in</span> targetArray:<br>        list2.append(arr[<span class="hljs-number">0</span>])<br>        list2.append(arr[<span class="hljs-number">1</span>])<br>        list2.append(arr[<span class="hljs-number">2</span>])<br>    cnt1 = <span class="hljs-number">0</span><br>    cnt2 = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">9</span>):<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>):<br>            <span class="hljs-keyword">if</span> i &lt; list1[j]:<br>                cnt1 = cnt1 + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">9</span>):<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>):<br>            <span class="hljs-keyword">if</span> i &lt; list2[j]:<br>                cnt2 = cnt2 + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> cnt1%<span class="hljs-number">2</span> != cnt2%<span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;E0: 输入有误！问题无解&quot;</span>)<br>        exit(<span class="hljs-number">0</span>)<br>    list1.sort()<br>    list2.sort()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">0</span>, <span class="hljs-number">9</span>):<br>        <span class="hljs-keyword">if</span> list1[i] != list2[i]:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;E1: 输入有误！请检查输入&quot;</span>)<br>            exit(<span class="hljs-number">0</span>)<br>    Node0 = Node(originalData,<span class="hljs-number">0</span>,<span class="hljs-string">&quot;None&quot;</span>)<br>    deep_level = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入搜索深度：&quot;</span>))<br>    open_ = [Node0]<br>    close = []<br>    step = <span class="hljs-number">0</span><br>    steps = <span class="hljs-number">0</span><br>    start = datetime.now()<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(open_) &gt; <span class="hljs-number">0</span>:<br>        step = step + <span class="hljs-number">1</span><br>        n = open_.pop(<span class="hljs-number">0</span>)<br>        close.append(n)<br>        <span class="hljs-comment"># 找到结果，则输出其最优路径</span><br>        <span class="hljs-keyword">if</span> n.data == targetArray:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;搜索完毕！步骤为：&#x27;</span>)<br>            result = []<br>            result.append(n)<br>            <span class="hljs-keyword">while</span> n.parent!=<span class="hljs-string">&quot;None&quot;</span>:<br>                result.append(n.parent)<br>                n = n.parent<br>            steps = <span class="hljs-built_in">len</span>(result)-<span class="hljs-number">1</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(result)):<br>                result_0 = result.pop(-<span class="hljs-number">1</span>)<br>                OutPrint(result_0.data)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> n.level&lt;=<span class="hljs-built_in">int</span>(deep_level):<br>                local(n.data)<br>                Up = ToUp(n.data)<br>                <span class="hljs-keyword">if</span> Up <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [open_[i].data <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(open_))] <span class="hljs-keyword">and</span> Up <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [close[i].data <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(close))] <span class="hljs-keyword">and</span> Up <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                    Node0 = Node(Up,n.level+<span class="hljs-number">1</span>,n)<br>                    open_.insert(<span class="hljs-number">0</span>,Node0)<br><br>                Down = ToDown(n.data)<br>                <span class="hljs-keyword">if</span> Down <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [open_[i].data <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(open_))] <span class="hljs-keyword">and</span> Down <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [close[i].data <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(close))] <span class="hljs-keyword">and</span> Down <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                    Node0 = Node(Down,n.level+<span class="hljs-number">1</span>,n)<br>                    open_.insert(<span class="hljs-number">0</span>,Node0)<br><br>                Left = ToLeft(n.data)<br>                <span class="hljs-keyword">if</span> Left <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [open_[i].data <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(open_))] <span class="hljs-keyword">and</span> Left <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [close[i].data <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(close))] <span class="hljs-keyword">and</span> Left <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                    Node0 = Node(Left,n.level+<span class="hljs-number">1</span>,n)<br>                    open_.insert(<span class="hljs-number">0</span>,Node0)<br><br>                Right = ToRight(n.data)<br>                <span class="hljs-keyword">if</span> Right <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [open_[i].data <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(open_))] <span class="hljs-keyword">and</span> Right <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [close[i].data <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(close))] <span class="hljs-keyword">and</span> Right <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                    Node0 = Node(Right,n.level+<span class="hljs-number">1</span>,n)<br>                    open_.insert(<span class="hljs-number">0</span>,Node0)         <br>    end = datetime.now()<br>    <span class="hljs-built_in">print</span>(steps,<span class="hljs-string">&#x27;步，搜索用时：&#x27;</span>, end - start)<br></code></pre></td></tr></table></figure><h4 id="Python运行结果"><a href="#Python运行结果" class="headerlink" title="Python运行结果"></a>Python运行结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell">请输入原始数据：<br>1 2 3<br>0 4 5<br>6 7 8<br>请输入变换后数据：<br>0 2 3<br>1 7 5<br>4 6 8<br>请输入搜索深度：6<br>搜索完毕！步骤为：<br>1 2 3<br>0 4 5<br>6 7 8<br><br>1 2 3<br>4 0 5<br>6 7 8<br><br>1 2 3<br>4 7 5<br>6 0 8<br><br>1 2 3<br>4 7 5<br>0 6 8<br><br>1 2 3<br>0 7 5<br>4 6 8<br><br>0 2 3<br>1 7 5<br>4 6 8<br><br>5 步，搜索用时： 0:00:00.004012<br></code></pre></td></tr></table></figure><hr><h3 id="启发式搜索"><a href="#启发式搜索" class="headerlink" title="启发式搜索"></a>启发式搜索</h3><h4 id="C-2"><a href="#C-2" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Author: 转接</span><br><span class="hljs-comment"> * @Date: 2022-03-12 20:31:24</span><br><span class="hljs-comment"> * @LastEditors: 转接</span><br><span class="hljs-comment"> * @LastEditTime: 2022-03-13 19:01:10</span><br><span class="hljs-comment"> * @Description: 八数码问题启发式搜索</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-comment">// 创建链表</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Data</span>&#123;<br>    <span class="hljs-type">int</span> data[<span class="hljs-number">9</span>]; <span class="hljs-comment">// 存放数据</span><br>    <span class="hljs-type">int</span> value; <span class="hljs-comment">// 存f(n)</span><br>    <span class="hljs-type">int</span> step; <span class="hljs-comment">// 记录步数</span><br>    <span class="hljs-type">int</span> lastAction; <span class="hljs-comment">// 上一步操作 上 下 左 右 1 2 3 4</span><br>    Data *next; <span class="hljs-comment">// 链表中下一个结点</span><br>    Data *last; <span class="hljs-comment">// 操作图中对应的上一个结点</span><br>&#125;Data, *DataList;<br><br><span class="hljs-type">int</span> tempPosition[<span class="hljs-number">9</span>][<span class="hljs-number">2</span>] = &#123; <span class="hljs-comment">// 位置 上下左右 </span><br>    &#123;<span class="hljs-number">0</span>, <span class="hljs-number">5</span>&#125;, <span class="hljs-comment">// 0号位 0 1 0 1 = 5</span><br>    &#123;<span class="hljs-number">1</span>, <span class="hljs-number">7</span>&#125;, <span class="hljs-comment">// 1号位 0 1 1 1 = 7</span><br>    &#123;<span class="hljs-number">2</span>, <span class="hljs-number">6</span>&#125;, <span class="hljs-comment">// 2号位 0 1 1 0 = 6</span><br>    &#123;<span class="hljs-number">3</span>, <span class="hljs-number">13</span>&#125;, <span class="hljs-comment">// 3号位 1 1 0 1 = 13</span><br>    &#123;<span class="hljs-number">4</span>, <span class="hljs-number">15</span>&#125;, <span class="hljs-comment">// 4号位 1 1 1 1 = 15</span><br>    &#123;<span class="hljs-number">5</span>, <span class="hljs-number">14</span>&#125;, <span class="hljs-comment">// 5号位 1 1 1 0 = 14</span><br>    &#123;<span class="hljs-number">6</span>, <span class="hljs-number">9</span>&#125;, <span class="hljs-comment">// 6号位 1 0 0 1 = 9</span><br>    &#123;<span class="hljs-number">7</span>, <span class="hljs-number">11</span>&#125;, <span class="hljs-comment">// 7号位 1 0 1 1 = 11</span><br>    &#123;<span class="hljs-number">8</span>, <span class="hljs-number">10</span>&#125;, <span class="hljs-comment">// 8号位 1 0 1 0 = 10</span><br>&#125;;<br><br><span class="hljs-type">int</span> distance[<span class="hljs-number">9</span>][<span class="hljs-number">9</span>] = &#123; <span class="hljs-comment">// 位置 上下左右 </span><br>    &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;,<br>    &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;,<br>    &#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>&#125;,<br>    &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;,<br>    &#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;,<br>    &#123;<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;,<br>    &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;, <br>    &#123;<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;,<br>    &#123;<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, <br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetNextAction</span><span class="hljs-params">(Data data)</span></span>&#123;<br>    <span class="hljs-type">int</span> *temp = data.data;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(temp[i] == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> tp = tempPosition[i][<span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> last = data.lastAction;<br>    <span class="hljs-keyword">if</span>(last == <span class="hljs-number">1</span>)&#123; <span class="hljs-comment">// 上一步向上移动</span><br>        tp = tp - <span class="hljs-number">4</span>; <span class="hljs-comment">// 不让其向下移动</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(last == <span class="hljs-number">2</span>)&#123; <span class="hljs-comment">// 上一步向下移动</span><br>        tp = tp - <span class="hljs-number">8</span>; <span class="hljs-comment">// 不让其向上移动</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(last == <span class="hljs-number">3</span>)&#123; <span class="hljs-comment">// 上一步向左移动</span><br>        tp = tp - <span class="hljs-number">1</span>; <span class="hljs-comment">// 不让其向右移动</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(last == <span class="hljs-number">4</span>)&#123; <span class="hljs-comment">// 上一步向右移动</span><br>        tp = tp - <span class="hljs-number">2</span>; <span class="hljs-comment">// 不让其向左移动</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> tp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Judge</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr1, <span class="hljs-type">int</span> *arr2)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arr1[i] != arr2[i])&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(Data data)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)&#123;<br>            std::cout &lt;&lt; data.data[i * <span class="hljs-number">3</span> + j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        std::cout &lt;&lt; std::endl;<br>    &#125;<br>    std::cout &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-comment">// 初始化链表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(DataList &amp;head)</span></span>&#123;<br>    head = (Data *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Data));<br>    head-&gt;lastAction = <span class="hljs-number">0</span>;<br>    head-&gt;next = <span class="hljs-literal">NULL</span>;<br>    head-&gt;last = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Gn</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr)</span></span>&#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        sum += distance[arr[i]][i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-comment">// 按照f(n)值的大小插入链表 链表 数组 价值 上一步操作</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InsertList</span><span class="hljs-params">(DataList &amp;head, <span class="hljs-type">int</span> *arr, <span class="hljs-type">int</span> value, <span class="hljs-type">int</span> lastAction)</span></span>&#123;<br>    Data *temp = head;<br>    Data *newNode = (Data *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Data));<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        newNode-&gt;data[i] = arr[i];<br>    &#125;<br>    newNode-&gt;value = value;<br>    newNode-&gt;step = head-&gt;step + <span class="hljs-number">1</span>;<br>    newNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>    newNode-&gt;last = head;<br>    <span class="hljs-comment">// if(lastAction == 0)&#123;</span><br>    <span class="hljs-comment">//     newNode-&gt;last = NULL;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">while</span>(temp-&gt;next != <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">if</span>(temp-&gt;next-&gt;value &lt; value)&#123;<br>            temp = temp-&gt;next;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    newNode-&gt;next = temp-&gt;next;<br>    temp-&gt;next = newNode;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> *originalData = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">9</span>];<br>    <span class="hljs-type">int</span> *targetArray = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">9</span>];<br>    <span class="hljs-type">int</span> *arraytest1 = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">9</span>];<br>    <span class="hljs-type">int</span> *arraytest2 = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">9</span>];<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;请输入原始数据：&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        std::cin &gt;&gt; originalData[i];<br>    &#125;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;请输入变换后数据：&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        std::cin &gt;&gt; targetArray[i];<br>    &#125;<br>    <span class="hljs-comment">// 复制数组到arraytest</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        arraytest1[i] = originalData[i];<br>        arraytest2[i] = targetArray[i];<br>    &#125;<br>    <span class="hljs-comment">// 判断问题是否有解</span><br>    <span class="hljs-type">int</span> cnt1 = <span class="hljs-number">0</span>, cnt2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arraytest1[i] == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br>            <span class="hljs-keyword">if</span>(arraytest1[j] &gt; arraytest1[i])&#123;<br>                cnt1++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arraytest2[i] == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br>            <span class="hljs-keyword">if</span>(arraytest2[j] &gt; arraytest2[i])&#123;<br>                cnt2++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(cnt1%<span class="hljs-number">2</span> != cnt2%<span class="hljs-number">2</span>)&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;E0: 输入有误！问题无解&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 排序</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(arraytest1[i] &lt; arraytest1[j])&#123;<br>                <span class="hljs-type">int</span> temp = arraytest1[i];<br>                arraytest1[i] = arraytest1[j];<br>                arraytest1[j] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(arraytest2[i] &lt; arraytest2[j])&#123;<br>                <span class="hljs-type">int</span> temp = arraytest2[i];<br>                arraytest2[i] = arraytest2[j];<br>                arraytest2[j] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//判断排序后的数组是否相等</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arraytest1[i] != arraytest2[i])&#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;E1: 输入有误！请检查输入&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">delete</span>[] arraytest1;<br>    <span class="hljs-keyword">delete</span>[] arraytest2;<br>    <span class="hljs-type">clock_t</span> start, finish;<br><span class="hljs-type">double</span> Total_time;<br>    start = <span class="hljs-built_in">clock</span>();<br>    DataList head; <span class="hljs-comment">// 定义链表存放数据</span><br>    <span class="hljs-built_in">InitList</span>(head);  <span class="hljs-comment">// 初始化链表 即创建头节点</span><br>    head-&gt;step = <span class="hljs-number">-1</span>;<br>    DataList temp = head;<br>    <span class="hljs-built_in">InsertList</span>(head, originalData, <span class="hljs-built_in">Gn</span>(originalData), <span class="hljs-number">0</span>); <span class="hljs-comment">// 将原始数据结点存放到头节点后的数据区域</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        temp = temp-&gt;next;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">Judge</span>(targetArray, temp-&gt;data))&#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;找到了！需要&quot;</span> &lt;&lt; temp-&gt;step &lt;&lt; <span class="hljs-string">&quot;步&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; <span class="hljs-comment">// 找到空(0)位置</span><br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(temp-&gt;data[i] == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// int tempArraylist[9];</span><br>        <span class="hljs-comment">// for(int j = 0; j &lt; 9; j++)&#123;</span><br>        <span class="hljs-comment">//     tempArraylist[j] = temp-&gt;next-&gt;data[j];</span><br>        <span class="hljs-comment">// &#125;</span><br>        <span class="hljs-type">int</span> nextAction = <span class="hljs-built_in">GetNextAction</span>(*temp);<br>        <span class="hljs-keyword">if</span>(nextAction&gt;=<span class="hljs-number">8</span>)&#123;<br>            <span class="hljs-type">int</span> arrayList[<span class="hljs-number">9</span>];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; j++)&#123;<br>                arrayList[j] = temp-&gt;data[j];<br>            &#125;<br>            arrayList[i] = arrayList[i<span class="hljs-number">-3</span>];<br>            arrayList[i<span class="hljs-number">-3</span>] = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">InsertList</span>(temp, arrayList, <span class="hljs-built_in">Gn</span>(arrayList)+temp-&gt;step, <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(nextAction%<span class="hljs-number">8</span>&gt;=<span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-type">int</span> arrayList[<span class="hljs-number">9</span>];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; j++)&#123;<br>                arrayList[j] = temp-&gt;data[j];<br>            &#125;<br>            arrayList[i] = arrayList[i+<span class="hljs-number">3</span>];<br>            arrayList[i+<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">InsertList</span>(temp, arrayList, <span class="hljs-built_in">Gn</span>(arrayList)+temp-&gt;step, <span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(nextAction%<span class="hljs-number">8</span>%<span class="hljs-number">4</span>&gt;=<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-type">int</span> arrayList[<span class="hljs-number">9</span>];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; j++)&#123;<br>                arrayList[j] = temp-&gt;data[j];<br>            &#125;<br>            arrayList[i] = arrayList[i<span class="hljs-number">-1</span>];<br>            arrayList[i<span class="hljs-number">-1</span>] = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">InsertList</span>(temp, arrayList, <span class="hljs-built_in">Gn</span>(arrayList)+temp-&gt;step, <span class="hljs-number">3</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(nextAction%<span class="hljs-number">8</span>&gt;=<span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-type">int</span> arrayList[<span class="hljs-number">9</span>];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; j++)&#123;<br>                arrayList[j] = temp-&gt;data[j];<br>            &#125;<br>            arrayList[i] = arrayList[i+<span class="hljs-number">1</span>];<br>            arrayList[i+<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">InsertList</span>(temp, arrayList, <span class="hljs-built_in">Gn</span>(arrayList)+temp-&gt;step, <span class="hljs-number">4</span>);<br>        &#125;<br>    &#125;<br>    finish = <span class="hljs-built_in">clock</span>();<br>    std::stack&lt;<span class="hljs-type">int</span> *&gt;s;<br>    <span class="hljs-type">int</span> steps = temp-&gt;step;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;步骤为：&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">while</span>(temp-&gt;last != <span class="hljs-literal">NULL</span>)&#123;<br>        s.<span class="hljs-built_in">push</span>(temp-&gt;data);<br>        temp = temp-&gt;last;<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span>(!s.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-type">int</span> *arr = s.<span class="hljs-built_in">top</span>();<br>        s.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)&#123;<br>                std::cout &lt;&lt; arr[i * <span class="hljs-number">3</span> + j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>            &#125;<br>            std::cout &lt;&lt; std::endl;<br>        &#125;<br>        std::cout &lt;&lt; std::endl;<br>    &#125;<br>    std::cout &lt;&lt; steps &lt;&lt; <span class="hljs-string">&quot;步，搜索用时：&quot;</span> &lt;&lt; (<span class="hljs-type">double</span>)(finish - start) / CLOCKS_PER_SEC &lt;&lt; <span class="hljs-string">&quot;s&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="C-运行结果-2"><a href="#C-运行结果-2" class="headerlink" title="C++运行结果"></a>C++运行结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell">请输入原始数据：<br>1 2 3<br>0 4 5<br>6 7 8<br>请输入变换后数据：<br>0 2 3<br>1 7 5<br>4 6 8<br>找到了！需要5步<br>步骤为：<br>1 2 3<br>0 4 5<br>6 7 8<br><br>1 2 3<br>4 0 5<br>6 7 8<br><br>1 2 3<br>4 7 5<br>6 0 8 <br><br>1 2 3<br>4 7 5<br>0 6 8<br><br>1 2 3<br>0 7 5<br>4 6 8<br><br>0 2 3<br>1 7 5<br>4 6 8<br><br>5步，搜索用时：0.005s<br></code></pre></td></tr></table></figure><hr><h2 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h2><h3 id="判断可移动方向变量：tempPosition"><a href="#判断可移动方向变量：tempPosition" class="headerlink" title="判断可移动方向变量：tempPosition"></a>判断可移动方向变量：tempPosition</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> tempPosition[<span class="hljs-number">9</span>][<span class="hljs-number">2</span>] = &#123; <span class="hljs-comment">// 位置 上下左右 </span><br>    &#123;<span class="hljs-number">0</span>, <span class="hljs-number">5</span>&#125;,  <span class="hljs-comment">// 0号位 0 1 0 1 = 5</span><br>    &#123;<span class="hljs-number">1</span>, <span class="hljs-number">7</span>&#125;,  <span class="hljs-comment">// 1号位 0 1 1 1 = 7</span><br>    &#123;<span class="hljs-number">2</span>, <span class="hljs-number">6</span>&#125;,  <span class="hljs-comment">// 2号位 0 1 1 0 = 6</span><br>    &#123;<span class="hljs-number">3</span>, <span class="hljs-number">13</span>&#125;, <span class="hljs-comment">// 3号位 1 1 0 1 = 13</span><br>    &#123;<span class="hljs-number">4</span>, <span class="hljs-number">15</span>&#125;, <span class="hljs-comment">// 4号位 1 1 1 1 = 15</span><br>    &#123;<span class="hljs-number">5</span>, <span class="hljs-number">14</span>&#125;, <span class="hljs-comment">// 5号位 1 1 1 0 = 14</span><br>    &#123;<span class="hljs-number">6</span>, <span class="hljs-number">9</span>&#125;,  <span class="hljs-comment">// 6号位 1 0 0 1 = 9</span><br>    &#123;<span class="hljs-number">7</span>, <span class="hljs-number">11</span>&#125;, <span class="hljs-comment">// 7号位 1 0 1 1 = 11</span><br>    &#123;<span class="hljs-number">8</span>, <span class="hljs-number">10</span>&#125;, <span class="hljs-comment">// 8号位 1 0 1 0 = 10</span><br>&#125;; <br></code></pre></td></tr></table></figure><p>通过四个二进制数字来表示四个方向移动（交换）的可行性再将二进制数字转换为十进制数字存在二维数组中。通过判断其值来判断能否向指定方向移动。如<strong>能向上</strong>则<strong>tempPosition[i][1]&gt;=8</strong>， <strong>能向下</strong>则<strong>tempPosition[i][1]%8&gt;=4</strong>， <strong>能向左</strong>则<strong>tempPosition[i][1]%8%4&gt;=2</strong>， <strong>能向右</strong>则<strong>tempPosition[i][1]%8%4%2&gt;=1</strong>。</p><hr><h3 id="判断两个点之间距离变量：distance"><a href="#判断两个点之间距离变量：distance" class="headerlink" title="判断两个点之间距离变量：distance"></a>判断两个点之间距离变量：distance</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> distance[<span class="hljs-number">9</span>][<span class="hljs-number">9</span>] = &#123; <span class="hljs-comment">// 位置 上下左右 </span><br>    &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;,<br>    &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;,<br>    &#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>&#125;,<br>    &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;,<br>    &#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;,<br>    &#123;<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;,<br>    &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;, <br>    &#123;<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;,<br>    &#123;<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, <br>&#125;;<br></code></pre></td></tr></table></figure><p>通过**distance[i][j]**来表示i号位置和j号位置的距离，进而去计算启发函数中的g(n)。</p><hr><h3 id="判断问题是否有解"><a href="#判断问题是否有解" class="headerlink" title="判断问题是否有解"></a>判断问题是否有解</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 判断问题是否有解</span><br>    <span class="hljs-type">int</span> cnt1 = <span class="hljs-number">0</span>, cnt2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arraytest1[i] == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br>            <span class="hljs-keyword">if</span>(arraytest1[j] &gt; arraytest1[i])&#123;<br>                cnt1++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arraytest2[i] == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br>            <span class="hljs-keyword">if</span>(arraytest2[j] &gt; arraytest2[i])&#123;<br>                cnt2++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(cnt1%<span class="hljs-number">2</span> != cnt2%<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;E0: 输入有误！问题无解&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>  逆序：即在某个数字的前面比它大的数字个数。</li></ul><p>左右移动，不影响逆序数；上下移动，逆序数加2或者减2。即如果初始状态能通过移动空格(0)来到达移动目标状态，则<strong>初始状态和目标状态的逆序数应该为同奇同偶</strong>。</p><hr><h3 id="广度优先代码优化思路-DBFS"><a href="#广度优先代码优化思路-DBFS" class="headerlink" title="广度优先代码优化思路 (DBFS)"></a>广度优先代码优化思路 (DBFS)</h3><p>可以将循环代码优化，使得不仅仅从原始数据广度优先开始搜索，也可以同时从目标数据广度优先进行搜索，能缩短约一半时间（双向广度优先算法DBFS）</p><p><img src="https://blog.zhuanjie.ltd/img/uploads/2022/03/image.png"></p><hr><h3 id="启发式函数-f-n-g-n-h-n-的分析"><a href="#启发式函数-f-n-g-n-h-n-的分析" class="headerlink" title="启发式函数 f(n) = g(n) + h(n) 的分析"></a>启发式函数 f(n) = g(n) + h(n) 的分析</h3><ol><li> <strong>g(n)=0</strong>，一种极端情况如果g(n)=0，则只有h(n)起作用，此时A*演变成贪心算法。</li><li> <strong>h(n)=0</strong>，一种极端情况如果h(n)=0，则只有g(n)起作用，此时<strong>A*演变成Dijkstra算法</strong>，这保证能找到最短路径，但效率不到。</li><li> <strong>h(n)&lt;实际代价</strong> 如果h(n)经常都比从n移动到目标的实际代价小（或者相等），则A*保证<strong>能找到一条最短路径</strong>。<strong>h(n)越小</strong>，A扩展的结点越多，<strong>运行就越慢</strong>。</li><li> <strong>h(n)=实际代价</strong> 如果h(n)精确地等于从n移动到目标的实际代价，则A*将会仅仅寻找最佳路径而不扩展别的任何结点，这会运行得非常快。尽管这不可能在所有情况下发生，你仍可以在一些特殊情况下让它们精确地相等（指让h(n)精确地等于实际代价）。只要提供完美的信息，A*就会运行得很完美。</li><li> <strong>h(n)&gt;实际代价</strong> 如果h(n)有时比从n移动到目标的实际代价大，则A*<strong>不能保证找到一条最短路径</strong>，但它<strong>运行得更快</strong>。</li><li> <strong>h(n)&gt;&gt;实际代价</strong>，即<strong>h(n)&gt;&gt;g(n)<strong>，则只有h(n)起作用，</strong>A*演变成BFS算法</strong>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构——树与二叉树</title>
      <link href="/2022/03/03/treeandbinarytree/"/>
      <url>/2022/03/03/treeandbinarytree/</url>
      
        <content type="html"><![CDATA[<p>头文件TreeAndBinaryTree.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// TreeAndBinaryTree.h - 树与二叉树</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_TREE_SIZE 100</span><br><br><span class="hljs-comment">/*********************************************************************************************************************************</span><br><span class="hljs-comment"> * 数据类型一览</span><br><span class="hljs-comment"> * ElemType 数据部分</span><br><span class="hljs-comment"> * TreeNoe 二叉树 顺序存储</span><br><span class="hljs-comment"> * BiTNode, *BiTree 二叉树 链式存储</span><br><span class="hljs-comment"> * ThreadNode, *ThreadTree 线索二叉树</span><br><span class="hljs-comment"> * BSTNode, *BSTree 二叉排序树</span><br><span class="hljs-comment"> * AVLNode, *AVLTree 二叉平衡树</span><br><span class="hljs-comment"> * HuffmanNode, *HuffmanTree 哈夫曼树</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 操作函数 共享栈操作在函数名后加0或者1 不带头结点的链栈操作在函数名后加WithoutFirstNode</span><br><span class="hljs-comment"> * void InitTree(tree[], n) 初始化顺序存储二叉树</span><br><span class="hljs-comment"> * int InsertBiTree(&amp;T, e) 二叉树的链式存储插入二叉树,默认左子树如果左子树满则插入右子树 插入根节点返回0，插入左子树返回1，插入右子树返回2</span><br><span class="hljs-comment"> * void Print(T) 输出二叉树结点</span><br><span class="hljs-comment"> * void PreOrder(T) 二叉树的链式存储先序遍历</span><br><span class="hljs-comment"> * void InOrder(T) 二叉树的链式存储中序遍历</span><br><span class="hljs-comment"> * void PostOrder(T) 二叉树的链式存储后序遍历</span><br><span class="hljs-comment"> * int TreeDepth(T) 利用递归求树的深度 返回树的深度</span><br><span class="hljs-comment"> * void LevelOrder(T) 二叉树的层序遍历</span><br><span class="hljs-comment"> * void Visit(*q) 访问节点</span><br><span class="hljs-comment"> * void InThread(T) 二叉树的链式存储中序遍历</span><br><span class="hljs-comment"> * void PreThread(T) 二叉树的链式存储先序遍历</span><br><span class="hljs-comment"> * void PostThread(T) 二叉树的链式存储后序遍历</span><br><span class="hljs-comment"> * void CreateInThread(&amp;T) 中序线索化二叉树T</span><br><span class="hljs-comment"> * void CreatePreThread(&amp;T) 先序线索化二叉树T</span><br><span class="hljs-comment"> * void CreatePostThread(&amp;T) 后序线索化二叉树T</span><br><span class="hljs-comment"> * ThreadNode *InOrderPre(*q) 中序线索二叉树找指定结点的中序前驱pre 返回其前驱结点，无法找到则输出信息并返回NULL</span><br><span class="hljs-comment"> * ThreadNode *InOrderNext(*q) 中序线索二叉树找指定结点的中序后继next 返回其后继结点</span><br><span class="hljs-comment"> * ThreadNode *PreOrderPre(*q) 先序线索二叉树找指定结点的先序前驱pre 返回其前驱结点</span><br><span class="hljs-comment"> * ThreadNode *PreOrderNext(*q) 先序线索二叉树找指定结点的先序后继next 返回其后继结点</span><br><span class="hljs-comment"> * ThreadNode *PostOrderPre(*q) 后序线索二叉树找指定结点的后序前驱pre 返回其前驱结点</span><br><span class="hljs-comment"> * ThreadNode *PostOrderNext(*q) 后序线索二叉树找指定结点的后序后继next 返回其后继结点，无法找到则输出信息并返回NULL</span><br><span class="hljs-comment"> * BSTNode *SearchBST_Recursive(T, key) 二叉排序树的递归查找 返回查找到的结点，没有则返回NULL</span><br><span class="hljs-comment"> * BSTNode *SearchBST(T, key) 二叉排序树的非递归查找 返回查找到的结点，没有则返回NULL</span><br><span class="hljs-comment"> * void InsertBST_Recursive(&amp;T, x) 二叉排序树的递归插入</span><br><span class="hljs-comment"> * void InsertBST(&amp;T, x) 二叉排序树的非递归插入</span><br><span class="hljs-comment"> * void DeleteBST(&amp;T, key) 二叉排序树的删除</span><br><span class="hljs-comment"> * void CreateBSTree(&amp;T, str[], n) 二叉排序树的链式存储创建</span><br><span class="hljs-comment"> * AVLTree SingleRotateWithLeft(AVLTree &amp;T) LL右单旋</span><br><span class="hljs-comment"> * AVLTree SingleRotateWithRight(AVLTree &amp;T) LL左单旋</span><br><span class="hljs-comment"> * AVLTree DoubleRotateWithLeft(AVLTree &amp;T） LR双旋</span><br><span class="hljs-comment"> * AVLTree DoubleRotateWithRight(AVLTree &amp;T) RL双旋</span><br><span class="hljs-comment"> * void InsertAVL(&amp;T, x) 二叉平衡树的插入</span><br><span class="hljs-comment"> * void CreateHuffmanTree(&amp;T, n) 构造哈夫曼树</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> *********************************************************************************************************************************/</span><br><br><span class="hljs-comment">// 数据部分用ElemType结构体表示</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ElemType</span> &#123;</span><br>    <span class="hljs-type">int</span> value;<br>&#125;;<br><br><span class="hljs-comment">// 二叉树的顺序存储</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNoe</span>&#123;</span><br>    ElemType data;<br>    <span class="hljs-type">bool</span> isEmpty;<br>&#125;;<br><br><span class="hljs-comment">// 二叉树的链式存储</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span>&#123;</span><br>    ElemType data;  <span class="hljs-comment">// 数据域</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span>  <span class="hljs-comment">// 左右孩子指针</span><br>&#125;BiTNode, *BiTree;  <span class="hljs-comment">// n个结点对应2n个指针对应n+1个空链域</span><br><br><br><span class="hljs-comment">// 初始化二叉树的顺序存储</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">InitTree</span><span class="hljs-params">(TreeNoe tree[], <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        tree[i].isEmpty = <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 二叉树的链式存储插入根节点</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">CreateBiTree</span><span class="hljs-params">(BiTree &amp;T, ElemType e)</span>&#123;<br>    T = (BiTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiTNode));<br>    <span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;分配空间失败&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    T-&gt;data = e;<br>    T-&gt;lchild = <span class="hljs-literal">NULL</span>;<br>    T-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">// 二叉树的链式存储插入二叉树（默认左子树如果左子树满则插入右子树）</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">InsertBiTree</span><span class="hljs-params">(BiTree &amp;T, ElemType e)</span>&#123;<br>    <span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br>        CreateBiTree(T, e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 插入根节点</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (T-&gt;lchild == <span class="hljs-literal">NULL</span>) &#123;<br>        CreateBiTree(T-&gt;lchild, e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 插入左子树</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (T-&gt;rchild == <span class="hljs-literal">NULL</span>) &#123;<br>        CreateBiTree(T-&gt;rchild, e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;  <span class="hljs-comment">// 插入右子树</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// 输出二叉树结点</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; T-&gt;data.value &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// 二叉树的链式存储 先序遍历</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PreOrder</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-keyword">if</span> (T != <span class="hljs-literal">NULL</span>) &#123;<br>        Print(T);<br>        PreOrder(T-&gt;lchild);<br>        PreOrder(T-&gt;rchild);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 二叉树的链式存储 中序遍历</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">InOrder</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-keyword">if</span> (T != <span class="hljs-literal">NULL</span>) &#123;<br>        InOrder(T-&gt;lchild);<br>        Print(T);<br>        InOrder(T-&gt;rchild);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 二叉树的链式存储 后序遍历</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PostOrder</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-keyword">if</span> (T != <span class="hljs-literal">NULL</span>) &#123;<br>        PostOrder(T-&gt;lchild);<br>        PostOrder(T-&gt;rchild);<br>        Print(T);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 利用递归求树的深度</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">TreeDepth</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> ldepth = TreeDepth(T-&gt;lchild);<br>    <span class="hljs-type">int</span> rdepth = TreeDepth(T-&gt;rchild);<br>    <span class="hljs-keyword">return</span> (ldepth &gt; rdepth ? ldepth : rdepth) + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 层序遍历辅助链队列</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkNode</span>&#123;</span><br>    BiTNode *data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkNode</span> *<span class="hljs-title">next</span>;</span><br>&#125;LinkNode;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkQueue</span>&#123;</span><br>    LinkNode *front, *rear;  <span class="hljs-comment">// 队头队尾指针</span><br>&#125;LinkQueue;<br><span class="hljs-type">void</span> <span class="hljs-title function_">InitQueue</span><span class="hljs-params">(LinkQueue &amp;Q)</span>&#123;<br>    Q.front = Q.rear = (LinkNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));<br>    Q.front-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">EmptyQueue</span><span class="hljs-params">(LinkQueue Q)</span>&#123;<br>    <span class="hljs-keyword">return</span> Q.front == Q.rear;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">EnQueue</span><span class="hljs-params">(LinkQueue &amp;Q, BiTNode *T)</span>&#123;<br>    LinkNode *s = (LinkNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));<br>    s-&gt;data = T;<br>    s-&gt;next = <span class="hljs-literal">NULL</span>;<br>    Q.rear-&gt;next = s;<br>    Q.rear = s;<br>&#125;<br>BiTree <span class="hljs-title function_">DeQueue</span><span class="hljs-params">(LinkQueue &amp;Q)</span>&#123;<br>    LinkNode *p = Q.front-&gt;next;<br>    BiTNode *T = p-&gt;data;<br>    Q.front-&gt;next = p-&gt;next;<br>    <span class="hljs-keyword">if</span> (Q.rear == p) &#123;<br>        Q.rear = Q.front;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(p);<br>    <span class="hljs-keyword">return</span> T;<br>&#125;<br><br><span class="hljs-comment">// 二叉树的层序遍历</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">LevelOrder</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    LinkQueue Q;<br>    InitQueue(Q);<br>    EnQueue(Q, T);<br>    <span class="hljs-keyword">while</span> (!EmptyQueue(Q)) &#123;<br>        T = DeQueue(Q);<br>        Print(T);<br>        <span class="hljs-keyword">if</span> (T-&gt;lchild != <span class="hljs-literal">NULL</span>) &#123;<br>            EnQueue(Q, T-&gt;lchild);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (T-&gt;rchild != <span class="hljs-literal">NULL</span>) &#123;<br>            EnQueue(Q, T-&gt;rchild);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 线索二叉树</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ThreadNode</span>&#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ThreadNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span><br>    <span class="hljs-type">int</span> ltag,rtag;  <span class="hljs-comment">// 左右线索标志，为0时指向孩子，为1时指向线索</span><br>&#125;ThreadNode, *ThreadTree;<br><br>ThreadNode *Pre = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">// 访问节点</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Visit</span><span class="hljs-params">(ThreadNode *q)</span>&#123;<br>    <span class="hljs-keyword">if</span>(q-&gt;lchild == <span class="hljs-literal">NULL</span>)&#123;<br>        q-&gt;lchild = Pre;  <span class="hljs-comment">// 左子树为空，建立前驱线索</span><br>        q-&gt;ltag = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(Pre == <span class="hljs-literal">NULL</span> &amp;&amp; Pre-&gt;rchild == <span class="hljs-literal">NULL</span>)&#123;<br>        Pre-&gt;rchild = q;  <span class="hljs-comment">// 建立前驱节点的后继线索</span><br>        Pre-&gt;rtag = <span class="hljs-number">1</span>;<br>    &#125;<br>    Pre = q;<br>&#125;<br><br><span class="hljs-comment">// 二叉树的链式存储 中序遍历</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">InThread</span><span class="hljs-params">(ThreadTree T)</span>&#123;<br>    <span class="hljs-keyword">if</span> (T != <span class="hljs-literal">NULL</span>) &#123;<br>        InThread(T-&gt;lchild);<br>        Visit(T);<br>        InThread(T-&gt;rchild);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 二叉树的链式存储 先序遍历</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PreThread</span><span class="hljs-params">(ThreadTree T)</span>&#123;<br>    <span class="hljs-keyword">if</span> (T != <span class="hljs-literal">NULL</span>) &#123;<br>        Visit(T);<br>        <span class="hljs-keyword">if</span>(T-&gt;ltag == <span class="hljs-number">0</span>)&#123;<br>            PreThread(T-&gt;lchild);  <span class="hljs-comment">// 判断lchild是否指向的是孩子</span><br>            <span class="hljs-comment">// 如果lchild指向的是前驱则不需要再进行递归遍历</span><br>        &#125;<br>        PreThread(T-&gt;rchild);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 二叉树的链式存储 后序遍历</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PostThread</span><span class="hljs-params">(ThreadTree T)</span>&#123;<br>    <span class="hljs-keyword">if</span> (T != <span class="hljs-literal">NULL</span>) &#123;<br>        PostThread(T-&gt;lchild);<br>        PostThread(T-&gt;rchild);<br>        Visit(T);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 中序线索化二叉树T</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">CreateInThread</span><span class="hljs-params">(ThreadTree &amp;T)</span>&#123;<br>    Pre = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span>(T != <span class="hljs-literal">NULL</span>)&#123;<br>        InThread(T);<br>        <span class="hljs-keyword">if</span>(Pre-&gt;rchild == <span class="hljs-literal">NULL</span>)&#123;<br>            Pre-&gt;rtag = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 手动处理最后一个结点的右指针标识</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 先序线索化二叉树T</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">CreatePreThread</span><span class="hljs-params">(ThreadTree &amp;T)</span>&#123;<br>    Pre = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span>(T != <span class="hljs-literal">NULL</span>)&#123;<br>        PreThread(T);<br>        <span class="hljs-keyword">if</span>(Pre-&gt;rchild == <span class="hljs-literal">NULL</span>)&#123;<br>            Pre-&gt;rtag = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 手动处理最后一个结点的右指针标识</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 后序线索化二叉树T</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">CreatePostThread</span><span class="hljs-params">(ThreadTree &amp;T)</span>&#123;<br>    Pre = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span>(T != <span class="hljs-literal">NULL</span>)&#123;<br>        PostThread(T);<br>        <span class="hljs-keyword">if</span>(Pre-&gt;rchild == <span class="hljs-literal">NULL</span>)&#123;<br>            Pre-&gt;rtag = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 手动处理最后一个结点的右指针标识</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 中序线索二叉树找指定结点的中序前驱pre</span><br>ThreadNode *<span class="hljs-title function_">InOrderPre</span><span class="hljs-params">(ThreadNode *q)</span>&#123;<br>    <span class="hljs-keyword">if</span>(q-&gt;ltag == <span class="hljs-number">1</span>)&#123;  <span class="hljs-comment">// 如果左指针指向的是前驱</span><br>        <span class="hljs-keyword">return</span> q-&gt;lchild;<br>    &#125;<br>    <span class="hljs-comment">// 否则，左指针指向的是左边孩子，则循环查找前驱的前驱</span><br>    ThreadNode *p = q-&gt;lchild;<br>    <span class="hljs-keyword">while</span>(p-&gt;rtag == <span class="hljs-number">0</span>)&#123;<br>        p = p-&gt;rchild;<br>    &#125;<br>    <span class="hljs-comment">// q的左孩子的右孩子方向的叶子结点即为q的前驱</span><br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">// 中序线索二叉树找指定结点的中序后继next</span><br>ThreadNode *<span class="hljs-title function_">InOrderNext</span><span class="hljs-params">(ThreadNode *q)</span>&#123;<br>    <span class="hljs-keyword">if</span>(q-&gt;rtag == <span class="hljs-number">1</span>)&#123;  <span class="hljs-comment">// 如果右指针指向的是后继</span><br>        <span class="hljs-keyword">return</span> q-&gt;rchild;<br>    &#125;<br>    <span class="hljs-comment">// 否则，右指针指向的是右边孩子，则循环查找后继的后继</span><br>    ThreadNode *p = q-&gt;rchild;<br>    <span class="hljs-keyword">while</span>(p-&gt;ltag == <span class="hljs-number">0</span>)&#123;<br>        p = p-&gt;lchild;<br>    &#125;<br>    <span class="hljs-comment">// q的右孩子的左孩子方向的叶子结点即为q的后继</span><br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">// 先序线索二叉树找指定结点的先序前驱pre</span><br>ThreadNode *<span class="hljs-title function_">PreOrderPre</span><span class="hljs-params">(ThreadNode *q)</span>&#123;<br>    <span class="hljs-keyword">if</span>(q-&gt;ltag == <span class="hljs-number">1</span>)&#123;  <span class="hljs-comment">// 如果左指针指向的是前驱</span><br>        <span class="hljs-keyword">return</span> q-&gt;lchild;<br>    &#125;<br>    <span class="hljs-comment">// 否则，左指针指向的是左边孩子，则根据先序排序 根 -&gt; 左 -&gt; 右 无法判断前驱</span><br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;无法找到该结点的先序前驱！&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">// 先序线索二叉树找指定结点的先序后继next</span><br>ThreadNode *<span class="hljs-title function_">PreOrderNext</span><span class="hljs-params">(ThreadNode *q)</span>&#123;<br>    <span class="hljs-keyword">if</span>(q-&gt;rtag == <span class="hljs-number">1</span>)&#123;  <span class="hljs-comment">// 如果右指针指向的是后继</span><br>        <span class="hljs-keyword">return</span> q-&gt;rchild;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(q-&gt;lchild != <span class="hljs-literal">NULL</span>)&#123;  <span class="hljs-comment">// 如果左孩子不为空，则左孩子的前驱即为后继</span><br>        <span class="hljs-keyword">return</span> q-&gt;lchild;<br>    &#125;<span class="hljs-keyword">else</span>&#123;  <span class="hljs-comment">// 根据先序排序 根 -&gt; 左 -&gt; 右，且左孩子为空，则右孩子的前驱即为后继</span><br>        <span class="hljs-keyword">return</span> q-&gt;rchild;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 后序线索二叉树找指定结点的后序前驱pre</span><br>ThreadNode *<span class="hljs-title function_">PostOrderPre</span><span class="hljs-params">(ThreadNode *q)</span>&#123;<br>    <span class="hljs-keyword">if</span>(q-&gt;ltag == <span class="hljs-number">1</span>)&#123;  <span class="hljs-comment">// 如果左指针指向的是前驱</span><br>        <span class="hljs-keyword">return</span> q-&gt;lchild;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(q-&gt;rchild != <span class="hljs-literal">NULL</span>)&#123;  <span class="hljs-comment">// 如果右孩子不为空，则右孩子的前驱即为前驱</span><br>        <span class="hljs-keyword">return</span> q-&gt;rchild;<br>    &#125;<span class="hljs-keyword">else</span>&#123;  <span class="hljs-comment">// 根据后序排序 左 -&gt; 右 -&gt; 根，且右孩子为空，则左孩子的前驱即为前驱</span><br>        <span class="hljs-keyword">return</span> q-&gt;lchild;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 后序线索二叉树找指定结点的后序后继next</span><br>ThreadNode *<span class="hljs-title function_">PostOrderNext</span><span class="hljs-params">(ThreadNode *q)</span>&#123;<br>    <span class="hljs-keyword">if</span>(q-&gt;rtag == <span class="hljs-number">1</span>)&#123;  <span class="hljs-comment">// 如果左指针指向的是前驱</span><br>        <span class="hljs-keyword">return</span> q-&gt;rchild;<br>    &#125;<br>    <span class="hljs-comment">// 否则，右指针指向的是右边孩子，则根据后序排序 左 -&gt; 右 -&gt; 根 无法判断后继</span><br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;无法找到该结点的后序后继！&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">// 二叉排序树</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BSTNode</span>&#123;</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BSTNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span><br>&#125;BSTNode, *BSTree;<br><br><span class="hljs-comment">// 查找二叉排序树中指定结点 递归</span><br>BSTNode *<span class="hljs-title function_">SearchBST_Recursive</span><span class="hljs-params">(BSTree T, <span class="hljs-type">int</span> key)</span>&#123;<br>    <span class="hljs-keyword">if</span>(T == <span class="hljs-literal">NULL</span>  T-&gt;data == key)&#123;<br>        <span class="hljs-keyword">return</span> T;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(key &lt; T-&gt;data)&#123;<br>        <span class="hljs-keyword">return</span> SearchBST_Recursive(T-&gt;lchild, key);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> SearchBST_Recursive(T-&gt;rchild, key);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 查找二叉排序树中指定结点 非递归</span><br>BSTNode *<span class="hljs-title function_">SearchBST</span><span class="hljs-params">(BSTree T, <span class="hljs-type">int</span> key)</span>&#123;<br>    <span class="hljs-keyword">while</span>(T != <span class="hljs-literal">NULL</span> &amp;&amp; T-&gt;data != key)&#123;<br>        <span class="hljs-keyword">if</span>(key &lt; T-&gt;data)&#123;<br>            T = T-&gt;lchild;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            T = T-&gt;rchild;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> T;<br>&#125;<br><br><span class="hljs-comment">// 插入二叉排序树 递归</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">InsertBST_Recursive</span><span class="hljs-params">(BSTree &amp;T, <span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-keyword">if</span>(T == <span class="hljs-literal">NULL</span>)&#123;<br>        T = (BSTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BSTNode));<br>        T-&gt;data = x;<br>        T-&gt;lchild = T-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x == T-&gt;data)&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;该结点已存在！&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x &lt; T-&gt;data)&#123;<br>        InsertBST_Recursive(T-&gt;lchild, x);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        InsertBST_Recursive(T-&gt;rchild, x);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 插入二叉排序树 非递归</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">InsertBST</span><span class="hljs-params">(BSTree &amp;T, <span class="hljs-type">int</span> x)</span>&#123;<br>    BSTree p = T, q = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;data != x)&#123;<br>        q = p;<br>        <span class="hljs-keyword">if</span>(x &lt; p-&gt;data)&#123;<br>            p = p-&gt;lchild;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            p = p-&gt;rchild;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)&#123;<br>        p = (BSTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BSTNode));<br>        p-&gt;data = x;<br>        p-&gt;lchild = p-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">if</span>(q == <span class="hljs-literal">NULL</span>)&#123;<br>            T = p;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x &lt; q-&gt;data)&#123;<br>            q-&gt;lchild = p;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            q-&gt;rchild = p;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;该结点已存在！&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 删除二叉排序树</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">DeleteBST</span><span class="hljs-params">(BSTree &amp;T, <span class="hljs-type">int</span> key)</span>&#123;<br>    BSTree p = T, q = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;data != key)&#123;<br>        q = p;<br>        <span class="hljs-keyword">if</span>(key &lt; p-&gt;data)&#123;<br>            p = p-&gt;lchild;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            p = p-&gt;rchild;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;该结点不存在！&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(p-&gt;lchild == <span class="hljs-literal">NULL</span>)&#123;<br>            <span class="hljs-keyword">if</span>(q == <span class="hljs-literal">NULL</span>)&#123;<br>                T = p-&gt;rchild;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p == q-&gt;lchild)&#123;<br>                q-&gt;lchild = p-&gt;rchild;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                q-&gt;rchild = p-&gt;rchild;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p-&gt;rchild == <span class="hljs-literal">NULL</span>)&#123;<br>            <span class="hljs-keyword">if</span>(q == <span class="hljs-literal">NULL</span>)&#123;<br>                T = p-&gt;lchild;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p == q-&gt;lchild)&#123;<br>                q-&gt;lchild = p-&gt;lchild;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                q-&gt;rchild = p-&gt;lchild;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            BSTree s = p-&gt;lchild;<br>            <span class="hljs-keyword">while</span>(s-&gt;rchild != <span class="hljs-literal">NULL</span>)&#123;<br>                s = s-&gt;rchild;<br>            &#125;<br>            p-&gt;data = s-&gt;data;<br>            DeleteBST(p-&gt;lchild, s-&gt;data);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 创建二叉排序树</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">CreateBSTree</span><span class="hljs-params">(BSTree &amp;T, <span class="hljs-type">int</span> str[], <span class="hljs-type">int</span> n)</span>&#123;<br>    T = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        InsertBST(T, str[i]);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 平衡二叉树</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AVLNode</span>&#123;</span><br>    <span class="hljs-type">int</span> data;  <span class="hljs-comment">// 数据域</span><br>    <span class="hljs-type">int</span> height;  <span class="hljs-comment">// 平衡因子，即高度</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AVLNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span><br>&#125;AVLNode, *AVLTree;<br><br><span class="hljs-comment">// 求最大值</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">return</span> a &gt; b ? a : b;<br>&#125;<br><br><span class="hljs-comment">// LL右单旋转</span><br>AVLTree <span class="hljs-title function_">SingleRotateWithLeft</span><span class="hljs-params">(AVLTree &amp;T)</span>&#123;<br>    AVLTree p = T-&gt;lchild;<br>    T-&gt;lchild = p-&gt;rchild;<br>    p-&gt;rchild = T;<br>    T-&gt;height = Max(T-&gt;lchild-&gt;height, T-&gt;rchild-&gt;height) + <span class="hljs-number">1</span>;<br>    p-&gt;height = Max(p-&gt;lchild-&gt;height, T-&gt;height) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">// RR左单旋转</span><br>AVLTree <span class="hljs-title function_">SingleRotateWithRight</span><span class="hljs-params">(AVLTree &amp;T)</span>&#123;<br>    AVLTree p = T-&gt;rchild;<br>    T-&gt;rchild = p-&gt;lchild;<br>    p-&gt;lchild = T;<br>    T-&gt;height = Max(T-&gt;lchild-&gt;height, T-&gt;rchild-&gt;height) + <span class="hljs-number">1</span>;<br>    p-&gt;height = Max(p-&gt;rchild-&gt;height, T-&gt;height) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">// LR先左后右双旋转 即先变成LL结构再恢复平衡</span><br>AVLTree <span class="hljs-title function_">DoubleRotateWithLeft</span><span class="hljs-params">(AVLTree &amp;T)</span>&#123;<br>    T-&gt;lchild = SingleRotateWithRight(T-&gt;lchild);<br>    <span class="hljs-keyword">return</span> SingleRotateWithLeft(T);<br>&#125;<br><br><span class="hljs-comment">// RL先右后左双旋转 即先变成RR结构再恢复平衡</span><br>AVLTree <span class="hljs-title function_">DoubleRotateWithRight</span><span class="hljs-params">(AVLTree &amp;T)</span>&#123;<br>    T-&gt;rchild = SingleRotateWithLeft(T-&gt;rchild);<br>    <span class="hljs-keyword">return</span> SingleRotateWithRight(T);<br>&#125;<br><br><span class="hljs-comment">// 平衡二叉树的插入</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">InsertAVL</span><span class="hljs-params">(AVLTree &amp;T, <span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-keyword">if</span>(T == <span class="hljs-literal">NULL</span>)&#123;<br>        T = (AVLTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(AVLNode));<br>        T-&gt;data = x;<br>        T-&gt;lchild = T-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>        T-&gt;height = <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x == T-&gt;data)&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;该结点已存在！&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x &lt; T-&gt;data)&#123;<br>        InsertAVL(T-&gt;lchild, x);<br>        <span class="hljs-keyword">if</span>(T-&gt;lchild-&gt;height - T-&gt;rchild-&gt;height == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">if</span>(T-&gt;lchild-&gt;lchild-&gt;height - T-&gt;lchild-&gt;rchild-&gt;height == <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-comment">// 左左</span><br>                T = SingleRotateWithLeft(T);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">// 左右</span><br>                T = DoubleRotateWithLeft(T);<br>            &#125;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        InsertAVL(T-&gt;rchild, x);<br>        <span class="hljs-keyword">if</span>(T-&gt;rchild-&gt;height - T-&gt;lchild-&gt;height == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">if</span>(T-&gt;rchild-&gt;rchild-&gt;height - T-&gt;rchild-&gt;lchild-&gt;height == <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-comment">// 右右</span><br>                T = SingleRotateWithRight(T);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">// 右左</span><br>                T = DoubleRotateWithRight(T);<br>            &#125;<br>        &#125;<br>    &#125;<br>    T-&gt;height = (T-&gt;lchild-&gt;height &gt; T-&gt;rchild-&gt;height ? T-&gt;lchild-&gt;height : T-&gt;rchild-&gt;height) + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 构造哈夫曼树</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HuffmanNode</span>&#123;</span><br>    <span class="hljs-type">int</span> weight;  <span class="hljs-comment">// 权值</span><br>    <span class="hljs-type">int</span> parent, lchild, rchild;  <span class="hljs-comment">// 双亲，左孩子，右孩子</span><br>&#125;HuffmanNode, *HuffmanTree;<br><span class="hljs-comment">// 构造哈夫曼树</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">CreateHuffmanTree</span><span class="hljs-params">(HuffmanTree &amp;T, <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> i, j, k;<br>    <span class="hljs-type">int</span> *w = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * n);<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入第&quot;</span> &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;个结点的权值：&quot;</span>;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; w[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(j = i + <span class="hljs-number">1</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-keyword">if</span>(w[i] &gt; w[j])&#123;<br>                k = w[i];<br>                w[i] = w[j];<br>                w[j] = k;<br>            &#125;<br>        &#125;<br>    &#125;<br>    T = (HuffmanTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(HuffmanNode) * n);<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        T[i].weight = w[i];<br>        T[i].parent = T[i].lchild = T[i].rchild = <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i = n - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--)&#123;<br>        T[i].parent = i - <span class="hljs-number">1</span>;<br>        T[i - <span class="hljs-number">1</span>].lchild = i;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat安装配置</title>
      <link href="/2022/02/23/tomcat-install/"/>
      <url>/2022/02/23/tomcat-install/</url>
      
        <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://tomcat.apache.org/">官网下载（https://tomcat.apache.org/）</a></p><p>选择对应的版本的core下载</p><p>eg.64位Windows10的<a href="https://dlcdn.apache.org/tomcat/tomcat-10/v10.0.16/bin/apache-tomcat-10.0.16-windows-x64.zip">下载链接</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>解压并且获取<strong>文件夹的地址</strong>，如：C:\Users\zhuan\apache-tomcat-10.0.16</p><p>在”系统变量”里新建变量名：<strong>CATALINA_BASE</strong>，变量值：C:\Users\zhuan\apache-tomcat-10.0.16（此处为你的解压包路径）</p><p>在”系统变量”里新建变量名：<strong>CATALINA_HOME</strong>，变量值：C:\Users\zhuan\apache-tomcat-10.0.16</p><p>在”系统变量”里打开<strong>Path</strong>变量，添加变量值：**%CATALINA_HOME%\lib** 和 <strong>%CATALINA_HOME%\bin</strong></p><h2 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell">C:\Users\zhuan\apache<span class="hljs-literal">-tomcat-10</span>.<span class="hljs-number">0.16</span>\bin&gt;service.bat install<br>Installing the service <span class="hljs-string">&#x27;Tomcat10&#x27;</span> ...<br><span class="hljs-keyword">Using</span> CATALINA_HOME:    <span class="hljs-string">&quot;C:\Users\zhuan\apache-tomcat-10.0.16&quot;</span><br><span class="hljs-keyword">Using</span> CATALINA_BASE:    <span class="hljs-string">&quot;C:\Users\zhuan\apache-tomcat-10.0.16&quot;</span><br><span class="hljs-keyword">Using</span> JAVA_HOME:        <span class="hljs-string">&quot;C:\Program Files\Java\jdk-17.0.2\&quot;</span><br><span class="hljs-keyword">Using</span> JRE_HOME:         <span class="hljs-string">&quot;C:\Program Files\Java\jdk-17.0.2\&quot;</span><br><span class="hljs-keyword">Using</span> JVM:              <span class="hljs-string">&quot;C:\Program Files\Java\jdk-17.0.2\\bin\server\jvm.dll&quot;</span><br>The service <span class="hljs-string">&#x27;Tomcat10&#x27;</span> has been installed.<br><br>C:\Users\zhuan\apache<span class="hljs-literal">-tomcat-10</span>.<span class="hljs-number">0.16</span>\bin&gt;<br></code></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>访问bin文件夹下的startup.bat文件或者tomcat10.exe或者tomcat10w.exe打开服务</p><p>访问本机8080端口即可访问Tomcat</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>localhost:8080无法打开页面，而127.0.0.1:8080可以打开页面</p><ul><li>  更改host文件（C:/WINDOWS/system32/drivers/etc/hosts）将下列解析添加进host</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini">127.0.0.1       localhost<br>::1             localhost<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL的配置安装</title>
      <link href="/2022/02/23/mysql-install/"/>
      <url>/2022/02/23/mysql-install/</url>
      
        <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>进入MySQL官网<a href="https://dev.mysql.com/downloads/mysql/">下载（https://dev.mysql.com/downloads/mysql/）</a></p><p>选择对应的版本下载</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>将下载好的文件夹解压，并且获取<strong>文件夹的地址</strong>，如：C:\Users\zhuan\mysql-8.0.28-winx64</p><p>在该目录下创建新文本文件，内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysql]</span><br><span class="hljs-comment"># mysql默认字符集</span><br><span class="hljs-attr">default-character-set</span>=utf8<br><span class="hljs-section">[mysqld]</span><br><span class="hljs-comment"># 端口</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br><span class="hljs-comment"># mysql安装目录</span><br><span class="hljs-attr">basedir</span>=C:\Users\zhuan\mysql-<span class="hljs-number">8.0</span>.<span class="hljs-number">28</span>-winx64 <span class="hljs-comment">#更改为文件夹地址</span><br><span class="hljs-comment"># 数据存放目录</span><br><span class="hljs-attr">datadir</span>=C:\Users\zhuan\mysql-<span class="hljs-number">8.0</span>.<span class="hljs-number">28</span>-winx64\data <span class="hljs-comment">#更改为文件夹地址+\data</span><br><span class="hljs-comment"># 最大连接数</span><br><span class="hljs-attr">max_connections</span>=<span class="hljs-number">20</span><br><span class="hljs-comment"># 服务器端编码</span><br><span class="hljs-attr">character-set-server</span>=utf8<br><span class="hljs-comment"># 创建新表时使用默认存储引擎</span><br><span class="hljs-attr">default-storage-engine</span>=INNODB<br><span class="hljs-comment"># 设置协议认证方式</span><br><span class="hljs-attr">default_authentication_plugin</span>=mysql_native_password<br></code></pre></td></tr></table></figure><p>将文本文件更改名称为my.ini</p><p>在该文件夹内创建一个文件夹命名为data</p><p>在命令提示窗口进入bin目录下运行命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs powershell">C:\Users\zhuan\mysql<span class="hljs-literal">-8</span>.<span class="hljs-number">0.28</span><span class="hljs-literal">-winx64</span>\bin&gt;mysqld <span class="hljs-literal">-install</span><br>Service successfully installed.<br><br>C:\Users\zhuan\mysql<span class="hljs-literal">-8</span>.<span class="hljs-number">0.28</span><span class="hljs-literal">-winx64</span>\bin&gt;mysqld <span class="hljs-literal">--initialize-insecure</span> <span class="hljs-literal">--user</span>=mysql<br><br>C:\Users\zhuan\mysql<span class="hljs-literal">-8</span>.<span class="hljs-number">0.28</span><span class="hljs-literal">-winx64</span>\bin&gt;net <span class="hljs-built_in">start</span> mysql<br>MySQL 服务正在启动 .<br>MySQL 服务已经启动成功。<br><br><br>C:\Users\zhuan\mysql<span class="hljs-literal">-8</span>.<span class="hljs-number">0.28</span><span class="hljs-literal">-winx64</span>\bin&gt;mysql <span class="hljs-literal">-u</span> root <span class="hljs-literal">-p</span><br>Enter password:<br>Welcome to the MySQL monitor.  Commands <span class="hljs-keyword">end</span> with ; or \g.<br>Your MySQL connection id is <span class="hljs-number">8</span><br>Server version: <span class="hljs-number">8.0</span>.<span class="hljs-number">28</span> MySQL Community Server - GPL<br><br>Copyright (c) <span class="hljs-number">2000</span>, <span class="hljs-number">2022</span>, Oracle and/or its affiliates.<br><br>Oracle is a registered trademark of Oracle Corporation and/or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br><span class="hljs-built_in">Type</span> <span class="hljs-string">&#x27;help;&#x27;</span> or <span class="hljs-string">&#x27;\h&#x27;</span> <span class="hljs-keyword">for</span> help. <span class="hljs-built_in">Type</span> <span class="hljs-string">&#x27;\c&#x27;</span> to <span class="hljs-built_in">clear</span> the current input statement.<br><br>mysql&gt; ALTER USER <span class="hljs-string">&#x27;root&#x27;</span><span class="hljs-string">@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27;;</span><br><span class="hljs-string">Query OK, 0 rows affected (0.01 sec)</span><br><span class="hljs-string"></span><br><span class="hljs-string">mysql&gt; quit</span><br><span class="hljs-string">Bye</span><br><span class="hljs-string"></span><br><span class="hljs-string">C:\Users\zhuan\mysql-8.0.28-winx64\bin&gt;</span><br></code></pre></td></tr></table></figure><p>此电脑（右键）——属性——系统——高级系统设置——系统属性——环境变量</p><p>将文件夹地址加上\bin后加入系统变量的<strong>Path</strong>变量</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MinGW环境安装</title>
      <link href="/2022/02/23/mingw-install/"/>
      <url>/2022/02/23/mingw-install/</url>
      
        <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>在<a href="https://sourceforge.net/projects/mingw-w64/files/">sourceforge仓库（https://sourceforge.net/projects/mingw-w64/files/）</a>下载文件</p><p>下载列表如下：</p><p><strong>MinGW-W64 GCC-8.1.0</strong><br>x86_64-posix-sjlj<br>x86_64-posix-seh<br>x86_64-win32-sjlj<br>x86_64-win32-seh<br>i686-posix-sjlj<br>i686-posix-dwarf<br>i686-win32-sjlj<br>i686-win32-dwarf</p><p>前4个为64位，后四个为32位。其中posix为一般使用，win32为运行Windows程序</p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>将下载的压缩包解压，并且获取<strong>其内bin文件夹的地址</strong>，如：C:\Program Files\mingw64\bin</p><p>此电脑（右键）——属性——系统——高级系统设置——系统属性——环境变量</p><p>将地址加入系统变量的<strong>Path</strong>变量后</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs powershell">Microsoft Windows [版本 <span class="hljs-number">10.0</span><span class="hljs-type">.22000.493</span>]<br>(c) Microsoft Corporation。保留所有权利。<br><br>C:\Users\zhuan&gt;gcc <span class="hljs-literal">-v</span><br><span class="hljs-keyword">Using</span> built-in specs.<br>COLLECT_GCC=gcc<br>COLLECT_LTO_WRAPPER=C:/Program\ Files/mingw64/bin/../libexec/gcc/x86_64<span class="hljs-literal">-w64-mingw32</span>/<span class="hljs-number">8.1</span>.<span class="hljs-number">0</span>/lto<span class="hljs-literal">-wrapper</span>.exe<br>Target: x86_64<span class="hljs-literal">-w64-mingw32</span><br>Configured with: ../../../src/gcc<span class="hljs-literal">-8</span>.<span class="hljs-number">1.0</span>/configure <span class="hljs-literal">--host</span>=x86_64<span class="hljs-literal">-w64-mingw32</span> <span class="hljs-literal">--build</span>=x86_64<span class="hljs-literal">-w64-mingw32</span> <span class="hljs-literal">--target</span>=x86_64<span class="hljs-literal">-w64-mingw32</span> <span class="hljs-literal">--prefix</span>=/mingw64 <span class="hljs-literal">--with-sysroot</span>=/c/mingw810/x86_64<span class="hljs-literal">-810-posix-seh-rt_v6-rev0</span>/mingw64 <span class="hljs-literal">--enable-shared</span> <span class="hljs-literal">--enable-static</span> <span class="hljs-literal">--disable-multilib</span> <span class="hljs-literal">--enable-languages</span>=c,c++,fortran,lto <span class="hljs-literal">--enable-libstdcxx-time</span>=yes <span class="hljs-literal">--enable-threads</span>=posix <span class="hljs-literal">--enable-libgomp</span> <span class="hljs-literal">--enable-libatomic</span> <span class="hljs-literal">--enable-lto</span> <span class="hljs-literal">--enable-graphite</span> <span class="hljs-literal">--enable-checking</span>=release <span class="hljs-literal">--enable-fully-dynamic-string</span> <span class="hljs-literal">--enable-version-specific-runtime-libs</span> <span class="hljs-literal">--disable-libstdcxx-pch</span> <span class="hljs-literal">--disable-libstdcxx-debug</span> <span class="hljs-literal">--enable-bootstrap</span> <span class="hljs-literal">--disable-rpath</span> <span class="hljs-literal">--disable-win32-registry</span> <span class="hljs-literal">--disable-nls</span> <span class="hljs-literal">--disable-werror</span> <span class="hljs-literal">--disable-symvers</span> <span class="hljs-literal">--with-gnu-as</span> <span class="hljs-literal">--with-gnu-ld</span> <span class="hljs-literal">--with-arch</span>=nocona <span class="hljs-literal">--with-tune</span>=core2 <span class="hljs-literal">--with-libiconv</span> <span class="hljs-literal">--with-system-zlib</span> <span class="hljs-literal">--with-gmp</span>=/c/mingw810/prerequisites/x86_64<span class="hljs-literal">-w64-mingw32-static</span> <span class="hljs-literal">--with-mpfr</span>=/c/mingw810/prerequisites/x86_64<span class="hljs-literal">-w64-mingw32-static</span> <span class="hljs-literal">--with-mpc</span>=/c/mingw810/prerequisites/x86_64<span class="hljs-literal">-w64-mingw32-static</span> <span class="hljs-literal">--with-isl</span>=/c/mingw810/prerequisites/x86_64<span class="hljs-literal">-w64-mingw32-static</span> <span class="hljs-literal">--with-pkgversion</span>=<span class="hljs-string">&#x27;x86_64-posix-seh-rev0, Built by MinGW-W64 project&#x27;</span> <span class="hljs-literal">--with-bugurl</span>=https://sourceforge.net/projects/mingw<span class="hljs-literal">-w64</span> CFLAGS=<span class="hljs-string">&#x27;-O2 -pipe -fno-ident -I/c/mingw810/x86_64-810-posix-seh-rt_v6-rev0/mingw64/opt/include -I/c/mingw810/prerequisites/x86_64-zlib-static/include -I/c/mingw810/prerequisites/x86_64-w64-mingw32-static/include&#x27;</span> CXXFLAGS=<span class="hljs-string">&#x27;-O2 -pipe -fno-ident -I/c/mingw810/x86_64-810-posix-seh-rt_v6-rev0/mingw64/opt/include -I/c/mingw810/prerequisites/x86_64-zlib-static/include -I/c/mingw810/prerequisites/x86_64-w64-mingw32-static/include&#x27;</span> CPPFLAGS=<span class="hljs-string">&#x27; -I/c/mingw810/x86_64-810-posix-seh-rt_v6-rev0/mingw64/opt/include -I/c/mingw810/prerequisites/x86_64-zlib-static/include -I/c/mingw810/prerequisites/x86_64-w64-mingw32-static/include&#x27;</span> LDFLAGS=<span class="hljs-string">&#x27;-pipe -fno-ident -L/c/mingw810/x86_64-810-posix-seh-rt_v6-rev0/mingw64/opt/lib -L/c/mingw810/prerequisites/x86_64-zlib-static/lib -L/c/mingw810/prerequisites/x86_64-w64-mingw32-static/lib &#x27;</span><br>Thread model: posix<br>gcc version <span class="hljs-number">8.1</span>.<span class="hljs-number">0</span> (x86_64<span class="hljs-literal">-posix-seh-rev0</span>, Built by MinGW<span class="hljs-literal">-W64</span> project)<br><br>C:\Users\zhuan&gt;<br></code></pre></td></tr></table></figure><p>成功输出版本信息8.1.0</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JDK安装以及环境变量配置</title>
      <link href="/2022/02/23/jdk-install/"/>
      <url>/2022/02/23/jdk-install/</url>
      
        <content type="html"><![CDATA[<h2 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h2><p>打开<a href="https://www.oracle.com/cn/java/">Oracle官网https://www.oracle.com/cn/java/</a></p><p>选择立即下载java跳转下载界面，选择对应的版本后下载jdk</p><h3 id="64位Windows："><a href="#64位Windows：" class="headerlink" title="64位Windows："></a>64位Windows：</h3><p>jdk17下载链接：<a href="https://download.oracle.com/java/17/latest/jdk-17_windows-x64_bin.exe">https://download.oracle.com/java/17/latest/jdk-17_windows-x64_bin.exe</a></p><h3 id="64位Ubuntu（基于树莓派）："><a href="#64位Ubuntu（基于树莓派）：" class="headerlink" title="64位Ubuntu（基于树莓派）："></a>64位Ubuntu（基于树莓派）：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@ubuntu:~$ mkdir jdk<br>ubuntu@ubuntu:~$ cd jdk<br>ubuntu@ubuntu:~/jdk$ wget https://download.oracle.com/java/17/latest/jdk-17_linux-aarch64_bin.tar.gz<br></code></pre></td></tr></table></figure><h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2><h3 id="Windows："><a href="#Windows：" class="headerlink" title="Windows："></a>Windows：</h3><p>打开安装程序，<strong>复制安装路径</strong>如：*<em>C:\Program Files\Java\jdk-17.0.2\*</em></p><h3 id="Ubuntu："><a href="#Ubuntu：" class="headerlink" title="Ubuntu："></a>Ubuntu：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@ubuntu:~/jdk$ sudo tar -zxvf jdk-17_linux-aarch64_bin.tar.gz<br></code></pre></td></tr></table></figure><p>需要记住解压路径</p><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><h3 id="Windows：-1"><a href="#Windows：-1" class="headerlink" title="Windows："></a>Windows：</h3><p>此电脑（右键）——属性——系统——高级系统设置——系统属性——环境变量</p><p>在系统变量里新建<strong>变量名</strong>：<strong>JAVA_HOME</strong> <strong>变量值</strong>为安装时<strong>复制的地址</strong>：C:\Program Files\Java\jdk-17.0.2\</p><p>在系统变量里找到变量名为<strong>Path</strong>的变量，在末尾添加**%JAVA_HOME%bin**</p><h3 id="Ubuntu：-1"><a href="#Ubuntu：-1" class="headerlink" title="Ubuntu："></a>Ubuntu：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@ubuntu:~/jdk$ sudo vim /etc/profile<br></code></pre></td></tr></table></figure><p>在末尾添加：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">JAVA_HOME=/home/ubuntu/java/jdk/jdk-17.0.2/ # 值为解压路径<br>CLASSPATH=$JAVA_HOME/lib/<br>PATH=$PATH:$JAVA_HOME/bin<br>export PATH JAVA_HOME CLASSPATH<br></code></pre></td></tr></table></figure><p>保存并退出，并且更新源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@ubuntu:~/jdk$ source /etc/profile<br></code></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><h3 id="Windows：-2"><a href="#Windows：-2" class="headerlink" title="Windows："></a>Windows：</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs powershell">Microsoft Windows [版本 <span class="hljs-number">10.0</span><span class="hljs-type">.22000.493</span>]<br>(c) Microsoft Corporation。保留所有权利。<br><br>C:\Users\zhuan&gt;java <span class="hljs-literal">-version</span><br>java version <span class="hljs-string">&quot;17.0.2&quot;</span> <span class="hljs-number">2022</span><span class="hljs-literal">-01-18</span> LTS<br>Java(TM) SE Runtime Environment (build <span class="hljs-number">17.0</span>.<span class="hljs-number">2</span>+<span class="hljs-number">8</span><span class="hljs-literal">-LTS-86</span>)<br>Java HotSpot(TM) <span class="hljs-number">64</span><span class="hljs-literal">-Bit</span> Server VM (build <span class="hljs-number">17.0</span>.<span class="hljs-number">2</span>+<span class="hljs-number">8</span><span class="hljs-literal">-LTS-86</span>, mixed mode, sharing)<br><br>C:\Users\zhuan&gt;javac <span class="hljs-literal">-version</span><br>javac <span class="hljs-number">17.0</span>.<span class="hljs-number">2</span><br><br>C:\Users\zhuan&gt;<br></code></pre></td></tr></table></figure><h3 id="Ubuntu：-2"><a href="#Ubuntu：-2" class="headerlink" title="Ubuntu："></a>Ubuntu：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@ubuntu:~/jdk$ java -version<br>java version &quot;17.0.2&quot; 2022-01-18 LTS<br>Java(TM) SE Runtime Environment (build 17.0.2+8-LTS-86)<br>Java HotSpot(TM) 64-Bit Server VM (build 17.0.2+8-LTS-86, mixed mode, sharing)<br>ubuntu@ubuntu:~/jdk$ javac -version<br>javac 17.0.2<br>ubuntu@ubuntu:~/jdk$<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构——串</title>
      <link href="/2022/02/19/sstring/"/>
      <url>/2022/02/19/sstring/</url>
      
        <content type="html"><![CDATA[<p>头文件SString.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// SString.h - 串</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXLEN 255</span><br><br><span class="hljs-comment">/*********************************************************************************************************************************</span><br><span class="hljs-comment"> * 数据类型一览</span><br><span class="hljs-comment"> * SString 定长顺序存储（静态数组）</span><br><span class="hljs-comment"> * HString 串的顺序存储 可拓展长度顺序存储（指针数组）</span><br><span class="hljs-comment"> * StringNode, *Node 串的链式存储</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 操作函数 共享栈操作在函数名后加0或者1 不带头结点的链栈操作在函数名后加WithoutFirstNode</span><br><span class="hljs-comment"> * bool StrAssign(&amp;T, *ch) 赋值操作，将字符串ch复制到串T中 正常结束返回1，否则返回0</span><br><span class="hljs-comment"> * bool StrCopy(&amp;T, S) 复制操作，将S串复制到串T中 正常结束返回1，否则返回0</span><br><span class="hljs-comment"> * bool StrEmpty(S) 判空 空返回1，否则返回0</span><br><span class="hljs-comment"> * int StrLength(S) 求长度 返回串的长度</span><br><span class="hljs-comment"> * bool ClearString(S) 清空 正常结束返回1，否则返回0</span><br><span class="hljs-comment"> * bool DestroyString(&amp;S) 销毁 正常结束返回1，否则返回0</span><br><span class="hljs-comment"> * bool Concat(&amp;T, S1, S2) 串连接,将S1和S2连接后存入T 正常结束返回1，否则返回0</span><br><span class="hljs-comment"> * bool SubString(&amp;Sub, S, pos, len) 求子串，求出串S中位于pos位置的长度为len长度的子串存入Sub 正常结束返回1，否则返回0</span><br><span class="hljs-comment"> * int StrCompare(S, T) 比较操作 比较串S和T的大小，返回值小于0，等于0，大于0，分别表示S&lt;T，S=T，S&gt;T</span><br><span class="hljs-comment"> * int Index(S, T) 定位操作，求出串S中第一次出现串T的位置 返回值为定位串T的位置，如果没有找到返回0</span><br><span class="hljs-comment"> * int Index2(S, T) 朴素模式匹配，求出串S中第一次出现串T的位置 返回值为定位串T的位置，如果没有找到返回0</span><br><span class="hljs-comment"> * void get_next(T, next) 求模式串T的next数组</span><br><span class="hljs-comment"> * void get_nextval(T, nextval) 求模式串优化后的nextval数组</span><br><span class="hljs-comment"> * int Index_KMP(S, T) KMP算法求出串S中第一次出现串T的位置 返回值为定位串T的位置，如果没有找到返回0</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> *********************************************************************************************************************************/</span><br><br><span class="hljs-comment">// 串的顺序存储 定长顺序存储（静态数组）</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SString</span>&#123;</span><br>    <span class="hljs-type">char</span> ch[MAXLEN];  <span class="hljs-comment">// 每个分量存储一个字符</span><br>    <span class="hljs-type">int</span> length;  <span class="hljs-comment">// 串的实际长度</span><br>&#125;SString;<br><br><span class="hljs-comment">// 串的顺序存储 可拓展长度顺序存储（指针数组）</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HString</span>&#123;</span><br>    <span class="hljs-type">char</span> *ch;  <span class="hljs-comment">// 按串长分配存储区，ch指向串的基地址</span><br>    <span class="hljs-type">int</span> length;  <span class="hljs-comment">// 串的长度</span><br>&#125;HString;<br><span class="hljs-comment">//HString S; S.ch = (char *)malloc(MAXLEN*sizeof(char)); S.length = 0;</span><br><br><span class="hljs-comment">// 串的链式存储</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StringNode</span>&#123;</span><br>    <span class="hljs-type">char</span> ch;  <span class="hljs-comment">// 每个结点存1字符，若要提高存储密度，则可设置为多个字符数组</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StringNode</span> *<span class="hljs-title">next</span>;</span><br>&#125;StringNode, *Node;<br><br><span class="hljs-comment">// 赋值操作</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">StrAssign</span><span class="hljs-params">(SString &amp;T, <span class="hljs-type">char</span> *ch)</span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(ch[i] != <span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>        T.ch[i] = ch[i];<br>        i++;<br>    &#125;<br>    T.length = i;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 复制操作</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">StrCopy</span><span class="hljs-params">(SString &amp;T, SString S)</span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(S.ch[i] != <span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>        T.ch[i] = S.ch[i];<br>        i++;<br>    &#125;<br>    T.length = i;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 判空</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">StrEmpty</span><span class="hljs-params">(SString S)</span>&#123;<br>    <span class="hljs-keyword">return</span> S.length == <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 求长度</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">StrLength</span><span class="hljs-params">(SString S)</span>&#123;<br>    <span class="hljs-keyword">return</span> S.length;<br>&#125;<br><br><span class="hljs-comment">// 清空</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">ClearString</span><span class="hljs-params">(SString &amp;S)</span>&#123;<br>    S.length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 销毁</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">DestroyString</span><span class="hljs-params">(SString &amp;S)</span>&#123;<br>    S.length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 串连接</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Concat</span><span class="hljs-params">(SString &amp;T, SString S1, SString S2)</span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(S1.ch[i] != <span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>        T.ch[i] = S1.ch[i];<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(S2.ch[i] != <span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>        T.ch[i] = S2.ch[i];<br>        i++;<br>    &#125;<br>    T.length = i;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 求子串</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">SubString</span><span class="hljs-params">(SString &amp;Sub, SString S, <span class="hljs-type">int</span> pos, <span class="hljs-type">int</span> len)</span>&#123;<br>    <span class="hljs-keyword">if</span>(pos &lt; <span class="hljs-number">1</span>  pos &gt; S.length  len &lt; <span class="hljs-number">0</span>  len &gt; S.length - pos + <span class="hljs-number">1</span>)&#123;  <span class="hljs-comment">// 子串位置不合法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    Sub.length = len;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;<br>        Sub.ch[i] = S.ch[pos - <span class="hljs-number">1</span> + i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 比较操作</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">StrCompare</span><span class="hljs-params">(SString S, SString T)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; S.length &amp;&amp; i &lt; T.length; i++)&#123;<br>        <span class="hljs-keyword">if</span>(S.ch[i] != T.ch[i])&#123;<br>            <span class="hljs-keyword">return</span> S.ch[i]-T.ch[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> S.length - T.length;<br>&#125;<br><br><span class="hljs-comment">// 定位操作</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Index</span><span class="hljs-params">(SString S, SString T)</span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, n = S.length, m = T.length;<br>    SString Sub;<br>    <span class="hljs-keyword">while</span>(i &lt;= n - m + <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(SubString(Sub, S, i, m) &amp;&amp; StrCompare(Sub, T) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>        i++;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 朴素模式匹配</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Index2</span><span class="hljs-params">(SString S, SString T)</span>&#123;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 当前匹配的字符位置</span><br>    <span class="hljs-type">int</span> i = k, j = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i &lt;= S.length &amp;&amp; j &lt;= T.length)&#123;<br>        <span class="hljs-keyword">if</span>(S.ch[i] == T.ch[j])&#123;<br>            i++;  <span class="hljs-comment">// 继续比较后续字符</span><br>            j++;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            k++;  <span class="hljs-comment">// 匹配失败，向后移动匹配字符位置</span><br>            i = k;<br>            j = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(j &gt; T.length)&#123;<br>        <span class="hljs-keyword">return</span> k;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// KMP算法：朴素模式算法优化</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Index_KMP_Need_Next</span><span class="hljs-params">(SString S, SString T, <span class="hljs-type">int</span> next[])</span>&#123;  <span class="hljs-comment">// 传入next数组</span><br>    <span class="hljs-comment">// 例：google的next数组为next[7] = &#123;0, 0, 1, 1, 1, 2, 1&#125;</span><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i &lt;= S.length &amp;&amp; j &lt;= T.length)&#123;<br>        <span class="hljs-keyword">if</span>(j == <span class="hljs-number">0</span>  S.ch[i] == T.ch[j])&#123;  <span class="hljs-comment">// 通过j==0来判断是否是第一位不相符，然后i，j都加一以至于可以i向后移，j归为1</span><br>            i++;<br>            j++;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            j = next[j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(i &gt; T.length)&#123;<br>        <span class="hljs-keyword">return</span> i-T.length;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 求模式串T的next数组</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_next</span><span class="hljs-params">(SString T, <span class="hljs-type">int</span> next[])</span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    next[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i &lt; T.length)&#123;<br>        <span class="hljs-keyword">if</span>(j == <span class="hljs-number">0</span>  T.ch[i] == T.ch[j])&#123;<br>            ++i;<br>            ++j;<br>            <span class="hljs-comment">// 若pi等于pj，则next[j+1] = next[j] + 1</span><br>            next[i] = j;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            j = next[j];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// next数组优化为nextval数组</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_nextval</span><span class="hljs-params">(SString T, <span class="hljs-type">int</span> nextval[])</span>&#123;<br>    <span class="hljs-type">int</span> *next = new <span class="hljs-type">int</span>[T.length+<span class="hljs-number">1</span>];<br>    get_next(T, next);<br>    nextval[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">2</span>; j &lt;=T.length; j++)&#123;<br>        <span class="hljs-keyword">if</span>(T.ch[j] == T.ch[next[j]])&#123;<br>            nextval[j] = nextval[next[j]];<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            nextval[j] = next[j];<br>        &#125;<br>    &#125;<br>    delete[] next;<br>&#125;<br><br><span class="hljs-comment">// KMP算法</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Index_KMP</span><span class="hljs-params">(SString S, SString T)</span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> *next = new <span class="hljs-type">int</span>[T.length+<span class="hljs-number">1</span>];<br>    get_next(T, next);  <span class="hljs-comment">// 求模式串T的next数组 时间复杂度O(m)</span><br>    <span class="hljs-keyword">while</span>(i &lt;= S.length &amp;&amp; j &lt;= T.length)&#123;  <span class="hljs-comment">// 时间复杂度O(n)</span><br>        <span class="hljs-keyword">if</span>(j == <span class="hljs-number">0</span>  S.ch[i] == T.ch[j])&#123;<br>            i++;<br>            j++;  <span class="hljs-comment">// 继续比较后继字符</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            j = next[j];  <span class="hljs-comment">// 模式串向右移动</span><br>        &#125;<br>    &#125;<br>    delete[] next;<br>    <span class="hljs-keyword">if</span>(j&gt;T.length)&#123;<br>        <span class="hljs-keyword">return</span> i-T.length;  <span class="hljs-comment">// 匹配成功返回匹配的位置</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构——栈和队列</title>
      <link href="/2022/02/15/stackandqueue/"/>
      <url>/2022/02/15/stackandqueue/</url>
      
        <content type="html"><![CDATA[<p>头文件StackAndQueue.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// StackAndQueue.h - 栈和队列</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SqStackMaxSize 10  <span class="hljs-comment">// 定义静态链表的最大长度</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SqQueueMaxSize 10  <span class="hljs-comment">// 定义顺序队列的最大长度</span></span><br><br><span class="hljs-comment">// 数据部分用int类型数据模拟</span><br><br><span class="hljs-comment">/*********************************************************************************************************************************</span><br><span class="hljs-comment"> * 数据类型一览</span><br><span class="hljs-comment"> * SqStack 顺序栈</span><br><span class="hljs-comment"> * ShStack 共享栈</span><br><span class="hljs-comment"> * LiStack 链栈</span><br><span class="hljs-comment"> * SqQueue 顺序队列</span><br><span class="hljs-comment"> * ShQueue 共享队列</span><br><span class="hljs-comment"> * LinkQueue 链队列</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 操作函数 共享栈操作在函数名后加0或者1 不带头结点的链栈操作在函数名后加WithoutFirstNode</span><br><span class="hljs-comment"> * int Length(S) 求栈或者队列长度 返回栈长或者队列长</span><br><span class="hljs-comment"> * bool Empty(S) 判断栈S是否为空 栈空返回1，否则返回0</span><br><span class="hljs-comment"> * bool Full(S) 判断栈S是否已满 栈满返回1，否则返回0</span><br><span class="hljs-comment"> * int Push(S,e) 入栈，将e压入栈S 正常结束返回0，栈满，无法入栈返回-1</span><br><span class="hljs-comment"> * int Pop(S,e) 出栈，将栈S的栈顶元素e出栈 正常结束返回0，栈空，无法出栈返回-1</span><br><span class="hljs-comment"> * int GetTop(S,e) 获取栈S的栈顶元素e 正常结束返回0，栈空，无法获取返回-1</span><br><span class="hljs-comment"> * int DestroyStack(S) 销毁栈S 正常结束返回0</span><br><span class="hljs-comment"> * int PrintStack(S) 打印栈S 正常结束返回0</span><br><span class="hljs-comment"> * int InitQueue(Q) 初始化队列Q 正常结束返回0</span><br><span class="hljs-comment"> * int DeQueue(Q,e) 出队，将队列Q的队头元素e出队 正常结束返回0，队空，无法出队返回-1</span><br><span class="hljs-comment"> * int GetHead(Q,e) 获取队列Q的队头元素e 正常结束返回0，队空，无法获取返回-1</span><br><span class="hljs-comment"> * int PrintQueue(Q) 打印队列Q 正常结束返回0</span><br><span class="hljs-comment"> * int DestroyQueue(Q) 销毁队列Q 正常结束返回0</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> *********************************************************************************************************************************/</span><br><br><span class="hljs-comment">// 顺序栈</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqStack</span> &#123;</span><br>    <span class="hljs-type">int</span> data[SqStackMaxSize];<br>    <span class="hljs-type">int</span> top;<br>&#125; SqStack;<br><br><span class="hljs-comment">// 初始化顺序栈</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">InitStack</span><span class="hljs-params">(SqStack &amp;S)</span> &#123;<br>    S.top = <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 初始化栈顶指针为-1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断顺序栈是否为空</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Empty</span><span class="hljs-params">(SqStack S)</span> &#123;<br>    <span class="hljs-keyword">return</span> S.top == <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断顺序栈是否已满</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Full</span><span class="hljs-params">(SqStack S)</span> &#123;<br>    <span class="hljs-keyword">return</span> S.top == SqStackMaxSize - <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 入栈</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Push</span><span class="hljs-params">(SqStack &amp;S, <span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Full(S)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 栈满，无法入栈返回-1</span><br>    &#125;<br>    S.data[++S.top] = x;  <span class="hljs-comment">// 入栈</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 出栈</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Pop</span><span class="hljs-params">(SqStack &amp;S, <span class="hljs-type">int</span> &amp;x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Empty(S)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 栈空，无法出栈返回-1</span><br>    &#125;<br>    x = S.data[S.top--];  <span class="hljs-comment">// 出栈</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 获取栈顶元素</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">GetTop</span><span class="hljs-params">(SqStack S, <span class="hljs-type">int</span> &amp;x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Empty(S)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 栈空，无法获取栈顶元素返回-1</span><br>    &#125;<br>    x = S.data[S.top];  <span class="hljs-comment">// 获取栈顶元素</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 顺序栈的销毁</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">DestroyStack</span><span class="hljs-params">(SqStack &amp;S)</span> &#123;<br>    S.top = <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 销毁栈，栈顶指针指向-1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 顺序栈的输出</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">PrintStack</span><span class="hljs-params">(SqStack S)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Empty(S)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 栈空，无法输出返回-1</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= S.top; i++) &#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; S.data[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">// 输出栈</span><br>    &#125;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 顺序栈的求长度</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Length</span><span class="hljs-params">(SqStack S)</span> &#123;<br>    <span class="hljs-keyword">return</span> S.top + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 返回栈的长度</span><br>&#125;<br><br><span class="hljs-comment">// 共享栈</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ShStack</span> &#123;</span><br>    <span class="hljs-type">int</span> data[SqStackMaxSize];<br>    <span class="hljs-type">int</span> top0;  <span class="hljs-comment">// 0号栈栈顶指针</span><br>    <span class="hljs-type">int</span> top1;  <span class="hljs-comment">// 1号栈栈顶指针</span><br>&#125; ShStack;<br><br><span class="hljs-comment">// 初始化共享栈</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">InitStack</span><span class="hljs-params">(ShStack &amp;S)</span> &#123;<br>    S.top0 = <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 初始化0号栈栈顶指针为-1</span><br>    S.top1 = SqStackMaxSize;  <span class="hljs-comment">// 初始化1号栈栈顶指针为栈的最大长度</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断共享栈是否为空</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Empty</span><span class="hljs-params">(ShStack S)</span> &#123;<br>    <span class="hljs-keyword">return</span> S.top0 == <span class="hljs-number">-1</span> &amp;&amp; S.top1 == SqStackMaxSize;<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">Empty0</span><span class="hljs-params">(ShStack S)</span> &#123;<br>    <span class="hljs-keyword">return</span> S.top0 == <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">Empty1</span><span class="hljs-params">(ShStack S)</span> &#123;<br>    <span class="hljs-keyword">return</span> S.top1 == SqStackMaxSize;<br>&#125;<br><br><span class="hljs-comment">// 判断共享栈是否已满</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Full</span><span class="hljs-params">(ShStack S)</span> &#123;<br>    <span class="hljs-keyword">return</span> S.top1<span class="hljs-number">-1</span> == S.top0;  <span class="hljs-comment">// 栈顶指针相邻为栈满</span><br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">Full0</span><span class="hljs-params">(ShStack S)</span> &#123;<br>    <span class="hljs-keyword">return</span> Full(S);<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">Full1</span><span class="hljs-params">(ShStack S)</span> &#123;<br>    <span class="hljs-keyword">return</span> Full(S);<br>&#125;<br><br><span class="hljs-comment">// 入栈</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Push0</span><span class="hljs-params">(ShStack &amp;S, <span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Full0(S)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 栈满，无法入栈返回-1</span><br>    &#125;<br>    S.data[++S.top0] = x;  <span class="hljs-comment">// 入栈</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Push1</span><span class="hljs-params">(ShStack &amp;S, <span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Full1(S)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 栈满，无法入栈返回-1</span><br>    &#125;<br>    S.data[--S.top1] = x;  <span class="hljs-comment">// 入栈</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 出栈</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Pop0</span><span class="hljs-params">(ShStack &amp;S, <span class="hljs-type">int</span> &amp;x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Empty0(S)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 栈空，无法出栈返回-1</span><br>    &#125;<br>    x = S.data[S.top0--];  <span class="hljs-comment">// 出栈</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Pop1</span><span class="hljs-params">(ShStack &amp;S, <span class="hljs-type">int</span> &amp;x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Empty1(S)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 栈空，无法出栈返回-1</span><br>    &#125;<br>    x = S.data[S.top1++];  <span class="hljs-comment">// 出栈</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 获取栈顶元素</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">GetTop0</span><span class="hljs-params">(ShStack S, <span class="hljs-type">int</span> &amp;x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Empty0(S)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 栈空，无法获取栈顶元素返回-1</span><br>    &#125;<br>    x = S.data[S.top0];  <span class="hljs-comment">// 获取栈顶元素</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">GetTop1</span><span class="hljs-params">(ShStack S, <span class="hljs-type">int</span> &amp;x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Empty1(S)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 栈空，无法获取栈顶元素返回-1</span><br>    &#125;<br>    x = S.data[S.top1];  <span class="hljs-comment">// 获取栈顶元素</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 共享栈的销毁</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">DestroyStack</span><span class="hljs-params">(ShStack &amp;S)</span> &#123;<br>    S.top0 = <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 销毁0号栈，栈顶指针指向-1</span><br>    S.top1 = SqStackMaxSize;  <span class="hljs-comment">// 销毁1号栈，栈顶指针指向栈的最大长度</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">DestroyStack0</span><span class="hljs-params">(ShStack &amp;S)</span> &#123;<br>    S.top0 = <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 销毁0号栈，栈顶指针指向-1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">DestroyStack1</span><span class="hljs-params">(ShStack &amp;S)</span> &#123;<br>    S.top1 = SqStackMaxSize;  <span class="hljs-comment">// 销毁1号栈，栈顶指针指向栈的最大长度</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 共享栈的输出</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">PrintStack0</span><span class="hljs-params">(ShStack S)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Empty0(S)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 栈空，无法输出返回-1</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= S.top0; i++) &#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; S.data[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">// 输出0号栈，输出栈顶元素</span><br>    &#125;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">PrintStack1</span><span class="hljs-params">(ShStack S)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Empty1(S)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 栈空，无法输出返回-1</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = SqStackMaxSize<span class="hljs-number">-1</span>; i &gt; S.top1; i--) &#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; S.data[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">// 输出1号栈，输出栈顶元素</span><br>    &#125;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">PrintStack</span><span class="hljs-params">(ShStack S)</span> &#123;<br>    PrintStack0(S);<br>    <span class="hljs-keyword">if</span> (Empty1(S)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 栈空，无法输出返回-1</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = SqStackMaxSize<span class="hljs-number">-1</span>; i &gt; S.top1; i--) &#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; S.data[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">// 输出1号栈，输出栈顶元素</span><br>    &#125;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 共享栈求长度</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">StackLength0</span><span class="hljs-params">(ShStack S)</span> &#123;<br>    <span class="hljs-keyword">return</span> S.top0+<span class="hljs-number">1</span>;  <span class="hljs-comment">// 返回0号栈的长度</span><br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">StackLength1</span><span class="hljs-params">(ShStack S)</span> &#123;<br>    <span class="hljs-keyword">return</span> SqStackMaxSize-S.top1;  <span class="hljs-comment">// 返回1号栈的长度</span><br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">StackLength</span><span class="hljs-params">(ShStack S)</span> &#123;<br>    <span class="hljs-keyword">return</span> StackLength0(S) + StackLength1(S);  <span class="hljs-comment">// 返回共享栈的长度</span><br>&#125;<br><br><span class="hljs-comment">// 链栈</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Linknode</span>&#123;</span><br>    <span class="hljs-type">int</span> data;  <span class="hljs-comment">// 数据域</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Linknode</span> *<span class="hljs-title">next</span>;</span>  <span class="hljs-comment">// 指针域</span><br>&#125;*LiStack;<br><br><span class="hljs-comment">// 初始化链栈</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">InitStack</span><span class="hljs-params">(LiStack &amp;L)</span> &#123;<br>    L = (LiStack)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Linknode));  <span class="hljs-comment">// 分配结点</span><br>    <span class="hljs-keyword">if</span> (L == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 分配失败，返回-1</span><br>    &#125;<br>    L-&gt;next = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 初始化链栈</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 初始化链栈 不带头结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">InitStackWithoutFirstNode</span><span class="hljs-params">(LiStack &amp;L)</span> &#123;<br>    L = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 初始化链栈</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断链栈是否为空</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Empty</span><span class="hljs-params">(LiStack L)</span> &#123;<br>    <span class="hljs-keyword">return</span> L-&gt;next == <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 判断链栈是否为空</span><br>&#125;<br><br><span class="hljs-comment">// 判断链栈是否空 不带头结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">EmptyWithoutFirstNode</span><span class="hljs-params">(LiStack L)</span> &#123;<br>    <span class="hljs-keyword">return</span> L == <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 判断链栈是否为空</span><br>&#125;<br><br><span class="hljs-comment">// 入栈</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Push</span><span class="hljs-params">(LiStack &amp;L, <span class="hljs-type">int</span> x)</span> &#123;<br>    LiStack p = (LiStack)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Linknode));  <span class="hljs-comment">// 分配结点</span><br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 分配失败，返回-1</span><br>    &#125;<br>    p-&gt;data = x;  <span class="hljs-comment">// 入栈</span><br>    p-&gt;next = L-&gt;next;  <span class="hljs-comment">// 入栈</span><br>    L-&gt;next = p;  <span class="hljs-comment">// 入栈</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 入栈 不带头结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">PushWithoutFirstNode</span><span class="hljs-params">(LiStack &amp;L, <span class="hljs-type">int</span> x)</span> &#123;<br>    LiStack p = (LiStack)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Linknode));  <span class="hljs-comment">// 分配结点</span><br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 分配失败，返回-1</span><br>    &#125;<br>    p-&gt;data = x;  <span class="hljs-comment">// 入栈</span><br>    p-&gt;next = L;  <span class="hljs-comment">// 入栈</span><br>    L = p;  <span class="hljs-comment">// 入栈</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 出栈</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Pop</span><span class="hljs-params">(LiStack &amp;L, <span class="hljs-type">int</span> &amp;x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Empty(L)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 栈空，无法出栈返回-1</span><br>    &#125;<br>    LiStack p = L-&gt;next;  <span class="hljs-comment">// 出栈</span><br>    x = p-&gt;data;  <span class="hljs-comment">// 出栈</span><br>    L-&gt;next = p-&gt;next;  <span class="hljs-comment">// 出栈</span><br>    <span class="hljs-built_in">free</span>(p);  <span class="hljs-comment">// 释放结点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 出栈 不带头结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">PopWithoutFirstNode</span><span class="hljs-params">(LiStack &amp;L, <span class="hljs-type">int</span> &amp;x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (EmptyWithoutFirstNode(L)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 栈空，无法出栈返回-1</span><br>    &#125;<br>    LiStack p = L;  <span class="hljs-comment">// 出栈</span><br>    x = p-&gt;data;  <span class="hljs-comment">// 出栈</span><br>    L = p-&gt;next;  <span class="hljs-comment">// 出栈</span><br>    <span class="hljs-built_in">free</span>(p);  <span class="hljs-comment">// 释放结点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 输出链栈</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">PrintStack</span><span class="hljs-params">(LiStack L)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Empty(L)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 栈空，无法输出返回-1</span><br>    &#125;<br>    <span class="hljs-keyword">while</span> (L-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; L-&gt;next-&gt;data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">// 输出链栈</span><br>        L = L-&gt;next;  <span class="hljs-comment">// 输出链栈</span><br>    &#125;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 输出链栈 不带头结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">PrintStackWithoutFirstNode</span><span class="hljs-params">(LiStack L)</span> &#123;<br>    <span class="hljs-keyword">if</span> (EmptyWithoutFirstNode(L)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 栈空，无法输出返回-1</span><br>    &#125;<br>    <span class="hljs-keyword">while</span> (L != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; L-&gt;data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">// 输出链栈</span><br>        L = L-&gt;next;  <span class="hljs-comment">// 输出链栈</span><br>    &#125;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 获取栈顶元素</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">GetTop</span><span class="hljs-params">(LiStack L, <span class="hljs-type">int</span> &amp;x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Empty(L)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 栈空，无法获取栈顶元素返回-1</span><br>    &#125;<br>    x = L-&gt;next-&gt;data;  <span class="hljs-comment">// 获取栈顶元素</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 获取栈顶元素 不带头结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">GetTopWithoutFirstNode</span><span class="hljs-params">(LiStack L, <span class="hljs-type">int</span> &amp;x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (EmptyWithoutFirstNode(L)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 栈空，无法获取栈顶元素返回-1</span><br>    &#125;<br>    x = L-&gt;data;  <span class="hljs-comment">// 获取栈顶元素</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 删除链栈</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">DeleteStack</span><span class="hljs-params">(LiStack &amp;L)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Empty(L)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 栈空，无法删除返回-1</span><br>    &#125;<br>    <span class="hljs-keyword">while</span> (L-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        LiStack p = L-&gt;next;  <span class="hljs-comment">// 删除链栈</span><br>        L-&gt;next = p-&gt;next;  <span class="hljs-comment">// 删除链栈</span><br>        <span class="hljs-built_in">free</span>(p);  <span class="hljs-comment">// 释放结点</span><br>    &#125;<br>    <span class="hljs-built_in">free</span>(L);  <span class="hljs-comment">// 释放结点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 删除链栈 不带头结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">DeleteStackWithoutFirstNode</span><span class="hljs-params">(LiStack &amp;L)</span> &#123;<br>    <span class="hljs-keyword">if</span> (EmptyWithoutFirstNode(L)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 栈空，无法删除返回-1</span><br>    &#125;<br>    <span class="hljs-keyword">while</span> (L != <span class="hljs-literal">NULL</span>) &#123;<br>        LiStack p = L;  <span class="hljs-comment">// 删除链栈</span><br>        L = L-&gt;next;  <span class="hljs-comment">// 删除链栈</span><br>        <span class="hljs-built_in">free</span>(p);  <span class="hljs-comment">// 释放结点</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 队列的顺序实现</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqQueue</span>&#123;</span><br>    <span class="hljs-type">int</span> data[SqQueueMaxSize];  <span class="hljs-comment">// 数据</span><br>    <span class="hljs-type">int</span> front;  <span class="hljs-comment">// 队头</span><br>    <span class="hljs-type">int</span> rear;  <span class="hljs-comment">// 队尾</span><br>&#125;SqQueue;<br><br><span class="hljs-comment">// 初始化队列</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">InitQueue</span><span class="hljs-params">(SqQueue &amp;Q)</span> &#123;<br>    Q.front = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 队头</span><br>    Q.rear = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 队尾</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断队列是否为空</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Empty</span><span class="hljs-params">(SqQueue Q)</span> &#123;<br>    <span class="hljs-keyword">return</span> Q.front == Q.rear;<br>&#125;<br><br><span class="hljs-comment">// 判断队列是否满</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Full</span><span class="hljs-params">(SqQueue Q)</span> &#123;<br>    <span class="hljs-keyword">return</span> (Q.rear + <span class="hljs-number">1</span>) % SqQueueMaxSize == Q.front;<br>&#125;<br><br><span class="hljs-comment">// 入队</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">EnQueue</span><span class="hljs-params">(SqQueue &amp;Q, <span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Full(Q)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 队满，无法入队返回-1</span><br>    &#125;<br>    Q.data[Q.rear] = x;  <span class="hljs-comment">// 入队</span><br>    Q.rear = (Q.rear + <span class="hljs-number">1</span>) % SqQueueMaxSize;  <span class="hljs-comment">// 入队</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 出队</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">DeQueue</span><span class="hljs-params">(SqQueue &amp;Q, <span class="hljs-type">int</span> &amp;x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Empty(Q)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 队空，无法出队返回-1</span><br>    &#125;<br>    x = Q.data[Q.front];  <span class="hljs-comment">// 出队</span><br>    Q.front = (Q.front + <span class="hljs-number">1</span>) % SqQueueMaxSize;  <span class="hljs-comment">// 出队</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 获取对头元素</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">GetHead</span><span class="hljs-params">(SqQueue Q, <span class="hljs-type">int</span> &amp;x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Empty(Q)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 队空，无法获取对头元素返回-1</span><br>    &#125;<br>    x = Q.data[Q.front];  <span class="hljs-comment">// 获取对头元素</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 删除队列</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">DeleteQueue</span><span class="hljs-params">(SqQueue &amp;Q)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Empty(Q)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 队空，无法删除返回-1</span><br>    &#125;<br>    Q.front = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 队头</span><br>    Q.rear = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 队尾</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 队列长度</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Length</span><span class="hljs-params">(SqQueue Q)</span> &#123;<br>    <span class="hljs-keyword">return</span> (Q.rear - Q.front + SqQueueMaxSize) % SqQueueMaxSize;<br>&#125;<br><br><span class="hljs-comment">// 链队列</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkNode</span>&#123;</span><br>    <span class="hljs-type">int</span> data;  <span class="hljs-comment">// 数据</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkNode</span> *<span class="hljs-title">next</span>;</span>  <span class="hljs-comment">// 指针</span><br>&#125;LinkNode;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkQueue</span>&#123;</span><br>    LinkNode *front;  <span class="hljs-comment">// 队头</span><br>    LinkNode *rear;  <span class="hljs-comment">// 队尾</span><br>    <span class="hljs-comment">// int length;  // 队列长度(如果频繁访问队列长度可添加长度计数器)</span><br>&#125;LinkQueue;<br><br><span class="hljs-comment">// 初始化链队列</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">InitQueue</span><span class="hljs-params">(LinkQueue &amp;Q)</span>&#123;<br>    Q.front = (LinkNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));  <span class="hljs-comment">// 队头</span><br>    Q.rear = Q.front;  <span class="hljs-comment">// 队尾</span><br>    Q.front-&gt;next = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 队头指针</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 初始化成功</span><br>&#125;<br><br><span class="hljs-comment">// 初始化链队列 不带头结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">InitQueueWithoutFirstNode</span><span class="hljs-params">(LinkQueue &amp;Q)</span>&#123;<br>    Q.front = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 队头</span><br>    Q.rear = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 队尾</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 初始化成功</span><br>&#125;<br><br><span class="hljs-comment">// 判断链队列是否为空</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Empty</span><span class="hljs-params">(LinkQueue Q)</span>&#123;<br>    <span class="hljs-keyword">return</span> Q.front == Q.rear;<br>&#125;<br><br><span class="hljs-comment">// 判断链队列是否为空 不带头结点</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">EmptyWithoutFirstNode</span><span class="hljs-params">(LinkQueue Q)</span>&#123;<br>    <span class="hljs-keyword">return</span> Q.front == <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">// 入队</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">EnQueue</span><span class="hljs-params">(LinkQueue &amp;Q, <span class="hljs-type">int</span> x)</span>&#123;<br>    LinkNode *s = (LinkNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));  <span class="hljs-comment">// 创建结点</span><br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 创建结点失败，无法入队返回-1</span><br>    &#125;<br>    s-&gt;data = x;  <span class="hljs-comment">// 新结点数据</span><br>    s-&gt;next = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 新结点的next指针为空</span><br>    Q.rear-&gt;next = s;  <span class="hljs-comment">// 将新结点插入队尾</span><br>    Q.rear = s;  <span class="hljs-comment">// 修改对尾指针</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 入队成功</span><br>&#125;<br><br><span class="hljs-comment">// 出队</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">DeQueue</span><span class="hljs-params">(LinkQueue &amp;Q, <span class="hljs-type">int</span> &amp;x)</span>&#123;<br>    <span class="hljs-keyword">if</span> (Empty(Q)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 队空，无法出队返回-1</span><br>    &#125;<br>    LinkNode *p = Q.front-&gt;next;  <span class="hljs-comment">// 出队结点</span><br>    x = p-&gt;data;  <span class="hljs-comment">// 出队结点数据</span><br>    Q.front-&gt;next = p-&gt;next;  <span class="hljs-comment">// 将队头指针指向出队结点的下一个结点</span><br>    <span class="hljs-keyword">if</span> (Q.rear == p) &#123;  <span class="hljs-comment">// 如果出队结点是队尾结点，则修改队尾指针</span><br>        Q.rear = Q.front;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(p);  <span class="hljs-comment">// 释放结点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 出队成功</span><br>&#125;<br><br><span class="hljs-comment">// 入队 不带头结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">EnQueueWithoutFirstNode</span><span class="hljs-params">(LinkQueue &amp;Q, <span class="hljs-type">int</span> x)</span>&#123;<br>    LinkNode *s = (LinkNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));  <span class="hljs-comment">// 创建结点</span><br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 创建结点失败，无法入队返回-1</span><br>    &#125;<br>    s-&gt;data = x;  <span class="hljs-comment">// 新结点数据</span><br>    s-&gt;next = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 新结点的next指针为空</span><br>    <span class="hljs-keyword">if</span> (EmptyWithoutFirstNode(Q)) &#123;  <span class="hljs-comment">// 如果队列为空</span><br>        Q.front = s;  <span class="hljs-comment">// 队头指针指向新结点</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 如果队列不为空</span><br>        Q.rear-&gt;next = s;  <span class="hljs-comment">// 将新结点插入队尾</span><br>    &#125;<br>    Q.rear = s;  <span class="hljs-comment">// 修改对尾指针</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 入队成功</span><br>&#125;<br><br><span class="hljs-comment">// 出队 不带头结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">DeQueueWithoutFirstNode</span><span class="hljs-params">(LinkQueue &amp;Q, <span class="hljs-type">int</span> &amp;x)</span>&#123;<br>    <span class="hljs-keyword">if</span> (EmptyWithoutFirstNode(Q)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 队空，无法出队返回-1</span><br>    &#125;<br>    LinkNode *p = Q.front;  <span class="hljs-comment">// 出队结点</span><br>    x = p-&gt;data;  <span class="hljs-comment">// 出队结点数据</span><br>    Q.front = p-&gt;next;  <span class="hljs-comment">// 将队头指针指向出队结点的下一个结点</span><br>    <span class="hljs-keyword">if</span> (Q.rear == p) &#123;  <span class="hljs-comment">// 如果出队结点是队尾结点，则修改队尾指针</span><br>        Q.rear = Q.front;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(p);  <span class="hljs-comment">// 释放结点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 出队成功</span><br>&#125;<br><br><span class="hljs-comment">// 打印链队列</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">PrintQueue</span><span class="hljs-params">(LinkQueue Q)</span>&#123;<br>    <span class="hljs-keyword">if</span> (Empty(Q)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 队空，无法打印返回-1</span><br>    &#125;<br>    LinkNode *p = Q.front-&gt;next;  <span class="hljs-comment">// 打印结点</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, p-&gt;data);  <span class="hljs-comment">// 打印结点数据</span><br>        p = p-&gt;next;  <span class="hljs-comment">// 指向下一个结点</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);  <span class="hljs-comment">// 换行</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 打印成功</span><br>&#125;<br><br><span class="hljs-comment">// 打印链队列 不带头结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">PrintQueueWithoutFirstNode</span><span class="hljs-params">(LinkQueue Q)</span>&#123;<br>    <span class="hljs-keyword">if</span> (EmptyWithoutFirstNode(Q)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 队空，无法打印返回-1</span><br>    &#125;<br>    LinkNode *p = Q.front;  <span class="hljs-comment">// 打印结点</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, p-&gt;data);  <span class="hljs-comment">// 打印结点数据</span><br>        p = p-&gt;next;  <span class="hljs-comment">// 指向下一个结点</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);  <span class="hljs-comment">// 换行</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 打印成功</span><br>&#125;<br><br><span class="hljs-comment">// 求链队列长度</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Length</span><span class="hljs-params">(LinkQueue Q)</span>&#123;<br>    <span class="hljs-keyword">if</span> (Empty(Q)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 队空，长度为0</span><br>    &#125;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 长度</span><br>    LinkNode *p = Q.front-&gt;next;  <span class="hljs-comment">// 计算结点</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        len++;  <span class="hljs-comment">// 长度加1</span><br>        p = p-&gt;next;  <span class="hljs-comment">// 指向下一个结点</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> len;  <span class="hljs-comment">// 返回长度</span><br>&#125;<br><br><span class="hljs-comment">// 求链队列长度 不带头结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">LengthWithoutFirstNode</span><span class="hljs-params">(LinkQueue Q)</span>&#123;<br>    <span class="hljs-keyword">if</span> (EmptyWithoutFirstNode(Q)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 队空，长度为0</span><br>    &#125;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 长度</span><br>    LinkNode *p = Q.front;  <span class="hljs-comment">// 计算结点</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        len++;  <span class="hljs-comment">// 长度加1</span><br>        p = p-&gt;next;  <span class="hljs-comment">// 指向下一个结点</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> len;  <span class="hljs-comment">// 返回长度</span><br>&#125;<br><br><span class="hljs-comment">// 销毁链队列</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">DestroyQueue</span><span class="hljs-params">(LinkQueue &amp;Q)</span>&#123;<br>    <span class="hljs-keyword">if</span> (Empty(Q)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 队空，无法销毁返回-1</span><br>    &#125;<br>    LinkNode *p = Q.front-&gt;next;  <span class="hljs-comment">// 销毁结点</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        LinkNode *q = p-&gt;next;  <span class="hljs-comment">// 保存下一个结点</span><br>        <span class="hljs-built_in">free</span>(p);  <span class="hljs-comment">// 释放结点</span><br>        p = q;  <span class="hljs-comment">// 指向下一个结点</span><br>    &#125;<br>    Q.front-&gt;next = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 队头指针指向空</span><br>    Q.rear = Q.front;  <span class="hljs-comment">// 队尾指针指向队头</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 销毁成功</span><br>&#125;<br><br><span class="hljs-comment">// 销毁链队列 不带头结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">DestroyQueueWithoutFirstNode</span><span class="hljs-params">(LinkQueue &amp;Q)</span>&#123;<br>    <span class="hljs-keyword">if</span> (EmptyWithoutFirstNode(Q)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 队空，无法销毁返回-1</span><br>    &#125;<br>    LinkNode *p = Q.front;  <span class="hljs-comment">// 销毁结点</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        LinkNode *q = p-&gt;next;  <span class="hljs-comment">// 保存下一个结点</span><br>        <span class="hljs-built_in">free</span>(p);  <span class="hljs-comment">// 释放结点</span><br>        p = q;  <span class="hljs-comment">// 指向下一个结点</span><br>    &#125;<br>    Q.front = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 队头指针指向空</span><br>    Q.rear = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 队尾指针指向空</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 销毁成功</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构——线性表</title>
      <link href="/2022/02/13/linearlist/"/>
      <url>/2022/02/13/linearlist/</url>
      
        <content type="html"><![CDATA[<p>头文件LinearList.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// LinearList.h - 线性表</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 10  <span class="hljs-comment">// 定义静态链表的最大长度</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SqListMaxSize 10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SqListInitSize 10</span><br><br><span class="hljs-comment">// 数据部分用int类型数据模拟</span><br><br><span class="hljs-comment">/*********************************************************************************************************************************</span><br><span class="hljs-comment"> * 数据类型一览</span><br><span class="hljs-comment"> * SqList 顺序表 静态分配 </span><br><span class="hljs-comment"> * SeqList 顺序表 动态分配 </span><br><span class="hljs-comment"> * LNode *, LinkList 单链表</span><br><span class="hljs-comment"> * DNode *, DLinklist 双链表</span><br><span class="hljs-comment"> * Node 静态链表（单个）</span><br><span class="hljs-comment"> * SLinkList 静态链表（长度为MAXSIZE）</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 操作函数</span><br><span class="hljs-comment"> * int Length(L) 求表L长度函数 返回表长</span><br><span class="hljs-comment"> * int LengthWithoutFirstNode(L) 求不带头结点的单链表L长度函数 返回表长 </span><br><span class="hljs-comment"> * bool Empty(L) 判空函数  空返回1，非空返回0</span><br><span class="hljs-comment"> * bool EmptyWithoutFirstNode (L) 单链表不带头结点判空函数  空返回1，非空返回0</span><br><span class="hljs-comment"> * int PrintList(L) 按顺序输出表L里内容 输出成功返回0，表空无输出返回1 </span><br><span class="hljs-comment"> * int PrintListWithoutFirstNode(L) 按顺序输出无头节点单链表L里内容 输出成功返回0，表空无输出返回1</span><br><span class="hljs-comment"> * int InitList(L) 初始化表L 正常结束返回0，内存不够初始化失败返回1</span><br><span class="hljs-comment"> * int InitListWithoutFirstNode(L) 无头节点初始化单链表表L 正常结束返回0，内存不够初始化失败返回1</span><br><span class="hljs-comment"> * int IncreaseSize(L, len) 动态分配顺序表增加长度 正常结束返回0，len大小不合法返回1</span><br><span class="hljs-comment"> * int ListInsert(L, e) 在表L的末尾插入元素e 正常结束返回0，表满导致内存不够返回1</span><br><span class="hljs-comment"> * int ListInsert(L, e, i) 在表L的第i位插入元素e 正常结束返回0，变量i大小不合法返回1，表满导致内存不够返回2</span><br><span class="hljs-comment"> * int ListInsertWithoutFirstNode(L, e, i) 在不带头结点的单链表L的第i位插入元素e 正常结束返回0，变量i大小不合法返回1</span><br><span class="hljs-comment"> * int ListDelete(L, i) 删除表L的第i位元素 正常结束返回0，变量i大小不合法返回1</span><br><span class="hljs-comment"> * int ListDeleteWithoutFirstNode(L, i) 删除表L的第i位元素 正常结束返回0，变量i大小不合法返回1</span><br><span class="hljs-comment"> * int ListPop(L, i) 弹出表L的第i位 正常结束返回弹出数据，变量i大小不合法返回-1</span><br><span class="hljs-comment"> * int ListPopWithoutFirstNode(L, i) 弹出表L的第i位 正常结束返回弹出数据，变量i大小不合法返回-1</span><br><span class="hljs-comment"> * int GetElem(L, i) 按位查找表L的元素 返回查找到的元素值，变量i大小不合法返回-1</span><br><span class="hljs-comment"> * LNode *GetElem(L, i) 按位查找表L的结点 返回查找到的结点，变量i大小不合法返回NULL</span><br><span class="hljs-comment"> * LNode *GetElemWithoutFirstNode (L, i) 按位查找不带头结点的单链表L的结点 返回查找到的结点，变量i大小不合法返回NULL</span><br><span class="hljs-comment"> * DNode *GetElem(L, i) 按位查找表L的结点 返回查找到的结点，变量i大小不合法返回NULL</span><br><span class="hljs-comment"> * int LocateElem(L, e) 按值查找表L的元素 返回查找到的元素位置，无匹配值返回0</span><br><span class="hljs-comment"> * LNode *LocateElem(L, e) 按值查找表L的元素 返回查找到的元素位置，无匹配值返回NULL</span><br><span class="hljs-comment"> * DNode *LocateElem(L, e) 按值查找表L的元素 返回查找到的元素位置，无匹配值返回NULL</span><br><span class="hljs-comment"> * int InsertNextNode(p, e) 单链表中在指定结点后插入元素e 正常结束返回0，p结点不存在返回1，新结点创建失败返回2</span><br><span class="hljs-comment"> * int InsertNextDNode(p, s) 双链表中在结点p后插入结点s 正常结束返回0，结点不存在返回1</span><br><span class="hljs-comment"> * int InsertPriorNode(p, e) 单链表中在指定结点前插入元素e 正常结束返回0，p结点不存在返回1，新结点创建失败返回2</span><br><span class="hljs-comment"> * int DeleteNode(p) 删除单链表中指定结点p 正常结束返回0，结点p不存在返回1，结点p为链表最后结点则无法删除返回2</span><br><span class="hljs-comment"> * int DeleteDNode(p) 删除单链表中指定结点p 正常结束返回0，结点p不存在返回1</span><br><span class="hljs-comment"> * int DeleteNextDNode(p) 删除双链表中指定结点p的后继节点q 正常结束返回0，结点p不存在返回1，结点p为链表最后结点则无法删除返回2</span><br><span class="hljs-comment"> * LinkList List_TailInsert() 正向建立一个单链表 返回已经初始化好的单链表</span><br><span class="hljs-comment"> * LinkList List_TailInsertWithoutFirstNode() 正向建立一个单链表 返回已经初始化好的不带头结点的单链表</span><br><span class="hljs-comment"> * LinkList List_HeadInsert() 反向建立一个单链表 返回已经初始化好的单链表</span><br><span class="hljs-comment"> * LinkList List_HeadInsertWithoutFirstNode() 反向建立一个单链表 返回已经初始化好的不带头结点的单链表</span><br><span class="hljs-comment"> * DsetoryList(L) 删除表L，归还内存给系统 正常结束返回0 (双链表已完成)</span><br><span class="hljs-comment"> * int List_Reverse(L) 反转链表L 正常结束返回0</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> *********************************************************************************************************************************/</span><br><br><span class="hljs-comment">// 顺序表 静态分配 </span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqList</span> &#123;</span><br>    <span class="hljs-type">int</span> data[SqListMaxSize];  <span class="hljs-comment">// 利用静态数组存放数据 </span><br>    <span class="hljs-type">int</span> length;  <span class="hljs-comment">// 表示当前顺序表长度 </span><br>&#125;SqList;<br><br><span class="hljs-comment">// 顺序表 动态分配（伪动态，实则空间不够开创更大的一篇空间并且将之前的值赋值过去）</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> &#123;</span><br>    <span class="hljs-type">int</span> *data;  <span class="hljs-comment">// 指示动态分配数组的指针 </span><br>    <span class="hljs-type">int</span> MaxSize;  <span class="hljs-comment">// 顺序表的最大容量 </span><br>    <span class="hljs-type">int</span> length;  <span class="hljs-comment">// 顺序表的当前长度 </span><br>&#125;SeqList;<br><br><span class="hljs-comment">// 顺序表求表长 静态分配</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Length</span><span class="hljs-params">(SqList L)</span>&#123;<br>    <span class="hljs-keyword">return</span> L.length;<br>&#125;<br><br><span class="hljs-comment">// 顺序表求表长 动态分配</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Length</span><span class="hljs-params">(SeqList L)</span>&#123;<br>    <span class="hljs-keyword">return</span> L.length;<br>&#125;<br><br><span class="hljs-comment">// 顺序表判空 静态分配</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Empty</span><span class="hljs-params">(SqList L)</span>&#123;<br>    <span class="hljs-keyword">return</span> L.length == <span class="hljs-number">0</span>;  <span class="hljs-comment">// 返回1表示空，返回0表示非空 </span><br>&#125;<br><br><span class="hljs-comment">// 顺序表判空 动态分配</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Empty</span><span class="hljs-params">(SeqList L)</span>&#123;<br>    <span class="hljs-keyword">return</span> L.length == <span class="hljs-number">0</span>;  <span class="hljs-comment">// 返回1表示空，返回0表示非空 </span><br>&#125;<br><br><span class="hljs-comment">// 顺序表输出内容 静态分配</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">PrintList</span><span class="hljs-params">(SqList L)</span>&#123;<br>    <span class="hljs-keyword">if</span>(Empty(L))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 表空则无需输出，返回1 </span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L.length; i++)&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; L.data[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 输出成功完成后返回0 </span><br>&#125;<br><br><span class="hljs-comment">// 顺序表输出内容 动态分配</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">PrintList</span><span class="hljs-params">(SeqList L)</span>&#123;<br>    <span class="hljs-keyword">if</span>(Empty(L))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 表空则无需输出，返回1 </span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L.length; i++)&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; L.data[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 输出成功完成后返回0 </span><br>&#125;<br><br><span class="hljs-comment">// 顺序表初始化 静态分配 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">InitList</span><span class="hljs-params">(SqList &amp;L)</span>&#123;<br>    L.length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0 </span><br>&#125;<br><br><span class="hljs-comment">// 顺序表初始化 动态分配</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">InitList</span><span class="hljs-params">(SeqList &amp;L)</span>&#123;<br>    L.data = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(SqListInitSize*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));  <span class="hljs-comment">// 初始大小为InitSize个ElemType类型的元素大小</span><br><span class="hljs-comment">// 实现初始大小分配方式：malloc申请一整片连续的空间，返回初始地址，然后强制转换成ElemType类型指针 </span><br>    L.MaxSize = SqListInitSize;<br>    L.length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0 </span><br>&#125;<br><br><span class="hljs-comment">// 顺序表增加动态数组长度（本质开拓一片更大的内存空间，将之前的数据转存过去） </span><br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>新建回收内存机制 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">IncreaseSize</span><span class="hljs-params">(SeqList &amp;L, <span class="hljs-type">int</span> len)</span>&#123;  <span class="hljs-comment">// 新增加长度为len </span><br>    <span class="hljs-keyword">if</span>(len &lt; <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 新增地址空间长度有误，返回1</span><br>    &#125;<br>    <span class="hljs-type">int</span> *p = L.data;  <span class="hljs-comment">// 创建一个指针指p向原数据地址 </span><br>    L.data = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>((L.MaxSize+len)*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));  <span class="hljs-comment">// 再将L.data指向新开辟的更大的地址空间 </span><br><span class="hljs-comment">/*ATT:这里malloc的内存大小要以表中MaxSize的数量加上len再乘以ElemType的大小*/</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L.length; i++)&#123;  <span class="hljs-comment">// 将数据迁移到新的地址 </span><br>        L.data[i] = p[i];<br>    &#125;<br>    L.MaxSize += len;  <span class="hljs-comment">// 将顺序表的最大长度增加len </span><br>    <span class="hljs-built_in">free</span>(p);  <span class="hljs-comment">// 释放原始内存空间 </span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><br><span class="hljs-comment">// 顺序表默认插入操作 静态分配 插入末尾 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(SqList &amp;L, <span class="hljs-type">int</span> e)</span>&#123;<br>    <span class="hljs-keyword">if</span>(L.length &gt;= SqListMaxSize)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;  <span class="hljs-comment">// 线性表已满 </span><br>    &#125;<br>    L.data[L.length] = e;<br>    L.length++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><br><span class="hljs-comment">// 顺序表插入操作 静态分配 </span><br><span class="hljs-comment">// 在顺序表L的第i位插入元素e </span><br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>整合将部分数据向前、后移动操作 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(SqList &amp;L, <span class="hljs-type">int</span> e, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>i&gt;L.length+<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 变量i大小不合法 </span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(L.length &gt;= SqListMaxSize)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;  <span class="hljs-comment">// 线性表已满 </span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = L.length; j &gt;= i; j--)&#123;<br>        L.data[j] = L.data[j<span class="hljs-number">-1</span>];  <span class="hljs-comment">// 将i及其后面的元素后移一位 </span><br>    &#125;<br>    L.data[i<span class="hljs-number">-1</span>] = e;<br>    L.length++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><br><span class="hljs-comment">// 顺序表默认插入操作 动态分配 插入末尾 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(SeqList &amp;L, <span class="hljs-type">int</span> e)</span>&#123;<br>    <span class="hljs-keyword">if</span>(L.length &gt;= L.MaxSize)&#123;  <span class="hljs-comment">// 线性表已满 </span><br>        <span class="hljs-type">int</span> functionCode = IncreaseSize(L, SqListMaxSize);<br>        <span class="hljs-keyword">if</span>(functionCode!=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> functionCode;<br>        &#125;<br>    &#125;<br>    L.data[L.length] = e;<br>    L.length++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><br><span class="hljs-comment">// 顺序表插入操作 动态分配 </span><br><span class="hljs-comment">// 在顺序表L的第i位插入元素e </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(SeqList &amp;L, <span class="hljs-type">int</span> e, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>i&gt;L.length+<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 变量i大小不合法 </span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(L.length &gt;= L.MaxSize)&#123;  <span class="hljs-comment">// 线性表已满 </span><br>        <span class="hljs-type">int</span> functionCode = IncreaseSize(L, SqListMaxSize);<br>        <span class="hljs-keyword">if</span>(functionCode!=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> functionCode;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = L.length; j &gt;= i; j--)&#123;  <span class="hljs-comment">// 将i及其后面的元素后移一位 </span><br>        L.data[j] = L.data[j<span class="hljs-number">-1</span>];<br>    &#125;<br>    L.data[i<span class="hljs-number">-1</span>] = e;<br>    L.length++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><br><span class="hljs-comment">// 顺序表删除操作 静态分配</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListDelete</span><span class="hljs-params">(SqList &amp;L, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>i&gt;L.length+<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 变量i大小不合法 </span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i; j&lt;L.length; j++)&#123;<br>        L.data[j<span class="hljs-number">-1</span>] = L.data[j];  <span class="hljs-comment">// 将i及其后面的元素前移一位 </span><br>    &#125;<br>    L.length--;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><br><span class="hljs-comment">// 顺序表删除操作 动态分配</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListDelete</span><span class="hljs-params">(SeqList &amp;L, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>i&gt;L.length+<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 变量i大小不合法 </span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i; j&lt;L.length; j++)&#123;<br>        L.data[j<span class="hljs-number">-1</span>] = L.data[j];  <span class="hljs-comment">// 将i及其后面的元素前移一位 </span><br>    &#125;<br>    L.length--;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><br><span class="hljs-comment">// 顺序表弹出操作 静态分配</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListPop</span><span class="hljs-params">(SqList &amp;L, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>i&gt;L.length+<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 变量i大小不合法 </span><br>    &#125;<br>    <span class="hljs-type">int</span> out = L.data[i<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i; j&lt;L.length; j++)&#123;<br>        L.data[j<span class="hljs-number">-1</span>] = L.data[j];  <span class="hljs-comment">// 将i及其后面的元素前移一位 </span><br>    &#125;<br>    L.length--;<br>    <span class="hljs-keyword">return</span> out;  <span class="hljs-comment">// 正常结束返回弹出值 </span><br>&#125;<br><br><span class="hljs-comment">// 顺序表弹出操作 动态分配</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListPop</span><span class="hljs-params">(SeqList &amp;L, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>i&gt;L.length+<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 变量i大小不合法 </span><br>    &#125;<br>    <span class="hljs-type">int</span> out = L.data[i<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i; j&lt;L.length; j++)&#123;<br>        L.data[j<span class="hljs-number">-1</span>] = L.data[j];  <span class="hljs-comment">// 将i及其后面的元素前移一位 </span><br>    &#125;<br>    L.length--;<br>    <span class="hljs-keyword">return</span> out;  <span class="hljs-comment">// 正常结束返回弹出值 </span><br>&#125;<br><br><span class="hljs-comment">// 顺序表按位查找 静态分配 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">GetElem</span><span class="hljs-params">(SqList L, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>i&gt;L.length+<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 变量i大小不合法 </span><br>    &#125;<br>    <span class="hljs-keyword">return</span> L.data[i<span class="hljs-number">-1</span>];<br>&#125;<br><br><span class="hljs-comment">// 顺序表按位查找 动态分配 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">GetElem</span><span class="hljs-params">(SeqList L, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>i&gt;L.length+<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 变量i大小不合法 </span><br>    &#125;<br>    <span class="hljs-keyword">return</span> L.data[i<span class="hljs-number">-1</span>];<br>&#125;<br><br><span class="hljs-comment">// 顺序表按值查找 静态分配 </span><br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>1.完善查找代码，可返回数组等 2.整合比较代码为函数 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">LocateElem</span><span class="hljs-params">(SqList L, <span class="hljs-type">int</span> e)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L.length; i++)&#123;<br>        <span class="hljs-keyword">if</span>(L.data[i]==e)&#123;  <span class="hljs-comment">// 判断数据是否和给定的数据一致</span><br><span class="hljs-comment">// 当数据为结构类型变量时，要依次比较其每一个分量 </span><br>            <span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 无匹配值返回0 </span><br>&#125;<br><br><span class="hljs-comment">// 顺序表按值查找 动态分配 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">LocateElem</span><span class="hljs-params">(SeqList L, <span class="hljs-type">int</span> e)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L.length; i++)&#123;<br>        <span class="hljs-keyword">if</span>(L.data[i]==e)&#123;<br>            <span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 无匹配值返回0 </span><br>&#125;<br><br><span class="hljs-comment">// 删除顺序表 静态分配</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">DsetoryList</span><span class="hljs-params">(SqList &amp;L)</span>&#123;<br>    <span class="hljs-keyword">if</span>(L.length == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 空表不需要释放 </span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0 </span><br>&#125;<br><br><span class="hljs-comment">// 删除顺序表 动态分配</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">DsetoryList</span><span class="hljs-params">(SeqList &amp;L)</span>&#123;<br>    <span class="hljs-keyword">if</span>(L.length == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 空表不需要释放 </span><br>    &#125;<br>    <span class="hljs-comment">// 释放数据空间</span><br>    <span class="hljs-built_in">free</span>(L.data);<br>    L.length = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 重置长度 </span><br>    L.data = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 重置数据指针</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0 </span><br>&#125;<br><br><span class="hljs-comment">// 单链表</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>&#123;</span>  <span class="hljs-comment">// 定义单链表的结点类型 </span><br>    <span class="hljs-type">int</span> data;  <span class="hljs-comment">//每个结点存放一个元素 数据域 </span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span>  <span class="hljs-comment">// 指针指向下一个结点 指针域 </span><br>&#125;LNode, *LinkList;<br><br><span class="hljs-comment">// 单链表初始化 （默认带头结点） </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">InitList</span><span class="hljs-params">(LinkList &amp;L)</span>&#123;<br>    L = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));  <span class="hljs-comment">//分配头结点</span><br>    <span class="hljs-keyword">if</span>(L == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 头结点指针为空时分配失败，内存不足，返回1</span><br>    &#125;<br>    L-&gt;next = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 头结点之后无结点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0 </span><br>&#125;<br><br><span class="hljs-comment">// 判空操作 </span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Empty</span><span class="hljs-params">(LinkList L)</span>&#123;<br>    <span class="hljs-keyword">return</span> L-&gt;next == <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 返回1表示空，返回0表示非空 </span><br>&#125;<br><br><span class="hljs-comment">// 单链表初始化 不带头结点 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">InitListWithoutFirstNode</span><span class="hljs-params">(LinkList &amp;L)</span>&#123;<br>    L = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 空表，暂无结点，防止脏数据 </span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0 </span><br>&#125;<br><br><span class="hljs-comment">// 判空操作 不带头结点 </span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">EmptyWithoutFirstNode</span><span class="hljs-params">(LinkList L)</span>&#123;<br>    <span class="hljs-keyword">return</span> L == <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 返回1表示空，返回0表示非空 </span><br>&#125;<br><br><span class="hljs-comment">// 单链表求表长</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Length</span><span class="hljs-params">(LinkList L)</span>&#123;<br>    <span class="hljs-type">int</span> length = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 表示初始结点为第0结点</span><br>    LNode *p;  <span class="hljs-comment">// 指针p指向当前扫描到的结点 </span><br>    p = L;<br>    <span class="hljs-keyword">while</span>(p-&gt;next != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;next != L)&#123;  <span class="hljs-comment">// 循环的目的是找到最后一个结点 </span><br>        p = p-&gt;next;<br>        length++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> length;<br>&#125;<br><br><span class="hljs-comment">// 单链表求表长 不带头结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">LengthWithoutFirstNode</span><span class="hljs-params">(LinkList L)</span>&#123;<br>    <span class="hljs-type">int</span> length = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 表示初始结点为第0结点</span><br>    LNode *p;  <span class="hljs-comment">// 指针p指向当前扫描到的结点 </span><br>    p = L;<br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;next != L)&#123;  <span class="hljs-comment">// 循环的目的是找到最后一个结点 </span><br>        p = p-&gt;next;<br>        length++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> length;<br>&#125;<br><br><span class="hljs-comment">// 单链表输出内容</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">PrintList</span><span class="hljs-params">(LinkList L)</span>&#123;<br>    <span class="hljs-keyword">if</span>(Empty(L))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 表空则无需输出，返回1 </span><br>    &#125;<br>    LNode *p;  <span class="hljs-comment">// 指针p指向当前扫描到的结点 </span><br>    p = L;<br>    <span class="hljs-keyword">while</span>(p-&gt;next != <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; p-&gt;next-&gt;data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 输出成功完成后返回0 </span><br>&#125;<br><br><span class="hljs-comment">// 单链表输出内容 不带头结点 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">PrintListWithoutFirstNode</span><span class="hljs-params">(LinkList L)</span>&#123;<br>    <span class="hljs-keyword">if</span>(EmptyWithoutFirstNode(L))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 表空则无需输出，返回1 </span><br>    &#125;<br>    LNode *p;  <span class="hljs-comment">// 指针p指向当前扫描到的结点 </span><br>    p = L;<br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;next != L)&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 输出成功完成后返回0 </span><br>&#125;<br><br><span class="hljs-comment">// 单链表插入操作 默认插入表尾 ATT：不能用此方法建立一个单链表，时间复杂度过高（O(n^2)）</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-type">int</span> e)</span>&#123;<br>    <span class="hljs-keyword">if</span>(L == <span class="hljs-literal">NULL</span>)&#123;<br>        LNode *s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>        s-&gt;data = e;<br>        s-&gt;next = L;<br>        L = s;  <span class="hljs-comment">// 将头指针指向新结点 </span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>    &#125;<br>    LNode *p;  <span class="hljs-comment">// 指针p指向当前扫描到的结点 </span><br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;  <span class="hljs-comment">// j表指向第几个结点 </span><br>    p = L;  <span class="hljs-comment">// L指向头结点，即第0个结点，不存放数据  </span><br>    <span class="hljs-keyword">while</span>(p-&gt;next != <span class="hljs-literal">NULL</span>)&#123;  <span class="hljs-comment">// 循环的目的是找到最后结点并且对其操作</span><br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br>    LNode *s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    s-&gt;data = e;<br>    s-&gt;next = <span class="hljs-literal">NULL</span>;<br>    p-&gt;next = s;  <span class="hljs-comment">// 将s结点排在p之后 </span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">ListInsertWithoutFirstNode</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-type">int</span> e)</span>&#123;<br>    <span class="hljs-keyword">return</span> ListInsert(L, e);<br>&#125;<br><br><span class="hljs-comment">// 单链表插入操作 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListInsertFull</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-type">int</span> e, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 变量i大小不合法 </span><br>    &#125;<br>    LNode *p;  <span class="hljs-comment">// 指针p指向当前扫描到的结点</span><br>    p = L;  <span class="hljs-comment">// L指向头结点，即第0个结点，不存放数据 </span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">int j = 0;  // j表指向第几个结点 </span><br><span class="hljs-comment">while(p != NULL &amp;&amp; j &lt; i - 1)&#123;  // 循环的目的是找到第i-1个结点并且对其操作</span><br><span class="hljs-comment">// 如果插在末尾即加上新元素一共i个结点，找到第i-1个结点后出循环，p指向第i-1个结点 </span><br><span class="hljs-comment">p = p-&gt;next;</span><br><span class="hljs-comment">j++;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">注释区域可替换为如下循环*/</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; p!= <span class="hljs-literal">NULL</span> &amp;&amp; j &lt; i - <span class="hljs-number">1</span>; j++)&#123;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 变量i大小不合法</span><br>    &#125;<br>    LNode *s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    s-&gt;data = e;<br>    s-&gt;next = p-&gt;next;<br>    p-&gt;next = s;  <span class="hljs-comment">// 将s结点排在p之后 </span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><br><span class="hljs-comment">// 单链表插入操作 不带头结点 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListInsertWithoutFirstNodeFull</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-type">int</span> e, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 变量i大小不合法 </span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(i == <span class="hljs-number">1</span>)&#123;<br>        LNode *s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>        s-&gt;data = e;<br>        s-&gt;next = L;<br>        L = s;  <span class="hljs-comment">// 将头指针指向新结点 </span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>    &#125;<br>    LNode *p;  <span class="hljs-comment">// 指针p指向当前扫描到的结点</span><br>    p = L;  <span class="hljs-comment">// L指向头结点，即第0个结点，不存放数据</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; p != <span class="hljs-literal">NULL</span> &amp;&amp; j &lt; i - <span class="hljs-number">1</span>; j++)&#123;<br><span class="hljs-comment">// 这里的j表示当前扫描到的结点位置 </span><br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 变量i大小不合法</span><br>    &#125;<br>    LNode *s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    s-&gt;data = e;<br>    s-&gt;next = p-&gt;next;<br>    p-&gt;next = s;  <span class="hljs-comment">// 将s结点排在p之后 </span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><br><span class="hljs-comment">// 单链表在指定结点后插入元素 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">InsertNextNode</span><span class="hljs-params">(LNode *p, <span class="hljs-type">int</span> e)</span>&#123;<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)&#123;  <span class="hljs-comment">// 便于其他函数调用时候传入NULL值</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// p结点不存在返回1 </span><br>    &#125;<br>    LNode *s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    <span class="hljs-keyword">if</span>(s == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;  <span class="hljs-comment">// 新结点内存分配失败创建失败返回2 </span><br>    &#125;<br>    s-&gt;data = e;<br>    s-&gt;next = p-&gt;next;<br>    p-&gt;next = s;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><br><span class="hljs-comment">// 单链表在指定结点前插入元素 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">InsertPriorNode</span><span class="hljs-params">(LNode *p, <span class="hljs-type">int</span> e)</span>&#123;<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// p结点不存在返回1 </span><br>    &#125;<br>    LNode *s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    <span class="hljs-keyword">if</span>(s == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;  <span class="hljs-comment">// 新结点内存分配失败创建失败返回2 </span><br>    &#125;<br>    s-&gt;next = p-&gt;next;<br>    p-&gt;next = s;<br>    s-&gt;data = p-&gt;data;  <span class="hljs-comment">// p中数据赋值到s </span><br>    p-&gt;data = e;  <span class="hljs-comment">// p中数据覆盖为e </span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><br><span class="hljs-comment">// 单链表删除操作 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListDelete</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 变量i大小不合法 </span><br>    &#125;<br><span class="hljs-comment">// 下行直至循环结束代码可直接调用查找结点函数GetElem查找到i-1个结点</span><br>    LNode *p;  <span class="hljs-comment">// 指针p指向当前扫描到的结点</span><br>    p = L;  <span class="hljs-comment">// L指向头结点，即第0个结点，不存放数据 </span><br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;  <span class="hljs-comment">// j表指向第几个结点 </span><br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp; j &lt; i - <span class="hljs-number">1</span>)&#123;  <span class="hljs-comment">// 循环的目的是找到第i-1个结点并且对其操作</span><br><span class="hljs-comment">// 如果插在末尾即加上新元素一共i个结点，找到第i-1个结点后出循环，p指向第i-1个结点 </span><br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 变量i大小不合法</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(p-&gt;next == <span class="hljs-literal">NULL</span>)&#123;  <span class="hljs-comment">// 此系列代码无法删除最后一个结点</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 变量i大小不合法</span><br>    &#125;<br>    LNode *q = p-&gt;next;<br>    p-&gt;next = q-&gt;next;<br>    <span class="hljs-built_in">free</span>(q);  <span class="hljs-comment">// 释放结点空间 </span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><br><span class="hljs-comment">// 单链表弹出操作 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListPop</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 变量i大小不合法 </span><br>    &#125;<br>    LNode *p;  <span class="hljs-comment">// 指针p指向当前扫描到的结点</span><br>    p = L;  <span class="hljs-comment">// L指向头结点，即第0个结点，不存放数据 </span><br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;  <span class="hljs-comment">// j表指向第几个结点 </span><br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp; j &lt; i - <span class="hljs-number">1</span>)&#123;  <span class="hljs-comment">// 循环的目的是找到第i-1个结点并且对其操作</span><br><span class="hljs-comment">// 如果插在末尾即加上新元素一共i个结点，找到第i-1个结点后出循环，p指向第i-1个结点 </span><br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 变量i大小不合法</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(p-&gt;next == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 变量i大小不合法</span><br>    &#125;<br>    LNode *q = p-&gt;next;<br>    <span class="hljs-type">int</span> out = q-&gt;data;<br>    p-&gt;next = q-&gt;next;<br>    <span class="hljs-built_in">free</span>(q);  <span class="hljs-comment">// 释放结点空间 </span><br>    <span class="hljs-keyword">return</span> out;  <span class="hljs-comment">// 正常结束返回弹出值 </span><br>&#125;<br><br><span class="hljs-comment">// 单链表删除操作 不带头结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListDeleteWithoutFirstNode</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 变量i大小不合法 </span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(i == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(EmptyWithoutFirstNode(L))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        LNode *q = L;<br>        <span class="hljs-keyword">if</span>(L-&gt;next == <span class="hljs-literal">NULL</span>)&#123;<br>            L = <span class="hljs-literal">NULL</span>;<br>            <span class="hljs-built_in">free</span>(q);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>        &#125;<br>        L = L-&gt;next;<br>        <span class="hljs-built_in">free</span>(q);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>    &#125;<br>    LNode *p;  <span class="hljs-comment">// 指针p指向当前扫描到的结点</span><br>    p = L;  <span class="hljs-comment">// L指向头结点，即第0个结点，不存放数据</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; p != <span class="hljs-literal">NULL</span> &amp;&amp; j &lt; i - <span class="hljs-number">1</span>; j++)&#123;<br><span class="hljs-comment">// 这里的j表示当前扫描到的结点位置 </span><br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 变量i大小不合法</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(p-&gt;next == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 变量i大小不合法</span><br>    &#125;<br>    LNode *q = p-&gt;next;<br>    p-&gt;next = q-&gt;next;<br>    <span class="hljs-built_in">free</span>(q);  <span class="hljs-comment">// 释放结点空间 </span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><br><span class="hljs-comment">// 单链表弹出操作 不带头结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListPopWithoutFirstNode</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 变量i大小不合法 </span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(i == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(EmptyWithoutFirstNode(L))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        LNode *q = L;<br>        <span class="hljs-type">int</span> out = L-&gt;data;<br>        <span class="hljs-keyword">if</span>(L-&gt;next == <span class="hljs-literal">NULL</span>)&#123;<br>            L = <span class="hljs-literal">NULL</span>;<br>            <span class="hljs-built_in">free</span>(q);<br>            <span class="hljs-keyword">return</span> out;  <span class="hljs-comment">// 正常结束返回弹出值</span><br>        &#125;<br>        L = L-&gt;next;<br>        <span class="hljs-built_in">free</span>(q);<br>        <span class="hljs-keyword">return</span> out;  <span class="hljs-comment">// 正常结束返回弹出值 </span><br>    &#125;<br>    LNode *p;  <span class="hljs-comment">// 指针p指向当前扫描到的结点</span><br>    p = L;  <span class="hljs-comment">// L指向头结点，即第0个结点，不存放数据</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; p != <span class="hljs-literal">NULL</span> &amp;&amp; j &lt; i - <span class="hljs-number">1</span>; j++)&#123;<br><span class="hljs-comment">// 这里的j表示当前扫描到的结点位置 </span><br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 变量i大小不合法</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(p-&gt;next == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 变量i大小不合法</span><br>    &#125;<br>    LNode *q = p-&gt;next;<br>    <span class="hljs-type">int</span> out = p-&gt;data;<br>    p-&gt;next = q-&gt;next;<br>    <span class="hljs-built_in">free</span>(q);  <span class="hljs-comment">// 释放结点空间 </span><br>    <span class="hljs-keyword">return</span> out;  <span class="hljs-comment">// 正常结束返回弹出值 </span><br>&#125;<br><br><span class="hljs-comment">// 单链表删除指定结点p</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">DeleteNode</span><span class="hljs-params">(LNode *p)</span>&#123;<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 结点p不存在 </span><br>    &#125;<br>    LNode *q = p-&gt;next;<br>    <span class="hljs-keyword">if</span>(q == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;  <span class="hljs-comment">// p为最后一个结点，无法通过该函数删除 </span><br>    &#125;<br>    p-&gt;data = q-&gt;data;  <span class="hljs-comment">// ATT：不能用来删除最后一个结点 </span><br>    p-&gt;next = q-&gt;next;<br>    <span class="hljs-built_in">free</span>(q);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0 </span><br>&#125;<br><br><span class="hljs-comment">// 按位查找表L的结点</span><br>LNode *<span class="hljs-title function_">GetElem</span><span class="hljs-params">(LinkList L, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 变量i大小不合法</span><br>    &#125;<br>    LNode *p;  <span class="hljs-comment">// 指针p指向当前扫描到的结点</span><br>    p = L;  <span class="hljs-comment">// L指向头结点，即第0个结点，不存放数据 </span><br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;  <span class="hljs-comment">// j表指向第几个结点 </span><br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp; j &lt; i)&#123;  <span class="hljs-comment">// 循环的目的是找到第i个结点并且对其操作</span><br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">// 按位查找表L的结点 不带头结点</span><br>LNode *<span class="hljs-title function_">GetElemWithoutFirstNode</span><span class="hljs-params">(LinkList L, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">0</span>  L == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 变量i大小不合法</span><br>    &#125;<br>    LNode *p;  <span class="hljs-comment">// 指针p指向当前扫描到的结点</span><br>    p = L;  <span class="hljs-comment">// L指向头结点，即第0个结点，不存放数据 </span><br>    <span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;  <span class="hljs-comment">// j表指向第几个结点 </span><br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp; j &lt; i)&#123;  <span class="hljs-comment">// 循环的目的是找到第i个结点并且对其操作</span><br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">// ListInsertFull简化代码</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-type">int</span> e, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 变量i大小不合法 </span><br>    &#125;<br>    LNode *p = GetElem(L, i<span class="hljs-number">-1</span>);  <span class="hljs-comment">// 查找到第i-1个结点的位置</span><br>    <span class="hljs-keyword">return</span> InsertNextNode(p, e);  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><br><span class="hljs-comment">// ListInsertWithoutFirstNodeFull简化代码 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListInsertWithoutFirstNode</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-type">int</span> e, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 变量i大小不合法 </span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(i == <span class="hljs-number">1</span>)&#123;<br>        LNode *s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>        s-&gt;data = e;<br>        s-&gt;next = L;<br>        L = s;  <span class="hljs-comment">// 将头指针指向新结点 </span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>    &#125;<br>    LNode *p = GetElem(L, i<span class="hljs-number">-1</span>);  <span class="hljs-comment">// 查找到第i-1个结点的位置</span><br>    <span class="hljs-keyword">return</span> InsertNextNode(p, e);  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><br><span class="hljs-comment">// 按值查找单链表中的元素</span><br>LNode *<span class="hljs-title function_">LocateElem</span><span class="hljs-params">(LinkList L, <span class="hljs-type">int</span> e)</span>&#123;<br>    LNode *p = L;<br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;data != e)&#123;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">// 正向建立一个单链表 尾插法(自动初始化)</span><br>LinkList <span class="hljs-title function_">List_TailInsert</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> sourceData;  <span class="hljs-comment">// 源数据存放变量</span><br>    LinkList L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));  <span class="hljs-comment">// 设置头结点</span><br>    LNode *s, *r = L;  <span class="hljs-comment">// r为表尾指针</span><br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; sourceData;  <span class="hljs-comment">// 输入源数据</span><br>    <span class="hljs-keyword">while</span>(sourceData != <span class="hljs-number">9999</span>)&#123;<br>        s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>        s-&gt;data = sourceData;<br>        r-&gt;next = s;  <span class="hljs-comment">// r指向新表尾</span><br>        r = s;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; sourceData;<br>    &#125;<br>    r-&gt;next = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 结尾置空</span><br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br><br><span class="hljs-comment">// 正向建立一个单链表 尾插法(自动初始化) 不带头结点</span><br>LinkList <span class="hljs-title function_">List_TailInsertWithoutFirstNode</span><span class="hljs-params">()</span>&#123;  <span class="hljs-comment">// 未测试</span><br>    <span class="hljs-type">int</span> sourceData;  <span class="hljs-comment">// 源数据存放变量</span><br>    LinkList L;  <span class="hljs-comment">// 设置头结点</span><br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; sourceData;  <span class="hljs-comment">// 输入源数据</span><br>    <span class="hljs-keyword">if</span>(sourceData != <span class="hljs-number">9999</span>)&#123;<br>        L = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>        L-&gt;data = sourceData;<br>        L-&gt;next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; sourceData;<br>    &#125;<br>    LNode *s, *r = L;  <span class="hljs-comment">// r为表尾指针</span><br>    <span class="hljs-keyword">while</span>(sourceData != <span class="hljs-number">9999</span>)&#123;<br>        s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>        s-&gt;data = sourceData;<br>        r-&gt;next = s;  <span class="hljs-comment">// r指向新表尾</span><br>        r = s;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; sourceData;<br>    &#125;<br>    r-&gt;next = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 结尾置空</span><br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br><br><span class="hljs-comment">// 反向建立一个单链表 头插法(自动初始化)</span><br>LinkList <span class="hljs-title function_">List_HeadInsertFull</span><span class="hljs-params">()</span>&#123;<br>    LNode *s;<br>    <span class="hljs-type">int</span> sourceData;<br>    LinkList L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    L-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; sourceData;<br>    <span class="hljs-keyword">while</span>(sourceData !=<span class="hljs-number">9999</span>)&#123;<br>        s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>        s-&gt;data = sourceData;<br>        s-&gt;next = L-&gt;next;<br>        L-&gt;next = s;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; sourceData;<br>    &#125;<br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br>LinkList <span class="hljs-title function_">List_HeadInsert</span><span class="hljs-params">()</span>&#123;<br>    LNode *s;<br>    <span class="hljs-type">int</span> sourceData;<br>    LinkList L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    L-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; sourceData;<br>    <span class="hljs-keyword">while</span>(sourceData !=<span class="hljs-number">9999</span>)&#123;<br>        InsertNextNode(L, sourceData);<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; sourceData;<br>    &#125;<br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br><br><span class="hljs-comment">// 反向建立一个单链表 头插法(自动初始化) 不带头结点</span><br>LinkList <span class="hljs-title function_">List_HeadInsertWithoutFirstNode</span><span class="hljs-params">()</span>&#123;  <span class="hljs-comment">// 未测试</span><br>    LNode *s;<br>    <span class="hljs-type">int</span> sourceData;<br>    LinkList L = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; sourceData;<br>    <span class="hljs-keyword">if</span>(sourceData != <span class="hljs-number">9999</span>)&#123;<br>        L = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>        L-&gt;data = sourceData;<br>        L-&gt;next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; sourceData;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(sourceData !=<span class="hljs-number">9999</span>)&#123;<br>        s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>        s-&gt;data = sourceData;<br>        s-&gt;next = L-&gt;next;<br>        L-&gt;next = s;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; sourceData;<br>    &#125;<br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br><br><span class="hljs-comment">// 将单链表反转（Copilot）</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">List_Reverse</span><span class="hljs-params">(LinkList &amp;L)</span>&#123;<br>    LNode *p, *q;<br>    p = L-&gt;next;<br>    L-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;next != L)&#123;<br>        q = p-&gt;next;<br>        p-&gt;next = L-&gt;next;<br>        L-&gt;next = p;<br>        p = q;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 删除单链表</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">DsetoryList</span><span class="hljs-params">(LinkList &amp;L)</span>&#123;<br>    LNode *p, *q;<br>    p = L;<br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span>)&#123;<br>        q = p-&gt;next;<br>        <span class="hljs-built_in">free</span>(p);<br>        p = q;<br>    &#125;<br>    L = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 判尾</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">isTail</span><span class="hljs-params">(LNode *p)</span>&#123;<br>    <span class="hljs-keyword">return</span> p-&gt;next == <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">// 双链表</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DNode</span>&#123;</span>  <span class="hljs-comment">// 定义单链表的结点类型 </span><br>    <span class="hljs-type">int</span> data;  <span class="hljs-comment">//每个结点存放一个元素 数据域 </span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DNode</span> *<span class="hljs-title">prior</span>, *<span class="hljs-title">next</span>;</span>  <span class="hljs-comment">// 指针指向下一个结点 指针域 </span><br>&#125;DNode, *DLinklist;<br><br><span class="hljs-comment">// 双链表的初始化（默认为带头结点）</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">InitList</span><span class="hljs-params">(DLinklist &amp;L)</span>&#123;<br>    L = (DNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(DNode));<br>    <span class="hljs-keyword">if</span>(L == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 内存分配失败，初始化失败返回1</span><br>    &#125;<br>    L-&gt;prior = <span class="hljs-literal">NULL</span>;<br>    L-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 双链表的判空</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Empty</span><span class="hljs-params">(DLinklist L)</span>&#123;<br>    <span class="hljs-keyword">return</span> L-&gt;next == <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">// 求表长</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Length</span><span class="hljs-params">(DLinklist L)</span>&#123;<br>    <span class="hljs-type">int</span> length = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 表示初始结点为第0结点</span><br>    DNode *p;  <span class="hljs-comment">// 指针p指向当前扫描到的结点 </span><br>    p = L;<br>    <span class="hljs-keyword">while</span>(p-&gt;next != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;next != L)&#123;  <span class="hljs-comment">// 循环的目的是找到最后一个结点 </span><br>        p = p-&gt;next;<br>        length++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> length;<br>&#125;<br><br><span class="hljs-comment">// 双链表中在结点p后插入结点s</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">InsertNextDNode</span><span class="hljs-params">(DNode *p, DNode *s)</span>&#123;<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>  s == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    s-&gt;next = p-&gt;next;<br>    <span class="hljs-keyword">if</span>(p-&gt;next != <span class="hljs-literal">NULL</span>)&#123;  <span class="hljs-comment">// 判断p是否有后继结点，如果有后继结点，则设置后继结点的前驱为s</span><br>        p-&gt;next-&gt;prior = s;<br>    &#125;<br>    s-&gt;prior = p;<br>    p-&gt;next = s;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 删除p的后继结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">DeleteNextDNode</span><span class="hljs-params">(DNode *p)</span>&#123;<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// p结点不存在返回1</span><br>    &#125;<br>    DNode *q = p-&gt;next;<br>    <span class="hljs-keyword">if</span>(q == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;  <span class="hljs-comment">// p的后继结点为空（不存在）返回2</span><br>    &#125;<br>    p-&gt;next = q-&gt;next;<br>    <span class="hljs-keyword">if</span>(q-&gt;next != <span class="hljs-literal">NULL</span>)&#123;<br>        q-&gt;next-&gt;prior = p;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(q);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><br><span class="hljs-comment">// 删除p结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">DeleteDNode</span><span class="hljs-params">(DNode *p)</span>&#123;<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// p结点不存在返回1</span><br>    &#125;<br>    DNode *q = p-&gt;prior;<br>    q-&gt;next = p-&gt;next;<br>    <span class="hljs-keyword">if</span>(p-&gt;next != <span class="hljs-literal">NULL</span>)&#123;<br>        p-&gt;next-&gt;prior = q;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><br><span class="hljs-comment">// 释放双链表各个数据结点（删除表）</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">DsetoryList</span><span class="hljs-params">(DLinklist &amp;L)</span>&#123;<br>    <span class="hljs-keyword">while</span>(L-&gt;next != <span class="hljs-literal">NULL</span>)&#123;<br>        DeleteNextDNode(L);<br>    &#125;<br>    <span class="hljs-built_in">free</span>(L);<br>    L = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><br><span class="hljs-comment">// 循环输出双链表</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">PrintList</span><span class="hljs-params">(DLinklist L)</span>&#123;<br>    <span class="hljs-keyword">if</span>(Empty(L))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 链表为空输出1</span><br>    &#125;<br>    DNode *p = L-&gt;next;<br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;next != L)&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 按位查找表L的结点</span><br>DNode *<span class="hljs-title function_">GetElem</span><span class="hljs-params">(DLinklist L, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 变量i大小不合法</span><br>    &#125;<br>    DNode *p;  <span class="hljs-comment">// 指针p指向当前扫描到的结点</span><br>    p = L;  <span class="hljs-comment">// L指向头结点，即第0个结点，不存放数据 </span><br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;  <span class="hljs-comment">// j表指向第几个结点 </span><br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp; j &lt; i)&#123;  <span class="hljs-comment">// 循环的目的是找到第i个结点并且对其操作</span><br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">// 插入数据到双链表(默认表尾)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(DLinklist &amp;L, <span class="hljs-type">int</span> e)</span>&#123;<br><br>    DNode *p = L;<br>    <span class="hljs-keyword">while</span>(p-&gt;next != <span class="hljs-literal">NULL</span>)&#123;<br>        p = p-&gt;next;<br>    &#125;<br>    DNode *s = (DNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(DNode));<br>    s-&gt;data = e;<br>    <span class="hljs-keyword">return</span> InsertNextDNode(p, s);  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><br><span class="hljs-comment">// 插入数据到双链表</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(DLinklist &amp;L, <span class="hljs-type">int</span> e, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 变量i大小不合法 </span><br>    &#125;<br>    DNode *p = GetElem(L, i<span class="hljs-number">-1</span>);  <span class="hljs-comment">// 查找到第i-1个结点的位置</span><br>    DNode *s = (DNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(DNode));<br>    s-&gt;data = e;<br>    <span class="hljs-keyword">return</span> InsertNextDNode(p, s);  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><br><span class="hljs-comment">// 按值查找单链表中的元素</span><br>DNode *<span class="hljs-title function_">LocateElem</span><span class="hljs-params">(DLinklist L, <span class="hljs-type">int</span> e)</span>&#123;<br>    DNode *p = L;<br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;data != e)&#123;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">// 删除双链表中的元素</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListDelete</span><span class="hljs-params">(DLinklist &amp;L, <span class="hljs-type">int</span> e)</span>&#123;<br>    DNode *p = L;<br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;data != e)&#123;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 变量e不存在</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> DeleteNextDNode(p);  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><br><span class="hljs-comment">// 将双链表中元素反转</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">List_Reverse</span><span class="hljs-params">(DLinklist &amp;L)</span>&#123;<br>    DNode *p, *q;<br>    p = L-&gt;next;<br>    L-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;next != L)&#123;<br>        q = p-&gt;next;<br>        p-&gt;next = L-&gt;next;<br>        L-&gt;next = p;<br>        p = q;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!Empty(L))&#123;<br>        p = L-&gt;next;<br>        q = L;<br>        <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;next != L)&#123;<br>            p-&gt;prior = q;<br>            p = p-&gt;next;<br>            q = q-&gt;next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 初始化循环单链表</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">InitCircleList</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-type">int</span> n)</span>&#123;<br>    L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkList));<br>    <span class="hljs-keyword">if</span>(L == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 分配内存失败</span><br>    &#125;<br>    L-&gt;next = L;  <span class="hljs-comment">// 空链表头结点指向自身</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><br><span class="hljs-comment">// 判空</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">CircleEmpty</span><span class="hljs-params">(LinkList L)</span>&#123;<br>    <span class="hljs-keyword">return</span> L-&gt;next == L;<br>&#125;<br><br><span class="hljs-comment">// 判尾</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">isTail</span><span class="hljs-params">(LinkList L, LinkList p)</span>&#123;<br>    <span class="hljs-keyword">return</span> p-&gt;next == L;<br>&#125;<br><br><span class="hljs-comment">// 初始化循环双链表</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">InitCircleDList</span><span class="hljs-params">(DLinklist &amp;L, <span class="hljs-type">int</span> n)</span>&#123;<br>    L = (DLinklist)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(DLinklist));<br>    <span class="hljs-keyword">if</span>(L == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 分配内存失败</span><br>    &#125;<br>    L-&gt;prior = L;  <span class="hljs-comment">// 空链表头结点指向自身</span><br>    L-&gt;next = L;  <span class="hljs-comment">// 空链表尾结点指向自身</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 正常结束返回0</span><br>&#125;<br><br><span class="hljs-comment">// 判空</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">CircleEmpty</span><span class="hljs-params">(DLinklist L)</span>&#123;<br>    <span class="hljs-keyword">return</span> L-&gt;prior == L;<br>&#125;<br><br><span class="hljs-comment">// 判尾</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">isTail</span><span class="hljs-params">(DLinklist L, DLinklist p)</span>&#123;<br>    <span class="hljs-keyword">return</span> p-&gt;next == L;<br>&#125;<br><br><span class="hljs-comment">// 静态链表</span><br><span class="hljs-comment">// 声明用：Node 变量名[MAXSIZE];</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span>  <span class="hljs-comment">// 静态链表结点类型</span><br>    <span class="hljs-type">int</span> data;  <span class="hljs-comment">// 用于存放数据</span><br>    <span class="hljs-type">int</span> next;  <span class="hljs-comment">// 用于存放下一个结点的数组下标</span><br>&#125;Node;<br><br><span class="hljs-comment">// 静态链表(2)</span><br><span class="hljs-comment">// 声明用：SLinkList 变量名; 创建MAXSIZE个结点的静态链表</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-type">int</span> next;<br>&#125;SLinkList[MAXSIZE];<br><br><span class="hljs-comment">// 初始化静态链表</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">InitSLinkList</span><span class="hljs-params">(SLinkList &amp;L)</span>&#123;<br>    L[<span class="hljs-number">0</span>].next = <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 空链表头结点数组为-1</span><br>    <span class="hljs-comment">// 其他的结点数组下标初始化为-2</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;MAXSIZE; i++)&#123;<br>        L[i].next = <span class="hljs-number">-2</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 求静态链表长度</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Length</span><span class="hljs-params">(SLinkList L)</span>&#123;<br>    <span class="hljs-type">int</span> length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(L[length].next != <span class="hljs-number">-1</span>)&#123;<br>        length++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> length;<br>&#125;<br><br><span class="hljs-comment">// 判空</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Empty</span><span class="hljs-params">(SLinkList L)</span>&#123;<br>    <span class="hljs-keyword">return</span> L[<span class="hljs-number">0</span>].next == <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// 判尾</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">isTail</span><span class="hljs-params">(SLinkList L, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">return</span> L[i].next == <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// 输出静态链表</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">PrintList</span><span class="hljs-params">(SLinkList L)</span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(L[i].next != <span class="hljs-number">-1</span>)&#123;<br>        i = L[i].next;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; L[i].data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 在静态链表尾部插入元素</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(SLinkList &amp;L, <span class="hljs-type">int</span> e)</span>&#123;<br>    <span class="hljs-comment">// 判断静态链表是否已满</span><br>    <span class="hljs-keyword">if</span>(Length(L) == MAXSIZE - <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 静态链表已满</span><br>    &#125;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(L[i].next != <span class="hljs-number">-1</span>)&#123;<br>        i = L[i].next;<br>    &#125;<br>    L[i].next = i + <span class="hljs-number">1</span>;<br>    L[i + <span class="hljs-number">1</span>].data = e;<br>    L[i + <span class="hljs-number">1</span>].next = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 查找元素</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">GetElem</span><span class="hljs-params">(SLinkList L, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>  i&gt;Length(L))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 变量i大小不合法</span><br>    &#125;<br>    j = L[<span class="hljs-number">0</span>].next;<br>    <span class="hljs-keyword">while</span>(j != <span class="hljs-number">-1</span> &amp;&amp; i&gt;<span class="hljs-number">1</span>)&#123;<br>        j = L[j].next;<br>        i--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> L[j].data;<br>&#125;<br><br><span class="hljs-comment">// 查找元素</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">LocateElem</span><span class="hljs-params">(SLinkList L, <span class="hljs-type">int</span> e)</span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> j = L[<span class="hljs-number">0</span>].next;<br>    <span class="hljs-keyword">while</span>(j != <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(L[j].data == e)&#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>        i++;<br>        j = L[j].next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 删除元素</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListDelete</span><span class="hljs-params">(SLinkList &amp;L, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-type">int</span> j;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>  i&gt;Length(L))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 变量i大小不合法</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(i == <span class="hljs-number">1</span>)&#123;<br>        L[<span class="hljs-number">0</span>].next = L[L[<span class="hljs-number">0</span>].next].next;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        j = L[<span class="hljs-number">0</span>].next;<br>        <span class="hljs-keyword">while</span>(j != <span class="hljs-number">-1</span> &amp;&amp; i&gt;<span class="hljs-number">2</span>)&#123;<br>            j = L[j].next;<br>            i--;<br>        &#125;<br>        L[j].next = L[L[j].next].next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 弹出元素</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListPop</span><span class="hljs-params">(SLinkList &amp;L, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-type">int</span> e;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>  i&gt;Length(L))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 变量i大小不合法返回-1</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(i == <span class="hljs-number">1</span>)&#123;<br>        e = L[L[<span class="hljs-number">0</span>].next].data;<br>        L[<span class="hljs-number">0</span>].next = L[L[<span class="hljs-number">0</span>].next].next;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">int</span> j = L[<span class="hljs-number">0</span>].next;<br>        <span class="hljs-keyword">while</span>(j != <span class="hljs-number">-1</span> &amp;&amp; i&gt;<span class="hljs-number">2</span>)&#123;<br>            j = L[j].next;<br>            i--;<br>        &#125;<br>        e = L[L[j].next].data;<br>        L[j].next = L[L[j].next].next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> e;<br>&#125;<br><br><span class="hljs-comment">// 反转静态链表</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">List_Reverse</span><span class="hljs-params">(SLinkList &amp;L)</span>&#123;<br>    <span class="hljs-type">int</span> *p = new <span class="hljs-type">int</span>[Length(L)];<br>    <span class="hljs-type">int</span> length = Length(L);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)&#123;<br>        p[i] = ListPop(L, <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = length<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>        ListInsert(L, p[i]);<br>    &#125;<br>    delete[] p;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 反转成功</span><br>&#125;<br><br><span class="hljs-comment">// 删除静态链表</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">DsetoryList</span><span class="hljs-params">(SLinkList &amp;L)</span>&#123;<br>    L[<span class="hljs-number">0</span>].next = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单调栈的解释及应用</title>
      <link href="/2022/01/15/monotone-stack/"/>
      <url>/2022/01/15/monotone-stack/</url>
      
        <content type="html"><![CDATA[<h2 id="单调栈定义"><a href="#单调栈定义" class="headerlink" title="单调栈定义"></a>单调栈定义</h2><p>从名字上就听的出来，单调栈中存放的数据应该是有序的，所以单调栈也分为单调递增栈和单调递减栈</p><p>单调递增栈：单调递增栈就是从栈底到栈顶数据是从大到小<br>单调递减栈：单调递减栈就是从栈底到栈顶数据是从小到大</p><p>参考：<a href="https://blog.csdn.net/lucky52529/article/details/89155694">[数据结构]——单调栈_lucky52529的博客-CSDN博客_单调递增栈</a></p><h2 id="定义简例"><a href="#定义简例" class="headerlink" title="定义简例"></a>定义简例</h2><p>假如有一个单调栈（单调递增）现有以下数字：7，3，5，6，10</p><ul><li>  7入栈时（栈空），7入栈，栈内：7</li><li>  3入栈时（3比7小），3入栈，栈内：7，3</li><li>  5入栈时（5比3大，比7小），3弹栈，5入栈，栈内：7，5</li><li>  6入栈时（6比5大，比7小），5弹栈，6入栈，栈内：7，6</li><li>  10入栈时（10比6大，比7大），6弹栈，7弹栈，栈内：10</li></ul><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs 伪代码">定义数组或者栈;<br>for (遍历原始数据数组)&#123;<br>    if (栈空  栈顶元素大于等于当前比较元素)&#123;<br>        入栈;<br>    &#125;<br>    else&#123;<br>        while (栈不为空 &amp;&amp; 栈顶元素小于当前元素)&#123;<br>            栈顶元素出栈;<br>            更新结果;<br>        &#125;<br>        当前数据入栈;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><ul><li>  小Q在周末的时候和他的小伙伴来到大城市逛街，一条步行街上有很多高楼，共有n座高楼排成一行。小Q从第一栋一直走到了最后一栋，小Q从来都没有见到这么多的楼，所以他想知道他在每栋楼的位置处能看到多少栋楼呢？（当前面的楼的高度大于等于后面的楼时，后面的楼将被挡住）</li></ul><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><ul><li>  [5,3,8,3,2,5]</li></ul><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><ul><li>  [3,3,5,4,4,4]</li></ul><h3 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h3><ul><li>  当小Q处于位置3时，他可以向前看到位置2,1处的楼，向后看到位置4,6处的楼，加上第3栋楼，共可看到5栋楼。当小Q处于位置4时，他可以向前看到位置3处的楼，向后看到位置5,6处的楼，加上第4栋楼，共可看到4栋楼。</li></ul><h3 id="函数代码（利用动态数组ArrayList模拟栈）"><a href="#函数代码（利用动态数组ArrayList模拟栈）" class="headerlink" title="函数代码（利用动态数组ArrayList模拟栈）"></a>函数代码（利用动态数组ArrayList模拟栈）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] findBuilding(<span class="hljs-type">int</span>[] heights) &#123;<br>    <span class="hljs-type">int</span>[] number = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[heights.length];<br>    ArrayList &lt; Integer &gt; LTR = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span> &lt; Integer &gt; (); <span class="hljs-comment">// 从大到小（从左往右从大到小）</span><br>    ArrayList &lt; Integer &gt; RTL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span> &lt; Integer &gt; (); <span class="hljs-comment">// 从小到大（从右往左从大到小）</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = number.length - <span class="hljs-number">1</span>; i &lt; number.length; i++, j--) &#123;<br>        <span class="hljs-comment">// 每次i，j游标指向的是小Q所在的房子的左边的房子或者右边的房子在内的单调栈</span><br>        <span class="hljs-comment">// 因为第一次循环的时候是最左边的房子和最右边的房子入栈，所以要先记录左右两边单调栈里的数</span><br>        <span class="hljs-comment">// 且最后一次循环不出现问题，LYT单调栈到最右边的时候即不出现最右边的房子为某个房子左边的房子，RTL同理</span><br>        number[i] += LTR.size();<br>        number[j] += RTL.size();<br>        <span class="hljs-keyword">while</span> (LTR.size() &gt; <span class="hljs-number">0</span> &amp;&amp; heights[i] &gt; (<span class="hljs-type">int</span>) LTR.get(LTR.size() - <span class="hljs-number">1</span>)) &#123;<br>            LTR.remove(LTR.size() - <span class="hljs-number">1</span>); <span class="hljs-comment">// LTR出栈</span><br>        &#125;<br>        <span class="hljs-keyword">while</span> (RTL.size() &gt; <span class="hljs-number">0</span> &amp;&amp; heights[j] &gt; (<span class="hljs-type">int</span>) RTL.get(RTL.size() - <span class="hljs-number">1</span>)) &#123;<br>            RTL.remove(RTL.size() - <span class="hljs-number">1</span>); <span class="hljs-comment">// RT出栈</span><br>        &#125;<br>        LTR.add(heights[i]); <span class="hljs-comment">// LTR入栈</span><br>        RTL.add(heights[j]); <span class="hljs-comment">// RTL入栈</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; number.length; i++) &#123;<br>        number[i] ++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> number;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="更换栈类型函数代码为"><a href="#更换栈类型函数代码为" class="headerlink" title="更换栈类型函数代码为"></a>更换栈类型函数代码为</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] findBuilding(<span class="hljs-type">int</span>[] heights) &#123;<br>    <span class="hljs-type">int</span>[] number = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[heights.length];<br>    Stack &lt; Integer &gt; LTR = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span> &lt; &gt; (); <span class="hljs-comment">// 从大到小（从左往右从大到小）</span><br>    Stack &lt; Integer &gt; RTL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span> &lt; &gt; (); <span class="hljs-comment">// 从小到大（从右往左从大到小）</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = number.length - <span class="hljs-number">1</span>; i &lt; number.length; i++, j--) &#123;<br>        <span class="hljs-comment">// 每次i，j游标指向的是小Q所在的房子的左边的房子或者右边的房子在内的单调栈</span><br>        <span class="hljs-comment">// 因为第一次循环的时候是最左边的房子和最右边的房子入栈，所以要先记录左右两边单调栈里的数</span><br>        <span class="hljs-comment">// 且最后一次循环不出现问题，LYT单调栈到最右边的时候即不出现最右边的房子为某个房子左边的房子，RTL同理</span><br>        number[i] += LTR.size();<br>        number[j] += RTL.size();<br>        <span class="hljs-keyword">while</span> (!LTR.isEmpty() &amp;&amp; heights[i] &gt; LTR.peek()) &#123;<br>            LTR.pop(); <span class="hljs-comment">// LTR出栈</span><br>        &#125;<br>        <span class="hljs-keyword">while</span> (!RTL.isEmpty() &amp;&amp; heights[j] &gt; RTL.peek()) &#123;<br>            RTL.pop(); <span class="hljs-comment">// RT出栈</span><br>        &#125;<br>        LTR.push(heights[i]); <span class="hljs-comment">// LTR入栈</span><br>        RTL.push(heights[j]); <span class="hljs-comment">// RTL入栈</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; number.length; i++) &#123;<br>        number[i] ++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> number;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="灵感来源"><a href="#灵感来源" class="headerlink" title="灵感来源"></a>灵感来源</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> i,n,j, x[<span class="hljs-number">100001</span>],LtoR[<span class="hljs-number">100001</span>],RtoL[<span class="hljs-number">100001</span>],sum[<span class="hljs-number">100001</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x[i]);<br>    <span class="hljs-type">int</span> indl=<span class="hljs-number">0</span>,indr=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>,j=n<span class="hljs-number">-1</span>;i&lt;n,j&gt;=<span class="hljs-number">0</span>;i++,j--)&#123;<br>        sum[i]+=indl;<br>        sum[n-i<span class="hljs-number">-1</span>]+=indr;<br>        <span class="hljs-comment">//从左往右遍历（从右往左看）</span><br>        <span class="hljs-keyword">while</span>(LtoR[indl<span class="hljs-number">-1</span>]&lt;=x[i]&amp;&amp;indl&gt;<span class="hljs-number">0</span>)&#123;<br>            indl --;<span class="hljs-comment">//出栈操作</span><br>        &#125;<br>        <span class="hljs-comment">//从右往左遍历（从左往右看）</span><br>        <span class="hljs-keyword">while</span>(RtoL[indr<span class="hljs-number">-1</span>]&lt;=x[j]&amp;&amp;indr&gt;<span class="hljs-number">0</span>)&#123;<br>            indr --;<span class="hljs-comment">//出栈操作</span><br>        &#125;<br>        LtoR[indl]=x[i];<span class="hljs-comment">//入栈</span><br>        indl ++;<br>        RtoL[indr]=x[j];<span class="hljs-comment">//入栈</span><br>        indr ++;<br>    &#125;<br>    <span class="hljs-comment">//注意加一</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,sum[i]+<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,sum[n<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/Twinkle_sone/article/details/104593171">逛街【 腾讯2020校园招聘-后台&amp;综合-第一次笔试】（单调栈的应用）_Twinkle_sone的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> JAVA </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络小学期——UDP服务器的设计</title>
      <link href="/2021/12/31/computer-net-udp-server/"/>
      <url>/2021/12/31/computer-net-udp-server/</url>
      
        <content type="html"><![CDATA[<p>成品及源码下载链接：<a href="https://github.com/Zhuanjier/udp-server/releases/tag/v1.0">Release 可执行程序 · Zhuanjier/udp-server (github.com)</a></p><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>UDP是TCP/IP协议族为传输层设计的两个协议之一，是一种无连接的，不可靠的协议。由于UDP采取了无连接的方式，因此协议简单，在一些特定的应用中协议运行效率高。UDP适合一些实时的应用，如IP电话、视频会议，它们要求源主机以恒定的速率发送数据，并且在网络出现拥塞时，可以丢失一些数据，但是延迟不能太大。基于这些特点，流式多媒体通信、多播等应用在传输层采用的就是UDP协议。编写一UDP服务器程序，流畅地完成视频文件地传输，要能对多个客户端进行管理。需要通过UDP模拟多个客户端连接验证的情况。</p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>a) 编译环境：Python3.10<br>b) 编译工具：PyCharm<br>c) 打包工具：pyinstaller</p><h3 id="调用函数库"><a href="#调用函数库" class="headerlink" title="调用函数库"></a>调用函数库</h3><p>a) time：处理时间的标准库，提供获取系统时间并格式化输出功能<br>b) socket：帮助在网络上的两个程序之间建立信息通道<br>c) queue：提供队列操作的模块，用于多个线程之间的数据共享<br>d) basename：去掉目录路径，单独返回文件名</p><h3 id="解决问题思路"><a href="#解决问题思路" class="headerlink" title="解决问题思路"></a>解决问题思路</h3><p>本程序由于需要在网络上搭建UDP服务器来传输信息、文件，则必须要定义一个合适的确认连接以及检验文件完成性的功能。 </p><p>以TCP传输模式为样例，本程序的服务器端和客户端采用了类似TCP的三次握手确认连接和四次挥手断开连接。 </p><p>本程序采用类似FTP传输模式，利用6000端口来传送控制信息以及一些普通消息，利用7777端口来传输文件信息，利用7778端口来接收ack数据包确认信息。 </p><p>服务器端主进程开启接受消息线程，该线程负责接受捕获到的6000端口的UDP数据包，并将判断数据是否为连接、断开等命令数据。<br>如接收到连接指令则将信息发送方的套接字保存创建新线程负责处理该线程发送来的信息并且创建新管道方便与之通信。<br>如果是断开连接命令，则在“四次挥手”结束后结束该套接字对应的线程，释放资源。如果是其他命令，则将命令存放到信息来的套接字对应的管道中。<br>管道另一头接受到信息后开始处理对应信息。处理不同套接字的消息的进程在从套接字中取到消息后开始执行程序。如果将信息通过默认命令消息处理函数处理后返回不同对应的信息，如果服务器需要执行聊天操作，则会创建新线程调用循环发送函数给该套接字发送消息。如果服务器需要执行发送文件操作则需等待客户机发送所需要的文件目录后创建两个新线程一个负责在7777端口发送文件，另一个是负责在7778端口接收确认包。 </p><p>客户端程序只需要获取服务器ip后主动连接服务器。在服务器相应后显示连接成功。同时启动两个线程，一个负责发送数据包，另一个负责接收数据包并处理。<br>处理数据时，如果为传输文件确认数据包，则阻塞发送数据包的线程，并把需要的文件路径发送至服务器。然后通过对接收到服务器7777端口发送来的数据进行整理，返回给服务器7778端口确认包。全部确认后文件传输完成并唤醒发送数据进程。<br>如果发送的数据为exit（断开连接命令），将状态变量改变，使得发送和接受线程全部停止，主进程等待两个线程结束后结束运行。</p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><h3 id="服务器端流程图"><a href="#服务器端流程图" class="headerlink" title="服务器端流程图"></a>服务器端流程图</h3><p><img src="http://blog.zhuanjie.ltd/img/uploads/2021/12/image-745x1024.png" alt="服务器端流程图"></p><h3 id="客户端流程图"><a href="#客户端流程图" class="headerlink" title="客户端流程图"></a>客户端流程图</h3><p><img src="http://blog.zhuanjie.ltd/img/uploads/2021/12/image-1-630x1024.png" alt="客户端流程图"></p><h2 id="详细设计-利用Python代码实现"><a href="#详细设计-利用Python代码实现" class="headerlink" title="详细设计(利用Python代码实现)"></a>详细设计(利用Python代码实现)</h2><h3 id="函数列表"><a href="#函数列表" class="headerlink" title="函数列表"></a>函数列表</h3><table><thead><tr><th align="center">所处位置</th><th align="center">函数名</th><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">服务器端</td><td align="center">sendto</td><td align="center">传输文件名称,客户端套接字</td><td align="center">用于传输文件</td></tr><tr><td align="center">服务器端</td><td align="center">recv_ack</td><td align="center">无</td><td align="center">确认客户端返回的确认信息</td></tr><tr><td align="center">服务器端</td><td align="center">sendOne</td><td align="center">消息,发送到的客户机的套接字</td><td align="center">整合发送一条udp消息到指定套接字</td></tr><tr><td align="center">服务器端</td><td align="center">circlesend</td><td align="center">发送到的客户机的套接字</td><td align="center">循环发送消息到客户端（基于聊天功能）</td></tr><tr><td align="center">服务器端</td><td align="center">getfire</td><td align="center">文件路径,发送到的客户机的套接字</td><td align="center">获取文件函数，用于启动发送文件进程和确认客户端返回的确认进程</td></tr><tr><td align="center">服务器端</td><td align="center">mafun</td><td align="center">消息,发送到的客户机的套接字</td><td align="center">默认命令消息处理函数</td></tr><tr><td align="center">服务器端</td><td align="center">diviceConnect</td><td align="center">发送到的客户机的套接字</td><td align="center">连接到服务器后的设备所启动线程调用的函数</td></tr><tr><td align="center">服务器端</td><td align="center">receive</td><td align="center">无</td><td align="center">接受消息并将消息送到管道</td></tr><tr><td align="center">客户端</td><td align="center">getFile</td><td align="center">文件名</td><td align="center">获取文件路径，名称</td></tr><tr><td align="center">客户端</td><td align="center">receive</td><td align="center">无</td><td align="center">接受消息</td></tr><tr><td align="center">客户端</td><td align="center">circlesend</td><td align="center">无</td><td align="center">发送消息</td></tr></tbody></table><h2 id="主要函数代码"><a href="#主要函数代码" class="headerlink" title="主要函数代码"></a>主要函数代码</h2><h3 id="服务器端主要函数"><a href="#服务器端主要函数" class="headerlink" title="服务器端主要函数"></a>服务器端主要函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 文件传输 占用端口7777</span><br><span class="hljs-comment"># 三级子进程（父进程：设备对应进程）</span><br><span class="hljs-comment"># 变量：(传输文件名称,客户端套接字)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sendto</span>(<span class="hljs-params">fn_path, addr</span>):<br>    <span class="hljs-comment"># 读取文件全部内容</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(fn_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>        content = fp.read()<br>    <span class="hljs-comment"># 获取文件大小，做好分块传输的准备</span><br>    fn_size = <span class="hljs-built_in">len</span>(content)<br>    <span class="hljs-keyword">for</span> start <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(fn_size // BUFFER_SIZE + <span class="hljs-number">1</span>):<br>        positions.append(start * BUFFER_SIZE)<br>    <span class="hljs-comment"># 设置事件，可以启动用来接收确认信息的线程了</span><br>    e.<span class="hljs-built_in">set</span>()<br>    <span class="hljs-comment"># 窗口套接字，设置发送缓冲区大小</span><br>    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>    sock.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, BUFFER_SIZE)<br>    <span class="hljs-comment"># 发送文件数据，直到所有分块都收到确认，否则就不停地循环发送</span><br>    <span class="hljs-keyword">while</span> positions:<br>        <span class="hljs-keyword">for</span> pos <span class="hljs-keyword">in</span> positions:<br>            sock.sendto(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;pos&#125;</span>_&#x27;</span>.encode() + content[pos:pos + BUFFER_SIZE], (addr[<span class="hljs-number">0</span>], <span class="hljs-number">7777</span>))<br>        time.sleep(<span class="hljs-number">0.1</span>)<br>    <span class="hljs-comment"># 通知，发送完成</span><br>    <span class="hljs-keyword">while</span> file_name:<br>        sock.sendto(<span class="hljs-string">b&#x27;over_&#x27;</span> + file_name[<span class="hljs-number">0</span>], (addr[<span class="hljs-number">0</span>], <span class="hljs-number">7777</span>))<br>    <span class="hljs-comment"># 关闭套接字</span><br>    sock.close()<br><span class="hljs-comment"># 确认客户端返回的确认信息 占用端口7778</span><br><span class="hljs-comment"># 三级子进程（父进程：设备对应进程）</span><br><span class="hljs-comment"># 变量：空</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recv_ack</span>():<br>    <span class="hljs-comment"># 创建套接字，绑定本地端口，用来接收对方的确认信息</span><br>    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>    sock.bind((IP, <span class="hljs-number">7778</span>))<br>    <span class="hljs-comment"># 如果所有分块都确认过，就结束循环</span><br>    <span class="hljs-keyword">while</span> positions:<br>        <span class="hljs-comment"># 预期收到的确认包格式为1234_ack</span><br>        data, _ = sock.recvfrom(<span class="hljs-number">1024</span>)<br>        pos = <span class="hljs-built_in">int</span>(data.split(<span class="hljs-string">b&#x27;_&#x27;</span>)[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">if</span> pos <span class="hljs-keyword">in</span> positions:<br>            positions.remove(pos)<br>    <span class="hljs-comment"># 确认对方收到文件名，并已接收全部数据</span><br>    <span class="hljs-keyword">while</span> file_name:<br>        data, _ = sock.recvfrom(<span class="hljs-number">1024</span>)<br>        fn = data.split(<span class="hljs-string">b&#x27;_&#x27;</span>)[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> fn <span class="hljs-keyword">in</span> file_name:<br>            file_name.remove(fn)<br>    sock.close()<br><span class="hljs-comment"># 整合发送一条udp消息</span><br><span class="hljs-comment"># 变量：(消息,发送到的客户机的套接字)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sendOne</span>(<span class="hljs-params">msg, addr</span>):<br>    s.sendto(msg.encode(), addr)<br><span class="hljs-comment"># 循环发送消息到客户端（聊天功能）</span><br><span class="hljs-comment"># 变量：(发送到的客户机的套接字)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">circlesend</span>(<span class="hljs-params">addr</span>):<br>    <span class="hljs-keyword">global</span> OCCUIPED<br>    <span class="hljs-keyword">while</span> OCCUIPED:<br>        send_data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;To&quot;</span> + <span class="hljs-built_in">str</span>(addr) + <span class="hljs-string">&quot;:&quot;</span>)<br>        s.sendto(send_data.encode(), addr)<br>        <span class="hljs-keyword">if</span> send_data == <span class="hljs-string">&quot;exitchat&quot;</span>:<br>            OCCUIPED = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">break</span><br><span class="hljs-comment"># 获取文件函数，用于启动发送文件进程和确认客户端返回的确认进程</span><br><span class="hljs-comment"># 变量：(文件路径,发送到的客户机的套接字)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getfire</span>(<span class="hljs-params">datapath, addr</span>):<br>    <span class="hljs-keyword">global</span> fn_path, file_name<br>    fn_path = datapath<br>    file_name = [<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;basename(fn_path)&#125;</span>&#x27;</span>.encode()]<br>    t1 = threading.Thread(target=sendto, args=(fn_path, addr))<br>    t1.start()<br>    e.clear()<br>    e.wait()<br>    t2 = threading.Thread(target=recv_ack)<br>    t2.start()<br>    <span class="hljs-comment"># 等待发送线程和接收确认线程都结束</span><br>    t2.join()<br>    t1.join()<br><span class="hljs-comment"># 默认命令消息处理函数</span><br><span class="hljs-comment"># 变量：(消息,发送到的客户机的套接字)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mafun</span>(<span class="hljs-params">message, addr</span>):<br>    <span class="hljs-keyword">if</span> message == <span class="hljs-string">&quot;help&quot;</span>:<br>        sendOne(<span class="hljs-string">&quot;\n1.返回当前服务器时间\n2.聊天\n3.文件传输\n4.关于\nexit——退出 help——帮助&quot;</span>, addr)  <span class="hljs-comment"># man——指令详情</span><br>    <span class="hljs-keyword">elif</span> message == <span class="hljs-string">&quot;1&quot;</span>:<br>        ticks = time.time()<br>        sendOne(<span class="hljs-string">&quot;\n当前服务器时间戳为:&quot;</span> + <span class="hljs-built_in">str</span>(ticks) + <span class="hljs-string">&quot;\n当前服务器时间为&quot;</span> + <span class="hljs-built_in">str</span>(time.asctime(time.localtime(ticks))), addr)<br>    <span class="hljs-keyword">elif</span> message == <span class="hljs-string">&quot;2&quot;</span>:<br>        <span class="hljs-keyword">global</span> OCCUIPED<br>        <span class="hljs-keyword">if</span> OCCUIPED != <span class="hljs-string">&quot;&quot;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;聊天室搭建失败，聊天室被占用！&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            OCCUIPED = <span class="hljs-built_in">str</span>(addr)<br>            tsend = threading.Thread(target=circlesend, args=(addr,))  <span class="hljs-comment"># 开启发送消息线程</span><br>            tsend.start()<br>            sendOne(<span class="hljs-string">&quot;chatconfirm&quot;</span>, addr)<br>    <span class="hljs-keyword">elif</span> message == <span class="hljs-string">&quot;3&quot;</span>:<br>        sendOne(<span class="hljs-string">&quot;transferconfirm&quot;</span>, addr)<br>        datapath = Pipe[addr].get()<br>        getfire(datapath, addr)  <span class="hljs-comment"># 调用获取文件函数</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件传输完成&quot;</span>)<br>    <span class="hljs-keyword">elif</span> message == <span class="hljs-string">&quot;4&quot;</span>:<br>        sendOne(<span class="hljs-string">&quot;\n本程序是我的计算机网络小学期作业\n@author: 朱安杰 194020215&quot;</span>, addr)<br>    <span class="hljs-keyword">else</span>:<br>        sendOne(<span class="hljs-string">&quot;未知命令：&quot;</span> + message, addr)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">diviceConnect</span>(<span class="hljs-params">addr</span>):<br>    <span class="hljs-keyword">global</span> OCCUIPED<br>    <span class="hljs-keyword">while</span> state[addr]:<br>        msg = Pipe[addr].get()<br>        <span class="hljs-keyword">if</span> OCCUIPED == <span class="hljs-built_in">str</span>(addr):<br>            <span class="hljs-keyword">if</span> msg == <span class="hljs-string">&quot;exitchat&quot;</span>:<br>                OCCUIPED = <span class="hljs-string">&quot;&quot;</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;结束聊天&quot;</span>)<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(addr) + <span class="hljs-string">&quot;:&quot;</span> + msg)<br>            <span class="hljs-keyword">continue</span><br>        mafun(msg, addr)<br><span class="hljs-comment"># 接受消息 持续监听6000端口 二级子进程（父进程：主进程（用户进程）；子进程：各个用户设备处理信息对应的进程）</span><br><span class="hljs-comment"># 接收到的消息分为两类：1.指令形消息2.内容形消息</span><br><span class="hljs-comment"># 指令形式消息：根据接受到的消息和判断已经存在的设备列表分配（删除）独立进程</span><br><span class="hljs-comment"># 内容形消息：根据套接字将消息发送给对应的进程（唤醒进程）</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">receive</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        data, addr = s.recvfrom(BUFFER_SIZE)  <span class="hljs-comment"># 获取消息</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;终端： %s:%s 数据： &quot;</span> % addr + <span class="hljs-built_in">str</span>(data))  <span class="hljs-comment"># 打印获取信息</span><br>        <span class="hljs-keyword">if</span> data == <span class="hljs-string">b&quot;tryconnect&quot;</span>:  <span class="hljs-comment"># 对信息进行分类处理</span><br>            ConnectedDivice.append(addr)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;设备：&quot;</span> + <span class="hljs-built_in">str</span>(addr) + <span class="hljs-string">&quot; 已被发现！&quot;</span>)<br>            state[addr] = <span class="hljs-literal">True</span><br>            q = queue.Queue()  <span class="hljs-comment"># 创建通信管道</span><br>            Pipe[addr] = q  <span class="hljs-comment"># 管道存入字典</span><br>            tcreate = threading.Thread(target=diviceConnect, args=(addr,))  <span class="hljs-comment"># 发现设备后创建分配进程给设备</span><br>            tcreate.start()<br>            <span class="hljs-comment"># 创建完成后返回连接成功确认</span><br>            s.sendto(<span class="hljs-string">b&quot;connectconfirm&quot;</span>, addr)<br>            s.sendto(<span class="hljs-string">&quot;输入help获取选项列表&quot;</span>.encode(), addr)<br>        <span class="hljs-keyword">elif</span> data == <span class="hljs-string">b&quot;exit&quot;</span>:<br>            s.sendto(<span class="hljs-string">b&quot;exitconfirm&quot;</span>, addr)<br>            s.sendto(<span class="hljs-string">b&quot;over&quot;</span>, addr)<br>        <span class="hljs-keyword">elif</span> data == <span class="hljs-string">b&quot;overconfirm&quot;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;设备：&quot;</span> + <span class="hljs-built_in">str</span>(addr) + <span class="hljs-string">&quot; 已主动离线！&quot;</span>)<br>            <span class="hljs-keyword">del</span> state[addr]  <span class="hljs-comment"># 删除字典</span><br>            ConnectedDivice.remove(addr)  <span class="hljs-comment"># 删除设备列表</span><br>        <span class="hljs-keyword">else</span>:<br>            Pipe[addr].put(data.decode())<br></code></pre></td></tr></table></figure><h3 id="客户端程序"><a href="#客户端程序" class="headerlink" title="客户端程序"></a>客户端程序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取文件路径，名称</span><br><span class="hljs-comment"># 变量(文件名)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getFile</span>(<span class="hljs-params">filename</span>):<br>    filepath, tempfilename = os.path.split(filename)<br>    shotname, extension = os.path.splitext(tempfilename)<br>    <span class="hljs-keyword">return</span> filepath, shotname, extension<br><span class="hljs-comment"># 接受消息 持续监听端口 二级子进程（父进程：主进程（用户进程））</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">receive</span>():<br>    <span class="hljs-keyword">global</span> go<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> go:<br>            <span class="hljs-keyword">break</span><br>        response, addred = s.recvfrom(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>)<br>        <span class="hljs-keyword">if</span> response == <span class="hljs-string">b&quot;exitconfirm&quot;</span>:<br>            responsee, addrede = s.recvfrom(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>)<br>            <span class="hljs-keyword">if</span> responsee == <span class="hljs-string">b&quot;over&quot;</span>:<br>                s.sendto(<span class="hljs-string">&quot;overconfirm&quot;</span>.encode(), addr)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--------断开服务器：%s:%s--------&quot;</span> % addr)<br>                s.close()<br>                go = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">elif</span> response == <span class="hljs-string">b&quot;chatconfirm&quot;</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">elif</span> response == <span class="hljs-string">b&quot;transferconfirm&quot;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--------文 件 传 输--------&quot;</span>)<br>            getfirename = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入想要获取的文件:&#x27;</span>)<br>            dst = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入用来保存文件的目标位置:&#x27;</span>)<br>            s.sendto(getfirename.encode(), addr)<br>            BUFFER_SIZE = <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span><br>            <span class="hljs-comment"># 用来临时保存数据</span><br>            data = <span class="hljs-built_in">set</span>()<br>            <span class="hljs-comment"># 接收数据的Socket</span><br>            sock_recv = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>            sock_recv.bind((IP, <span class="hljs-number">7777</span>))<br>            <span class="hljs-comment"># 确认反馈地址</span><br>            ack_address = (IP, <span class="hljs-number">7778</span>)<br>            sock_ack = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>            <span class="hljs-comment"># 重复收包次数</span><br>            repeat = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>                buffer, _ = sock_recv.recvfrom(BUFFER_SIZE)<br>                <span class="hljs-comment"># 全部接收完成,获取文件名</span><br>                <span class="hljs-keyword">if</span> buffer.startswith(<span class="hljs-string">b&#x27;over_&#x27;</span>):<br>                    fn = buffer[<span class="hljs-number">5</span>:].decode()<br>                    <span class="hljs-comment"># 多确认几次文件传输结束,防止发送方丢包收不到确认</span><br>                    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>                        sock_ack.sendto(fn.encode() + <span class="hljs-string">b&#x27;_ack&#x27;</span>, ack_address)<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-comment"># 接收带编号的文件数据,临时保存,发送确认信息</span><br>                buffer = <span class="hljs-built_in">tuple</span>(buffer.split(<span class="hljs-string">b&#x27;_&#x27;</span>, maxsplit=<span class="hljs-number">1</span>))<br>                <span class="hljs-keyword">if</span> buffer <span class="hljs-keyword">in</span> data:<br>                    repeat = repeat + <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    data.add(buffer)<br>                sock_ack.sendto(buffer[<span class="hljs-number">0</span>] + <span class="hljs-string">b&#x27;_ack&#x27;</span>, ack_address)<br>            sock_recv.close()<br>            sock_ack.close()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;重复接收数据<span class="hljs-subst">&#123;repeat&#125;</span>次&#x27;</span>)<br>            data = <span class="hljs-built_in">sorted</span>(data, key=<span class="hljs-keyword">lambda</span> item: <span class="hljs-built_in">int</span>(item[<span class="hljs-number">0</span>]))<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">rf&#x27;<span class="hljs-subst">&#123;dst&#125;</span>/<span class="hljs-subst">&#123;fn&#125;</span>&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>                <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data:<br>                    fp.write(item[<span class="hljs-number">1</span>])<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;传输完成&quot;</span>)<br>            q.put(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s:%s：&quot;</span> % addr + <span class="hljs-built_in">str</span>(response.decode()))<br><span class="hljs-comment"># 发送消息</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">circlesend</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        send_data = <span class="hljs-built_in">input</span>()<br>        s.sendto(send_data.encode(), addr)<br>        <span class="hljs-keyword">if</span> send_data == <span class="hljs-string">&quot;3&quot;</span>:<br>            q.get()<br>        <span class="hljs-keyword">if</span> go:<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>打开服务器和客户端后执行不同功能如图</p><p><img src="http://blog.zhuanjie.ltd/img/uploads/2021/12/image-5.png" alt="运行结果"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python大作业——北印导航系统</title>
      <link href="/2021/11/28/python-map/"/>
      <url>/2021/11/28/python-map/</url>
      
        <content type="html"><![CDATA[<hr><p>项目成品下载</p><p><a href="https://startpage.zhuanjie.ltd/download/bigcmap.exe">链接1（直接下载）</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>针对新生对校园了解的不足，帮助新生对校园中的各建筑有更加多方面的了解。同时可以对于校园工作人员优化校园工具的搬运选择最优的运输路径，提高运输的效率。通过对dijkstra算法进行编写，实现从一个顶点到其余各顶点的最短路径算法，解决的有向图中最短路径问题。主要特点是以起始点为中心向外层层扩展，直到扩展到终点为止，是一种广度优先的搜索方法。</p><p>程序的数据和地图利用<code>json.dumps</code>方法编码为json文件的方式放在云服务器上，在运行代码的时候利用<code>json.load</code>方法访问服务器端数据。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> tkinter<br><span class="hljs-keyword">import</span> turtle<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><span class="hljs-keyword">from</span> heapq <span class="hljs-keyword">import</span> heappop, heappush<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt<br><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tkinter.ttk <span class="hljs-keyword">import</span> Combobox<br><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlretrieve<br><br><br><span class="hljs-comment"># 从点str1移动到str2</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">str1, str2</span>):<br>    x = point[str1][<span class="hljs-number">0</span>] - <span class="hljs-number">953</span> / <span class="hljs-number">2</span><br>    y = <span class="hljs-number">759</span> / <span class="hljs-number">2</span> - point[str1][<span class="hljs-number">1</span>]<br>    a = point[str2][<span class="hljs-number">0</span>] - <span class="hljs-number">953</span> / <span class="hljs-number">2</span><br>    b = <span class="hljs-number">759</span> / <span class="hljs-number">2</span> - point[str2][<span class="hljs-number">1</span>]<br>    turtle.up()<br>    turtle.goto(x, y)<br>    turtle.down()<br>    turtle.goto(a, b)<br>    turtle.up()<br><br><br><span class="hljs-comment"># 判断两点的距离</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">distence</span>(<span class="hljs-params">str1, str2, paramein, pointin</span>):<br>    <span class="hljs-keyword">if</span> [str1, str2] <span class="hljs-keyword">in</span> paramein <span class="hljs-keyword">or</span> [str2, str1] <span class="hljs-keyword">in</span> paramein:<br>        <span class="hljs-keyword">return</span> sqrt((pointin[str1][<span class="hljs-number">1</span>] - pointin[str2][<span class="hljs-number">1</span>]) ** <span class="hljs-number">2</span> + (pointin[str1][<span class="hljs-number">0</span>] - pointin[str2][<span class="hljs-number">0</span>]) ** <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">elif</span> pointin[str1][<span class="hljs-number">0</span>] == pointin[str2][<span class="hljs-number">0</span>]:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(pointin[str1][<span class="hljs-number">1</span>] - pointin[str2][<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">elif</span> pointin[str1][<span class="hljs-number">1</span>] == pointin[str2][<span class="hljs-number">1</span>]:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(pointin[str1][<span class="hljs-number">0</span>] - pointin[str2][<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1E100</span><br><br><br><span class="hljs-comment"># 优化后Dijkstra算法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dijkstra</span>(<span class="hljs-params">edges, t, f</span>):<br>    g = defaultdict(<span class="hljs-built_in">list</span>)<br>    <span class="hljs-keyword">for</span> l, r, c <span class="hljs-keyword">in</span> edges:<br>        g[l].append((c, r))<br>    q, seen, mins = [(<span class="hljs-number">0</span>, f, [])], <span class="hljs-built_in">set</span>(), &#123;f: <span class="hljs-number">0</span>&#125;<br>    <span class="hljs-keyword">while</span> q:<br>        (cost, v1, path) = heappop(q)<br>        <span class="hljs-keyword">if</span> v1 <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> seen:<br>            seen.add(v1)<br>            path = [v1] + path<br>            <span class="hljs-keyword">if</span> v1 == t:<br>                <span class="hljs-keyword">return</span> cost, path<br>            <span class="hljs-keyword">for</span> c, v2 <span class="hljs-keyword">in</span> g.get(v1, ()):<br>                <span class="hljs-keyword">if</span> v2 <span class="hljs-keyword">in</span> seen:<br>                    <span class="hljs-keyword">continue</span><br>                prev = mins.get(v2, <span class="hljs-literal">None</span>)<br>                <span class="hljs-built_in">next</span> = cost + c<br>                <span class="hljs-keyword">if</span> prev <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">next</span> &lt; prev:<br>                    mins[v2] = <span class="hljs-built_in">next</span><br>                    heappush(q, (<span class="hljs-built_in">next</span>, v2, path))<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">float</span>(<span class="hljs-string">&quot;inf&quot;</span>), []<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">draw</span>(<span class="hljs-params">value</span>):<br>    <span class="hljs-comment"># 初始化地图</span><br>    turtle.setup(width=<span class="hljs-number">953</span>, height=<span class="hljs-number">759</span>, startx=<span class="hljs-number">50</span>, starty=<span class="hljs-number">30</span>)<br>    turtle.clear()<br>    turtle.title(<span class="hljs-string">&quot;导航路线&quot;</span>)<br>    <span class="hljs-comment"># 图片URL</span><br>    url = <span class="hljs-string">&#x27;http://startpage.zhuanjie.ltd/json/bigc.png&#x27;</span><br>    filename = os.path.basename(url)<br>    <span class="hljs-comment"># 判断文件是否存在，如果不存在则下载</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isfile(os.path.join(<span class="hljs-string">&quot;./&quot;</span>, filename)):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;地图下载中：&quot;</span>)<br>            urlretrieve(url, <span class="hljs-string">&#x27;./bigc.png&#x27;</span>, schedule)<br>        <span class="hljs-keyword">except</span> os.error.HTTPError <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span> + url + <span class="hljs-string">&#x27;下载失败！&#x27;</span> + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            tkinter.messagebox.showinfo(<span class="hljs-string">&#x27;提示&#x27;</span>, <span class="hljs-string">&#x27;下载地图失败，请重试！&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n地图下载完成！&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;地图已经存在！&quot;</span>)<br>    turtle.bgpic(<span class="hljs-string">&quot;bigc.png&quot;</span>)<br>    turtle.pensize(<span class="hljs-number">15</span>)<br>    turtle.color(<span class="hljs-string">&quot;#ff0000&quot;</span>)<br>    turtle.hideturtle()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(value[<span class="hljs-number">1</span>]) - <span class="hljs-number">1</span>):<br>        move(value[<span class="hljs-number">1</span>][i], value[<span class="hljs-number">1</span>][i + <span class="hljs-number">1</span>])<br>    turtle.mainloop()<br>    <span class="hljs-comment"># turtle.bye()</span><br><br><br><span class="hljs-comment"># 进度条迭代</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">progressbar</span>(<span class="hljs-params">cur, total=<span class="hljs-number">100</span></span>):<br>    percent = <span class="hljs-string">&#x27;&#123;:.2%&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(cur / total)<br>    sys.stdout.write(<span class="hljs-string">&#x27;\r&#x27;</span>)<br>    sys.stdout.write(<span class="hljs-string">&quot;[%-100s] %s&quot;</span> % (<span class="hljs-string">&#x27;=&#x27;</span> * <span class="hljs-built_in">int</span>(cur), percent))<br>    sys.stdout.flush()<br><br><br><span class="hljs-comment"># 进度条</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">schedule</span>(<span class="hljs-params">blocknum, blocksize, totalsize</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    blocknum:当前已经下载的块</span><br><span class="hljs-string">    blocksize:每次传输的块大小</span><br><span class="hljs-string">    totalsize:网页文件总大小</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> totalsize == <span class="hljs-number">0</span>:<br>        percent = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span>:<br>        percent = blocknum * blocksize / totalsize<br>    <span class="hljs-keyword">if</span> percent &gt; <span class="hljs-number">1.0</span>:<br>        percent = <span class="hljs-number">1.0</span><br>    percent = percent * <span class="hljs-number">100</span><br>    progressbar(percent)<br><br><br><span class="hljs-comment"># 初始化</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init</span>():<br>    <span class="hljs-comment"># 特殊连线点</span><br>    parame = get_record(<span class="hljs-string">&#x27;http://startpage.zhuanjie.ltd/json/parame.json&#x27;</span>)<br>    <span class="hljs-comment"># 各个点在地图上的坐标</span><br>    pointin = get_record(<span class="hljs-string">&#x27;http://startpage.zhuanjie.ltd/json/point.json&#x27;</span>)<br>    <span class="hljs-comment"># 复选框的值</span><br>    valuesin = get_record(<span class="hljs-string">&#x27;http://startpage.zhuanjie.ltd/json/values.json&#x27;</span>)<br>    <span class="hljs-comment"># 根据两点距离将相邻的两个点存入matrix</span><br>    matrix = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> pointin:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> pointin:<br>            <span class="hljs-keyword">if</span> distence(i, j, parame, pointin) != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> distence(i, j, parame, pointin) != <span class="hljs-number">1E100</span>:<br>                matrix.append((i, j, distence(i, j, parame, pointin)))<br>    <span class="hljs-keyword">return</span> pointin, valuesin, matrix<br><br><br><span class="hljs-comment"># 点击按钮运行部分</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">a, b</span>):<br>    x = dijkstra(listview, a, b)<br>    <span class="hljs-built_in">print</span>(x)<br>    <span class="hljs-keyword">try</span>:<br>        draw(x)<br>    <span class="hljs-keyword">except</span> turtle.Terminator:<br>        draw(x)<br><br><br><span class="hljs-comment"># 将json文件转化为变量</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_record</span>(<span class="hljs-params">url</span>):<br>    resp = urllib.request.urlopen(url)<br>    ele_json = json.loads(resp.read())<br>    <span class="hljs-keyword">return</span> ele_json<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开始初始化&quot;</span>)<br>point, values, listview = init()<br>root = Tk()<br>root.title(<span class="hljs-string">&#x27;北京印刷学院导航系统&#x27;</span>)<br>root.geometry(<span class="hljs-string">&#x27;320x50&#x27;</span>)<br>var1 = StringVar()<br>var2 = StringVar()<br>comb1 = Combobox(root, textvariable=var1, values=values, state=<span class="hljs-string">&#x27;readonly&#x27;</span>)<br>comb2 = Combobox(root, textvariable=var2, values=values, state=<span class="hljs-string">&#x27;readonly&#x27;</span>)<br>comb1.place(relx=<span class="hljs-number">0.1</span>, rely=<span class="hljs-number">0.25</span>, relwidth=<span class="hljs-number">0.2</span>)<br>comb2.place(relx=<span class="hljs-number">0.4</span>, rely=<span class="hljs-number">0.25</span>, relwidth=<span class="hljs-number">0.2</span>)<br>btn = Button(root, text=<span class="hljs-string">&quot;导航&quot;</span>, command=<span class="hljs-keyword">lambda</span>: calc(comb1.get(), comb2.get()))<br>btn.place(relx=<span class="hljs-number">0.7</span>, rely=<span class="hljs-number">0.25</span>, relwidth=<span class="hljs-number">0.2</span>)<br>root.mainloop()<br></code></pre></td></tr></table></figure><h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><p><img src="https://blog.zhuanjie.ltd/img/uploads/2021/11/image.png" alt="项目截图"></p><p><img src="https://blog.zhuanjie.ltd/img/uploads/2021/11/image-1.png" alt="地图"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python tqdm进度条</title>
      <link href="/2021/11/12/python-tqdm/"/>
      <url>/2021/11/12/python-tqdm/</url>
      
        <content type="html"><![CDATA[<h2 id="tqdm包"><a href="#tqdm包" class="headerlink" title="tqdm包"></a>tqdm包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">from tqdm import tqdm<br></code></pre></td></tr></table></figure><h2 id="创建tqdm"><a href="#创建tqdm" class="headerlink" title="创建tqdm"></a>创建tqdm</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">pbar = tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>))  <span class="hljs-comment"># 创建进度条</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> pbar:  <span class="hljs-comment"># 在进度条中运行</span><br>    <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><h2 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">iterable=<span class="hljs-literal">None</span>,     可迭代的对象, 在手动更新时不需要进行设置<br>desc=<span class="hljs-literal">None</span>,      传入<span class="hljs-built_in">str</span>类型，作为进度条标题（类似于说明）<br>total=<span class="hljs-literal">None</span>,     预期的迭代次数（即进度条<span class="hljs-number">100</span>的时候迭代的次数）<br>leave=<span class="hljs-literal">True</span>,     <span class="hljs-built_in">bool</span>值, 迭代完成后是否保留进度条<br>file=<span class="hljs-literal">None</span>,      输出指向位置, 默认是终端, 一般不需要设置<br>ncols=<span class="hljs-literal">None</span>,     调整进度条宽度, 默认是根据环境自动调节长度, 如果设置为<span class="hljs-number">0</span>, 就没有进度条, 只有输出的信息<br>mininterval=<span class="hljs-number">0.1</span>,    最小的更新间隔<br>maxinterval=<span class="hljs-number">10.0</span>,   最大更新间隔<br>miniters=<span class="hljs-literal">None</span>, <br><span class="hljs-built_in">ascii</span>=<span class="hljs-literal">None</span>, <br>unit=<span class="hljs-string">&#x27;it&#x27;</span>,    描述处理项目的文字, 默认是<span class="hljs-string">&#x27;it&#x27;</span>, 例如: <span class="hljs-number">100</span> it/s, 处理照片的话设置为<span class="hljs-string">&#x27;img&#x27;</span> ,则为 <span class="hljs-number">100</span> img/s<br>unit_scale=<span class="hljs-literal">False</span>,    自动根据国际标准进行项目处理速度单位的换算, 例如 <span class="hljs-number">100000</span> it/s &gt;&gt; 100k it/s<br>dynamic_ncols=<span class="hljs-literal">False</span>, <br>smoothing=<span class="hljs-number">0.3</span>,<br>bar_format=<span class="hljs-literal">None</span>, <br>initial=<span class="hljs-number">0</span>, <br>position=<span class="hljs-literal">None</span>, <br>postfix=<span class="hljs-built_in">dict</span>             以字典形式传入详细信息<br></code></pre></td></tr></table></figure><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>)):<br>    sleep(<span class="hljs-number">0.01</span>)<br>    <span class="hljs-comment"># print(i)</span><br><br>pbar = tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>))  <span class="hljs-comment"># 进度条</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> pbar:<br>    err = <span class="hljs-string">&#x27;abc&#x27;</span><br>    pbar.set_description(<span class="hljs-string">&quot;Reconstruction loss: %s&quot;</span> % err)<br><br>dict1 = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">123</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">456</span>&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>), total=<span class="hljs-number">1000</span>, desc=<span class="hljs-string">&quot;进度条&quot;</span>, ncols=<span class="hljs-number">100</span>, postfix=dict1, mininterval=<span class="hljs-number">0.3</span>):<br>    sleep(<span class="hljs-number">0.01</span>)<br><br><span class="hljs-keyword">with</span> tqdm(total=<span class="hljs-number">21</span>, desc=<span class="hljs-string">&#x27;Example&#x27;</span>, leave=<span class="hljs-literal">True</span>, ncols=<span class="hljs-number">100</span>, unit=<span class="hljs-string">&#x27;B&#x27;</span>, unit_scale=<span class="hljs-literal">True</span>) <span class="hljs-keyword">as</span> pbar1:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        sleep(<span class="hljs-number">0.5</span>)  <span class="hljs-comment"># 发呆0.5秒</span><br>        pbar1.update(<span class="hljs-number">3</span>)  <span class="hljs-comment"># 更新发呆进度，每次更新3个迭代次数</span><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\zhuan\PycharmProjects\test\venv\Scripts\python.exe C:/Users/zhuan/PycharmProjects/test/进度条.py<br><span class="hljs-meta prompt_">100%</span><span class="language-bash">██████████ 1000/1000 [00:15&lt;00:00, 63.72it/s]</span><br>Reconstruction loss: abc: 100%██████████ 1000/1000 [00:00&lt;00:00, 3422.53it/s]<br>进度条: 100%█████████████████████████████████████ 1000/1000 [00:15&lt;00:00, 63.53it/s, a=123, b=456]<br>Example: 100%████████████████████████████████████████████████████ 21.0/21.0 [00:03&lt;00:00, 5.89B/s]<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux下C语言进程间通信——创建共享区</title>
      <link href="/2021/11/11/linux-c-communcation/"/>
      <url>/2021/11/11/linux-c-communcation/</url>
      
        <content type="html"><![CDATA[<p>与信号量一样，在Linux中也提供了一组函数接口用于使用共享内存，而且使用共享共存的接口还与信号量的非常相似，而且比使用信号量的接口来得简单。它们声明在头文件 sys/shm.h 中。</p><h2 id="shmget-函数"><a href="#shmget-函数" class="headerlink" title="shmget()函数"></a><strong>shmget()函数</strong></h2><p>int shmget(key_t key, size_t size, int shmflg);</p><p>第一个参数为共享内存段命名，需要提供一个参数key（非0整数），shmget()函数成功时返回一个与key相关的共享内存标识符（非负整数），用于后续的共享内存函数。调用<strong>失败返回-1</strong>。设置<strong>参数为IPC_PRIVATE时，每次都创建新的共享区</strong>，通常在父进程创建，子进程获取共享区内容。参数为数值时候，会创建固定共享区。</p><p>第二个参数，size以字节为单位指定需要共享的内存容量</p><p>第三个参数，shmflg是权限标志，它的作用与open函数的mode参数一样，如果要想在key标识的共享内存不存在时，创建它的话，可以与IPC_CREAT做或操作。共享内存的权限标志与文件的读写权限一样，举例来说，0644,它表示允许一个进程创建的共享内存被内存创建者所拥有的进程向共享内存读取和写入数据，同时其他用户创建的进程只能读取共享内存。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">-rw------- (600)    只有拥有者有读写权限。<br>-rw-r--r-- (644)    只有拥有者有读写权限；而属组用户和其他用户只有读权限。<br>-rwx------ (700)    只有拥有者有读、写、执行权限。<br>-rwxr-xr-x (755)    拥有者有读、写、执行权限；而属组用户和其他用户只有读、执行权限。<br>-rwx--x--x (711)    拥有者有读、写、执行权限；而属组用户和其他用户只有执行权限。<br>-rw-rw-rw- (666)    所有用户都有文件读、写权限。<br>-rwxrwxrwx (777)    所有用户都有读、写、执行权限。<br></code></pre></td></tr></table></figure><h2 id="shmat-函数-–-at：attach"><a href="#shmat-函数-–-at：attach" class="headerlink" title="shmat()函数    – at：attach"></a><strong>shmat()函数    – at：attach</strong></h2><p><code>void \*shmat(int shm\_id, const void \*shm\_addr, int shmflg);</code></p><p>第一次创建完共享内存时，它还不能被任何进程访问，shmat()函数的作用就是用来启动对该共享内存的访问，并把共享内存连接到当前进程的地址空间。</p><p>第一个参数，shm_id是由shmget()函数返回的共享内存标识。</p><p>第二个参数，shm_addr指定共享内存连接到当前进程中的地址位置，通常为空，表示让系统来选择共享内存的地址。</p><p>第三个参数，shm_flg是一组标志位，通常为0。</p><p>调用成功时返回一个指向共享内存第一个字节的指针，如果调用失败返回-1。</p><h2 id="shmdt-函数-–-dt：detach"><a href="#shmdt-函数-–-dt：detach" class="headerlink" title="shmdt()函数    – dt：detach"></a><strong>shmdt()函数    – dt：detach</strong></h2><p><code>int shmdt(const void \*shmaddr);</code></p><p>该函数用于将共享内存从当前进程中分离。注意，将共享内存分离并不是删除它，只是使该共享内存对当前进程不再可用。</p><p>参数shmaddr是shmat()函数返回的地址指针，调用成功时返回0，失败时返回-1。</p><h2 id="shmctl-函数-–-ctl：control"><a href="#shmctl-函数-–-ctl：control" class="headerlink" title="shmctl()函数    – ctl：control"></a><strong>shmctl()函数    – ctl：control</strong></h2><p><code>int shmctl(int shm\_id, int command, struct shmid\_ds \*buf);</code></p><p>与信号量的semctl()函数一样，用来控制共享内存。</p><p>第一个参数，shm_id是shmget()函数返回的共享内存标识符。</p><p>第二个参数，command是要采取的操作，它可以取下面的三个值 ：</p><ol><li> IPC_STAT：把shmid_ds结构中的数据设置为共享内存的当前关联值，即用共享内存的当前关联值覆盖shmid_ds的值。</li><li> IPC_SET：如果进程有足够的权限，就把共享内存的当前关联值设置为shmid_ds结构中给出的值</li><li> IPC_RMID：删除共享内存段</li></ol><p>第三个参数，buf是一个结构指针，它指向共享内存模式和访问权限的结构。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="题目1：父子进程之间数据交流"><a href="#题目1：父子进程之间数据交流" class="headerlink" title="题目1：父子进程之间数据交流"></a>题目1：父子进程之间数据交流</h3><p>创建子进程输入字符串到共享区，在子进程输入end后进入父进程输出共享区内容</p><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/shm.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> shmid;<br>    <span class="hljs-type">char</span> *p, *q;<br>    <span class="hljs-type">char</span> buffer[BUFSIZ];<br>    <span class="hljs-type">int</span> pid;<br>    <span class="hljs-comment">// 创建共享区</span><br>    shmid=shmget(IPC_PRIVATE,<span class="hljs-number">128</span>,IPC_CREAT  <span class="hljs-number">0666</span>); <span class="hljs-comment">// 成功创建值&gt;0</span><br>    <span class="hljs-keyword">if</span>(shmid &lt;<span class="hljs-number">0</span>)&#123; <span class="hljs-comment">// 创建失败为-1</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建共享内存失败\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建共享内存成功 shmid=%d\n&quot;</span>,shmid);<br>    pid=fork();<span class="hljs-comment">//创建进程pid</span><br>    <span class="hljs-keyword">if</span>(pid==<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//这是子进程</span><br>        <span class="hljs-comment">// 绑定地址p到共享区</span><br>        p=(<span class="hljs-type">char</span> *)shmat(shmid,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;子进程映射失败\n&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-2</span>;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;子进程：写入信息：&quot;</span>);<br>            fgets(buffer,<span class="hljs-number">128</span>,<span class="hljs-built_in">stdin</span>);<br>            <span class="hljs-built_in">strcat</span>(p,buffer); <br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strncmp</span>(buffer,<span class="hljs-string">&quot;end&quot;</span>,<span class="hljs-number">3</span>)==<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        shmdt(p);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pid &gt; <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">// 父进程</span><br>        wait(<span class="hljs-number">0</span>);<br>        q=(<span class="hljs-type">char</span> *)shmat(shmid,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(q==<span class="hljs-literal">NULL</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;父进程映射失败\n&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-3</span>;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;父进程：读取数据：\n%s&quot;</span>,q);<br>        shmdt(q);<br>    &#125;<br>    <span class="hljs-comment">// 删除共享区</span><br>    shmctl(shmid,IPC_RMID,<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">randall@ubuntu:~/Desktop/experiment5$ ./E5-3-2.out<br>创建共享内存成功 shmid=29<br>子进程：写入信息：1<br>子进程：写入信息：2<br>子进程：写入信息：3<br>子进程：写入信息：randall<br>子进程：写入信息：end<br>父进程：读取数据：<br>1<br>2<br>3<br>randall<br>end<br>randall@ubuntu:~/Desktop/experiment5$ <br></code></pre></td></tr></table></figure><h3 id="题目2：两个程序之间数据交流"><a href="#题目2：两个程序之间数据交流" class="headerlink" title="题目2：两个程序之间数据交流"></a>题目2：两个程序之间数据交流</h3><p>在程序shmsnd.c创建共享区然后输入字符串到共享区，再在shmrcv.c输出共享区内容</p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><h5 id="shmsnd-c"><a href="#shmsnd-c" class="headerlink" title="shmsnd.c"></a><strong>shmsnd.c</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/shm.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> shmid;<br>    <span class="hljs-type">char</span> *p;<br>    <span class="hljs-type">char</span> buffer[BUFSIZ];<br>    shmid=shmget(<span class="hljs-number">1234</span>,BUFSIZ,IPC_CREAT  <span class="hljs-number">0666</span>);<br>    <span class="hljs-keyword">if</span>(shmid &lt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建共享内存失败\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建共享内存成功 shmid=%d\n&quot;</span>,shmid);<br>    p=(<span class="hljs-type">char</span> *)shmat(shmid,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;shmsnd映射失败\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-2</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写入信息：&quot;</span>);<br>        fgets(buffer,BUFSIZ,<span class="hljs-built_in">stdin</span>);<br>        <span class="hljs-built_in">strcat</span>(p,buffer); <br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strncmp</span>(buffer,<span class="hljs-string">&quot;end&quot;</span>,<span class="hljs-number">3</span>)==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    shmdt(p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="shmrcv-c"><a href="#shmrcv-c" class="headerlink" title="shmrcv.c"></a>shmrcv.c</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/shm.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> shmid;<br>    <span class="hljs-type">char</span> *q;<br>    shmid=shmget(<span class="hljs-number">1234</span>,BUFSIZ,IPC_CREAT  <span class="hljs-number">0644</span>);<br>    <span class="hljs-keyword">if</span>(shmid &lt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建共享内存失败\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建共享内存成功 shmid=%d\n&quot;</span>,shmid);<br>    q=(<span class="hljs-type">char</span> *)shmat(shmid,<span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(q==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;shmrcv映射失败\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-3</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;读取共享区数据:\n%s&quot;</span>,q);<br>    shmdt(q);<br>    shmctl(shmid,IPC_RMID,<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">randall@ubuntu:~/Desktop/experiment5$ ./shmsnd.out<br>写入信息：1 2 3 4 5<br>写入信息：randall<br>写入信息：end<br>randall@ubuntu:~/Desktop/experiment5$ ./shmrcv.out<br>读取共享区数据:<br>1 2 3 4 5<br>randall<br>end<br>randall@ubuntu:~/Desktop/experiment5$ <br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
          <category> Linux </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python中的字典排序</title>
      <link href="/2021/11/09/python-dict-sort/"/>
      <url>/2021/11/09/python-dict-sort/</url>
      
        <content type="html"><![CDATA[<p>字典是一个无序的数据结构，一般都不对其进行排序的。但是要想对字典进行排序，是可以通过<code>sorted()</code>函数进行操作。首先声明注意一点字典中的值需要为同一种数据类型；比如在本文中的值都是字符串类型。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 先定义一个字典</span><br>sys = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>       <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-string">&#x27;十八&#x27;</span>,<br>       <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><br><span class="hljs-comment">#  单独打印出排序后的key值</span><br>new_sys = sorted(sys)<br><span class="hljs-built_in">print</span>(new_sys)<br><br>new_sys = sorted(sys.keys())<br><span class="hljs-built_in">print</span>(new_sys)<br><br><span class="hljs-comment"># 根据key的升序排列，把key value都打印出来</span><br>new_sys1 = sorted(sys.items(), <span class="hljs-attribute">key</span>=lambda d: d[0], <span class="hljs-attribute">reverse</span>=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(new_sys1)<br><br>new_sys1 = sorted(sys.items(), <span class="hljs-attribute">reverse</span>=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(new_sys1)<br><br><span class="hljs-comment"># 单独打印出排序后的value值</span><br>new_sys1 = sorted(sys.values())<br><span class="hljs-built_in">print</span>(new_sys1)<br><br><span class="hljs-comment"># 打印出根据value排序后的键值对的具体值</span><br>new_sys2 = sorted(sys.items(),  <span class="hljs-attribute">key</span>=lambda d: d[1], <span class="hljs-attribute">reverse</span>=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(new_sys2)<br></code></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-symbol">&#x27;age</span>&#x27;, <span class="hljs-symbol">&#x27;gender</span>&#x27;, <span class="hljs-symbol">&#x27;name</span>&#x27;]<br>[<span class="hljs-symbol">&#x27;age</span>&#x27;, <span class="hljs-symbol">&#x27;gender</span>&#x27;, <span class="hljs-symbol">&#x27;name</span>&#x27;]<br>[(<span class="hljs-symbol">&#x27;age</span>&#x27;, <span class="hljs-symbol">&#x27;十八</span>&#x27;), (<span class="hljs-symbol">&#x27;gender</span>&#x27;, <span class="hljs-symbol">&#x27;男</span>&#x27;), (<span class="hljs-symbol">&#x27;name</span>&#x27;, <span class="hljs-symbol">&#x27;张三</span>&#x27;)]<br>[(<span class="hljs-symbol">&#x27;age</span>&#x27;, <span class="hljs-symbol">&#x27;十八</span>&#x27;), (<span class="hljs-symbol">&#x27;gender</span>&#x27;, <span class="hljs-symbol">&#x27;男</span>&#x27;), (<span class="hljs-symbol">&#x27;name</span>&#x27;, <span class="hljs-symbol">&#x27;张三</span>&#x27;)]<br>[<span class="hljs-symbol">&#x27;man</span>&#x27;, <span class="hljs-symbol">&#x27;十八</span>&#x27;, <span class="hljs-symbol">&#x27;张三</span>&#x27;] <br>[(<span class="hljs-symbol">&#x27;gender</span>&#x27;, <span class="hljs-symbol">&#x27;man</span>&#x27;), (<span class="hljs-symbol">&#x27;age</span>&#x27;, <span class="hljs-symbol">&#x27;十八</span>&#x27;), (<span class="hljs-symbol">&#x27;name</span>&#x27;, <span class="hljs-symbol">&#x27;张三</span>&#x27;)]<br></code></pre></td></tr></table></figure><p><code>new_sys = sorted(sys)</code>将字典直接传入到<code>sorted</code>函数中 ，<code>sorted</code>函数会默认根据字典的键k对字典进行排序，同时只取字典的键k的内容，并以列表的形式返回</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">new_sys1 = sorted(sys.items(), <span class="hljs-attribute">key</span>=lambda d: d[0], <span class="hljs-attribute">reverse</span>=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p><code>sys.items()</code>这段代码，在打印输出后，会显示如下结果：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">dict_items</span>([(‘name’, ‘张三’), (‘age’, ‘十八’), (‘gender’, ‘man’)])<br><br><span class="hljs-comment">// 将原来的字典中的键值对，分别搜存入到一个元组中–&gt;(key,value)</span><br></code></pre></td></tr></table></figure><p><code>key=lambda</code> <code>d: d[0]</code> 是一个匿名函数；<br>其中：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">d == <span class="hljs-comment">(‘name’, ‘张三’)</span> 或 <span class="hljs-comment">(‘age’, ‘十八’)</span>或<span class="hljs-comment">(‘gender’, ‘man’)</span><br></code></pre></td></tr></table></figure><p><code>d[0]</code>是获取每个元组中的第一个元素，就是原<code>sys</code>字典中的<code>key</code>；并将匿名函数的返回值返回给<code>sorted</code>函数的key参数</p><p><code>reverse=False</code> 排序默认是按照升序排列的，也可以改为<code>True</code></p><p><code>sorted(sys.values())</code> <code>sorted</code>函数默认是根据键<code>key</code>排序的，所以想要根据值<code>value</code>排序，就需要在<code>sys</code>后面使用<code>values()</code>，获取字典的<code>value</code>值</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">new_sys2 = sorted(sys.items(), <span class="hljs-attribute">key</span>=lambda d: d[1], <span class="hljs-attribute">reverse</span>=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">d == <span class="hljs-comment">(‘name’, ‘张三’)</span> 或 <span class="hljs-comment">(‘age’, ‘十八’)</span>或<span class="hljs-comment">(‘gender’, ‘man’)</span><br></code></pre></td></tr></table></figure><p><code>d[1]</code>是获取每个元组中的第二个元素，就是原<code>sys</code>字典中的<code>value</code>；并将匿名函数的返回值返回给<code>sorted</code>函数的<code>key</code>参数</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于Linux下软中断通信子进程不输出（接收不到信号问题）</title>
      <link href="/2021/11/05/linux-ruanzhongduan-problem/"/>
      <url>/2021/11/05/linux-ruanzhongduan-problem/</url>
      
        <content type="html"><![CDATA[<p>软中断通信的一题：</p><p>编写程序：用<code>fork( )</code>创建两个子进程，再用系统调用<code>signal( )</code>让父进程捕捉键盘上来的中断信号(即按^c键)；捕捉到中断信号后，父进程用系统调用<code>kill( )</code>向两个子进程发出信号，子进程捕捉到信号后分别输出下列信息后终止：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Child process1 <span class="hljs-keyword">is</span> killed <span class="hljs-keyword">by</span> parent!<br>Child process2 <span class="hljs-keyword">is</span> killed <span class="hljs-keyword">by</span> parent!<br></code></pre></td></tr></table></figure><p>父进程等待两个子进程终止后，输出如下的信息后终止：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">Parent <span class="hljs-keyword">process</span> <span class="hljs-keyword">is</span> killed!<br></code></pre></td></tr></table></figure><p>编译运行后发现如果不在父进程添加<code>sleep()</code>就会导致子进程无法输出：</p><p>我用输出不同数字夹在进程通信的代码周围：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><br><span class="hljs-type">int</span> flag_signal=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">int_func</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span></span>&#123;<br>    flag_signal=<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> pid1 = fork();<br>    <span class="hljs-keyword">if</span> (pid1 &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error in fork!&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid1 == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;4\n&quot;</span>);<br>        <span class="hljs-built_in">signal</span>(SIGUSR1,int_func);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;5\n&quot;</span>);<br>        <span class="hljs-keyword">while</span>(flag_signal==<span class="hljs-number">1</span>)&#123;<span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);&#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Child progress 1 is killed by parent!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> pid2 = fork();<br>        <span class="hljs-keyword">if</span> (pid2 &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error in fork!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid2 == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;6\n&quot;</span>);<br>            <span class="hljs-built_in">signal</span>(SIGUSR2,int_func);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;7\n&quot;</span>);<br>            <span class="hljs-keyword">while</span>(flag_signal==<span class="hljs-number">1</span>)&#123;<span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);&#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Child progress 2 is killed by parent!\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1\n&quot;</span>);<br>            <span class="hljs-built_in">kill</span>(pid1,SIGUSR1);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2\n&quot;</span>);<br>            <span class="hljs-built_in">kill</span>(pid2,SIGUSR2);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3\n&quot;</span>);<br>            <span class="hljs-built_in">wait</span>(<span class="hljs-number">0</span>);<br>            <span class="hljs-built_in">wait</span>(<span class="hljs-number">0</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Parent progress is killed!\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时输出是：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs elixir">randall<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~/Desktop</span><span class="hljs-variable">$ </span>gcc helloword.c<br>randall<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~/Desktop</span><span class="hljs-variable">$ </span>./a.out<br><span class="hljs-number">4</span><br><span class="hljs-number">5</span><br><span class="hljs-number">6</span><br><span class="hljs-number">7</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-title class_">Child</span> progress <span class="hljs-number">1</span> is killed by parent!<br><span class="hljs-title class_">Child</span> progress <span class="hljs-number">2</span> is killed by parent!<br><span class="hljs-title class_">Parent</span> progress is killed!<br>randall<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~/Desktop</span><span class="hljs-variable">$ </span><br></code></pre></td></tr></table></figure><p>去掉<code>sleep(1)</code>;后输出变成了</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs elixir">randall<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~/Desktop</span><span class="hljs-variable">$ </span>gcc helloword.c<br>randall<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~/Desktop</span><span class="hljs-variable">$ </span>./a.out<br><span class="hljs-number">1</span><br><span class="hljs-number">4</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-title class_">Parent</span> progress is killed!<br>randall<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~/Desktop</span><span class="hljs-variable">$ </span><br></code></pre></td></tr></table></figure><p>可以看出没有加<code>sleep()</code>的时候根本没有运行到子进程</p><p>原因：没有使主线程<code>sleep</code>会导致主线程优先运行，主线程运行完了kill指令，发送信号给了子线程，但是子线程没有加载到<code>signal</code>命令，把主线程丢给子线程的信号抛弃，最后子线程随着主线程关闭关闭导致不输出子线程的数据。</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
          <category> Linux </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux下c语言进程通讯——wait()/wait(&amp;status)/WIFEXITED(status)和exit()之间的关系</title>
      <link href="/2021/11/02/linux-wait-waitstatus-wifexitedstatus-exit/"/>
      <url>/2021/11/02/linux-wait-waitstatus-wifexitedstatus-exit/</url>
      
        <content type="html"><![CDATA[<h2 id="wait-函数定义"><a href="#wait-函数定义" class="headerlink" title="wait()函数定义"></a>wait()函数定义</h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br>pid_t wait(<span class="hljs-built_in">int</span> *status)<br>// 参数status用来保存被收集进程退出时的一些状态，它是一个指向<span class="hljs-built_in">int</span>类型的指针。但如果我们对这个子进程是如何死掉的毫不在意，只想把这个僵尸进程消灭掉，（事实上绝大多数情况下，我们都会这样想），我们就可以设定这个参数为<span class="hljs-literal">NULL</span>，如pid=wait(<span class="hljs-literal">NULL</span>)，返回给pid的值就是子进程的id<br></code></pre></td></tr></table></figure><h2 id="WIFEXITED-status-WEXITSTATUS-status"><a href="#WIFEXITED-status-WEXITSTATUS-status" class="headerlink" title="WIFEXITED(status)/WEXITSTATUS(status)"></a>WIFEXITED(status)/WEXITSTATUS(status)</h2><p>当子进程正常结束时，WIFEXITED(status) 返回非0值；当子进程异常结束时，WIFEXITED(status) 返回0值</p><p>WEXITSTATUS(status)在WIFEXITED(status)为非0时可以用来获取exit()中的参数即返回给父进程的值，如果子进程调用exit(5)退出，WEXITSTATUS(status)就会返回5；如果进程不是正常退出的，也就是说，WIFEXITED返回0</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> status;<br>    <span class="hljs-type">pid_t</span> pc,pr;<br>    pc=fork();<br>    <span class="hljs-keyword">if</span>(pc&lt;<span class="hljs-number">0</span>) <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error ocurred!\n&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pc==<span class="hljs-number">0</span>)&#123; <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This is child process with pid of %d.\n&quot;</span>,<span class="hljs-built_in">getpid</span>());<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">5</span>);        <br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;           <br>        pr=<span class="hljs-built_in">wait</span>(&amp;status);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">WIFEXITED</span>(status))&#123;  <br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the child process %d exit normally.\n&quot;</span>,pr);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;WIFEXITED(status) is %d.\n&quot;</span>,<span class="hljs-built_in">WIFEXITED</span>(status));<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;WEXITSTATUS(status) is %d.\n&quot;</span>,<span class="hljs-built_in">WEXITSTATUS</span>(status));<br>        &#125;<br>        <span class="hljs-keyword">else</span>                   <br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the child process %d exit abnormally.\n&quot;</span>,pr);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="http://blog.zhuanjie.ltd/img/uploads/2021/11/%E5%9B%BE%E7%89%87-1.png" alt="运行后截图"></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
          <category> Linux </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python判断数据类型</title>
      <link href="/2021/10/22/python-judge-character/"/>
      <url>/2021/10/22/python-judge-character/</url>
      
        <content type="html"><![CDATA[<p>python用与判断数据类型的函数：</p><p><code>isinstance()</code>函数<br><code>isinstance(变量,类型) </code><br><code>isinstance(i, int) </code><br>可以用来判断变量的类型，它返回的是一个布尔值，False or True.</p><p><code>type()</code>函数<br>不是判断变量的类型，而使直接返回变量的类型</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于Linux下子进程输出问题</title>
      <link href="/2021/10/22/linux-output/"/>
      <url>/2021/10/22/linux-output/</url>
      
        <content type="html"><![CDATA[<p>子进程输出的个数跟是否换行有关？</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;before fork with  换行符\n&quot;</span>);  <br><span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;before fork without换行符&quot;</span>);  <br>pid = <span class="hljs-keyword">fork</span>();<br><span class="hljs-keyword">if</span>(pid == <span class="hljs-number">0</span>)&#123;　　<span class="hljs-regexp">//</span>子进程<br>　　<span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;I am is  child process,pid=%d\n&quot;</span>,getpid());   <br>　　<span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;my parentprocess&#x27;s pid=%d\n&quot;</span>,getppid()); <br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pid &gt; <span class="hljs-number">0</span>)&#123;　　<span class="hljs-regexp">//</span>父进程<br>　　<span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;this is parentprocess,pid=%d\n&quot;</span>,getpid()); <br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">　　<span class="hljs-keyword">before</span> fork <span class="hljs-keyword">with</span>  换行符<br>　　<span class="hljs-keyword">before</span> fork <span class="hljs-keyword">without</span>换行符I am <span class="hljs-keyword">is</span>  child process,pid=<span class="hljs-number">4123</span><br>　　<span class="hljs-keyword">my</span> parentprocess&#x27;s pid=<span class="hljs-number">4000</span><br>　　<span class="hljs-keyword">before</span> fork <span class="hljs-keyword">without</span>换行符this <span class="hljs-keyword">is</span> parentprocess,pid=<span class="hljs-number">4000</span><br></code></pre></td></tr></table></figure><p>问题：两个printf为什么一个打印一次，另外一个打印了两次？</p><p>解答： 我们要知道printf函数是有缓冲机制的，类似于我们使用的write函数，但我们将想要的东西输出的时候，系统仅仅是把内容放到stdout标准输出的缓冲队列的。当遇到“\n”的时候，系统就把缓冲里的东西给清掉，输出到屏幕上。执行后，缓冲里没有了数据，自然子进程再次执行的时候没有内容可输出了。但是<code>printf(&quot;before fork without换行符&quot;);</code>的时候，子进程也会把stdout的内容再次输出来。也就是导致了内容出处了两边。</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
          <category> Linux </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络计算UDP校验和</title>
      <link href="/2021/10/19/udp-checksum/"/>
      <url>/2021/10/19/udp-checksum/</url>
      
        <content type="html"><![CDATA[<p><img src="http://blog.zhuanjie.ltd/img/uploads/2021/10/image-6.png" alt="wireshark抓包截图"></p><blockquote><p> 源IP地址：123.151.78.47(0x7b97, 0x4e2f)</p><p>目的IP地址：10.66.149.117(0xa42, 0x9575)</p><p>源端口：8000(0x1f40)</p><p>目的端口：4006(0xfa6)</p><p>UDP长度：39(0x27)</p><p>数据：0x023a, 0x2700, 0xcd27, 0x6784, 0xc57e, 0xf400, 0x0000, 0x5ad0, 0xc585, 0xf70f, 0xf03a, 0x71fa, 0x294d, 0xe354, 0x2bdf, 0x0300 校验和：0x9ab9</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// C语言计算校验和</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-title function_">checksum</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> *buf,<span class="hljs-type">int</span> nword)</span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> sum;<br>    <span class="hljs-keyword">for</span>(sum=<span class="hljs-number">0</span>;nword&gt;<span class="hljs-number">0</span>;nword--)&#123;<br>        sum += *buf++;<br>        sum = (sum&gt;&gt;<span class="hljs-number">16</span>) + (sum&amp;<span class="hljs-number">0xffff</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ~sum;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> buffer[<span class="hljs-number">26</span>] = &#123;<br>            <span class="hljs-number">0x7b97</span>, <span class="hljs-number">0x4e2f</span>, <span class="hljs-comment">// 源IP地址： 123.151.78.47(0x7b97, 0x4e2f)</span><br>            <span class="hljs-number">0x0a42</span>, <span class="hljs-number">0x9575</span>, <span class="hljs-comment">// 目的IP地址：10.66.149.117(0xa42, 0x9575)</span><br>            <span class="hljs-number">0x0011</span>, <span class="hljs-number">0x0027</span>, <span class="hljs-comment">// UDP协议字段值17(0x0011) UDP长度： 39(0x27)</span><br>            <span class="hljs-number">0x1f40</span>, <span class="hljs-number">0x0fa6</span>, <span class="hljs-comment">// 源端口： 8000(0x1f40) 目的端口： 4006(0xfa6)</span><br>            <span class="hljs-number">0x0027</span>, <span class="hljs-number">0x0000</span>, <span class="hljs-comment">// UDP长度： 39(0x27) 校验和（计算时置0）（0x0000） </span><br>            <span class="hljs-number">0x023a</span>, <span class="hljs-number">0x2700</span>, <span class="hljs-comment">// 数据字段，不够位数最后补0 </span><br>            <span class="hljs-number">0xcd27</span>, <span class="hljs-number">0x6784</span>,<br>            <span class="hljs-number">0xc57e</span>, <span class="hljs-number">0xf400</span>,<br>            <span class="hljs-number">0x0000</span>, <span class="hljs-number">0x5ad0</span>,<br>            <span class="hljs-number">0xc585</span>, <span class="hljs-number">0xf70f</span>,<br>            <span class="hljs-number">0xf03a</span>, <span class="hljs-number">0x71fa</span>,<br>            <span class="hljs-number">0x294d</span>, <span class="hljs-number">0xe354</span>,<br>            <span class="hljs-number">0x2bdf</span>, <span class="hljs-number">0x0300</span>&#125;;<br>    <span class="hljs-type">int</span> n=<span class="hljs-number">26</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> re_checksum;<br>    re_checksum=checksum(buffer,n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\t&quot;</span>,re_checksum);<br>    <span class="hljs-keyword">if</span>(re_checksum == <span class="hljs-number">0x9ab9</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;校验和正确!\n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;校验和不正确!\n&quot;</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p><img src="http://blog.zhuanjie.ltd/img/uploads/2021/10/image-8.png" alt="运行截图"></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux下C语言进程管理（创建子进程的原理）——操作系统实验2</title>
      <link href="/2021/10/18/linux-os2/"/>
      <url>/2021/10/18/linux-os2/</url>
      
        <content type="html"><![CDATA[<h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>(1)通过实验使学生了解Linux C程序的编译和运行;</p><p>(2)掌握fork函数的编程方法;</p><p>(3)热悉并发进程的程序的编写。</p><h2 id="实验预备知识"><a href="#实验预备知识" class="headerlink" title="实验预备知识"></a>实验预备知识</h2><p>(1)Linux文本编辑器vi和gedit；</p><p>(2)gcc编译器。</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>1 父进程创建子进程 1)父进程显示“11111” 2)子进程显示“22222” 3）多次执行该程序观察结果。</p><p>2 父进程创建子进程 1)父进程显示“I am parent\n”5次，每次输出后使用sleep(1)延时1秒，然后再进入下次循环。 2)子进程显示“I am child\n”5次，每次输出后使用 sleep(1)延时1秒，然后再进入下次循环。</p><p>3.进程家族树：在原程序中连续使用4个fork()，然后输出 字母“A”。观察并分析输出结果。</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>1.先打开终端输入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo apt-<span class="hljs-built_in">get</span> install gcc<br></code></pre></td></tr></table></figure><p>安装C、C++编译器gcc</p><p>2.编写代码，在代码所在文件夹下打开终端，运行</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>gcc C语言源文件文件名 -o 输出文件名<br><span class="hljs-variable">$ </span>./输出文件名<br></code></pre></td></tr></table></figure><p>编译运行C语言文件</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="E2-3-1-c"><a href="#E2-3-1-c" class="headerlink" title="E2-3-1.c"></a>E2-3-1.c</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> pid = fork();<br>    <span class="hljs-keyword">if</span> (pid &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error in fork!&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;子进程:\n22222\npid:%d \n&quot;</span>,<span class="hljs-built_in">getpid</span>());<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;父进程:\n11111\npid:%d \n&quot;</span>,<span class="hljs-built_in">getpid</span>());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="E2-3-2-c"><a href="#E2-3-2-c" class="headerlink" title="E2-3-2.c"></a>E2-3-2.c</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> pid = fork();<br>    <span class="hljs-keyword">if</span> (pid &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error in fork!&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am child.\n&quot;</span>);<br>            <span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am parent.\n&quot;</span>);<br>            <span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="E2-3-3-c"><a href="#E2-3-3-c" class="headerlink" title="E2-3-3.c"></a>E2-3-3.c</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> pid1 = fork();<br>    <span class="hljs-keyword">if</span> (pid1 &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error in fork!&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid1 == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A\n&quot;</span>);<br>        <span class="hljs-type">int</span> pid2 = fork();<br>        <span class="hljs-keyword">if</span> (pid2 &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error in fork!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid2 == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A\n&quot;</span>);<br>            <span class="hljs-type">int</span> pid3 = fork();<br>            <span class="hljs-keyword">if</span> (pid3 &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error in fork!&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid3 == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A\n&quot;</span>);<br>                <span class="hljs-type">int</span> pid4 = fork();<br>                <span class="hljs-keyword">if</span> (pid4 &lt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error in fork!&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid4 == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A\n&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A\n&quot;</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A\n&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A\n&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="http://blog.zhuanjie.ltd/img/uploads/2021/10/q-3.png"></p><p>E2-3-1.c编译运行截图</p><p><img src="http://blog.zhuanjie.ltd/img/uploads/2021/10/w.png"></p><p>E2-3-2.c编译运行截图</p><p><img src="http://blog.zhuanjie.ltd/img/uploads/2021/10/image-9.png"></p><p>E2-3-3.c编译运行截图</p><h2 id="进程创建方法与创建进程数"><a href="#进程创建方法与创建进程数" class="headerlink" title="进程创建方法与创建进程数"></a>进程创建方法与创建进程数</h2><p>fork()函数的原理：以当前进程作为父进程创建出一个新的子进程，并且将父进程的所有资源拷贝给子进程，这样子进程作为父进程的一个副本存在。父子进程几乎时完全相同的，但也有不同的如父子进程ID不同。即为创建一个新的进程里面从新进程（即fork处）运行，新的进程拷贝原本进程的所有状态（包括变量，输入输出流等），这两个进程有pid不同（原进程大于0，子进程等于0）、 getpid()（该函数返回当前进程的id号）返回值不同；</p><h3 id="利用循环-for-循环里无判断-顺序并列创建进程"><a href="#利用循环-for-循环里无判断-顺序并列创建进程" class="headerlink" title="利用循环(for)(循环里无判断)/顺序并列创建进程"></a>利用循环(for)(循环里无判断)/顺序并列创建进程</h3><p>循环次数n→进程数n^2（父进程1个+子进程n^2-1个）</p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> pid[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>        pid[i]=fork();<br>    &#125;<br>    <span class="hljs-keyword">if</span>(pid[<span class="hljs-number">0</span>]*pid[<span class="hljs-number">1</span>]*pid[<span class="hljs-number">2</span>]==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;子进程ID=%d\n&quot;</span>,<span class="hljs-built_in">getpid</span>());<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;父进程ID=%d\n&quot;</span>,<span class="hljs-built_in">getpid</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros">randall@ubuntu:~/Desktop$ gcc exper.c<br>randall@ubuntu:~/Desktop$ ./a.out<br>父进程<span class="hljs-attribute">ID</span>=2344<br>randall@ubuntu:~/Desktop$ 子进程<span class="hljs-attribute">ID</span>=2345<br>父进程<span class="hljs-attribute">ID</span>=2345<br>子进程<span class="hljs-attribute">ID</span>=2346<br>子进程<span class="hljs-attribute">ID</span>=2347<br>父进程<span class="hljs-attribute">ID</span>=2347<br>父进程<span class="hljs-attribute">ID</span>=2346<br>子进程<span class="hljs-attribute">ID</span>=2348<br>子进程<span class="hljs-attribute">ID</span>=2349<br>父进程<span class="hljs-attribute">ID</span>=2349<br>子进程<span class="hljs-attribute">ID</span>=2350<br>父进程<span class="hljs-attribute">ID</span>=2350<br>父进程<span class="hljs-attribute">ID</span>=2348<br>子进程<span class="hljs-attribute">ID</span>=2351<br>父进程<span class="hljs-attribute">ID</span>=2351<br></code></pre></td></tr></table></figure><h3 id="利用循环-for-循环里有判断-嵌套创建进程"><a href="#利用循环-for-循环里有判断-嵌套创建进程" class="headerlink" title="利用循环(for)(循环里有判断)/嵌套创建进程"></a>利用循环(for)(循环里有判断)/嵌套创建进程</h3><p>循环次数n→进程数n+1（父进程1个+子进程n个）</p><h4 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> pid[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>        pid[i]=fork();<br>        <span class="hljs-keyword">if</span>(pid[i]&gt;<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">// 该处是让子进程去创建子进程，可以把判断条件改成pid[i]==0变成让父进程循环去创建子进程</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(pid[<span class="hljs-number">0</span>]*pid[<span class="hljs-number">1</span>]*pid[<span class="hljs-number">2</span>]==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;子进程ID=%d\n&quot;</span>,<span class="hljs-built_in">getpid</span>());<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;父进程ID=%d\n&quot;</span>,<span class="hljs-built_in">getpid</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs elixir">randall<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~/Desktop</span><span class="hljs-variable">$ </span>gcc exper.c<br>randall<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~/Desktop</span><span class="hljs-variable">$ </span>./a.out<br>父进程<span class="hljs-title class_">ID</span>=<span class="hljs-number">2446</span><br>randall<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~/Desktop</span><span class="hljs-variable">$ </span>子进程<span class="hljs-title class_">ID</span>=<span class="hljs-number">2447</span><br>父进程<span class="hljs-title class_">ID</span>=<span class="hljs-number">2447</span><br>子进程<span class="hljs-title class_">ID</span>=<span class="hljs-number">2448</span><br>父进程<span class="hljs-title class_">ID</span>=<span class="hljs-number">2448</span><br>子进程<span class="hljs-title class_">ID</span>=<span class="hljs-number">2449</span><br>父进程<span class="hljs-title class_">ID</span>=<span class="hljs-number">2449</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux下Shell语言编写程序——操作系统实验1</title>
      <link href="/2021/10/18/linux-shell-os1/"/>
      <url>/2021/10/18/linux-shell-os1/</url>
      
        <content type="html"><![CDATA[<h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>(1)通过实验使学生了解Linux提供的用户界面中的作业批处理操作界面：</p><p>(2)掌握Linux Shell脚本的编辑和执行，熟悉批处理语言的编程方法：</p><p>(3)熟悉Linux提供的文本编辑器vi (Gedit)的使用。</p><h2 id="实验预备知识"><a href="#实验预备知识" class="headerlink" title="实验预备知识"></a>实验预备知识</h2><p>(1)Linux文本编辑器vi (Gedit) 。</p><p>(2)Linux批处理文件(Shell脚本)的编辑和执行</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>(1)用Shell语言编制一个批处理程序，其功能如下：</p><p> 1) 屏幕提示用户键盘输入年、月；</p><p> 2) 接收用户的输入值；</p><p> 3) 输出该年该月的日历。</p><p>(2)创建一个Shell文件，完成以下功能：</p><p> 1) 将键盘输入的内容保存到文件myfile.txt 中；</p><p> 2) 显示该文件内容；</p><p> 3) 显示当前目录下的所有文件和目录名称。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="E1-3-1-sh"><a href="#E1-3-1-sh" class="headerlink" title="E1-3-1.sh"></a>E1-3-1.sh</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs clean">#!/bin/bash<br>## “#!”是一个约定的标记，它告诉系统这个脚本需要哪一种解释器来执行<br>## 编译之前需要加权：$ chmod +x 文件名<br><br>## 提示输入年<br>echo <span class="hljs-string">&quot;Please input year: &quot;</span><br>## 将年读入变量YEAR<br>read YEAR<br>## 提示输入月<br>echo <span class="hljs-string">&quot;Please input month: &quot;</span><br>## 将月存入变量MONTH<br>read MONTH<br>## 输出日历<br>cal $MONTH $YEAR<br><br>## date命令：显示日期与时间的命令<br>## 其中date命令又可以带一些参数，如果我们想让当前的日期的显示格式为<span class="hljs-number">2015</span><span class="hljs-number">-05</span><span class="hljs-number">-14</span> <span class="hljs-number">21</span>：<span class="hljs-number">22</span>则应该输入date +%Y-%m-%d，如果输出具体时间，格式为<span class="hljs-number">21</span>：<span class="hljs-number">22</span>，表示当前的时间的话，可以输入date +%H:%M<br>## cal命令：显示日历的命令<br>## 如果要列出当前这个月份的月历，可以直接使用命令cal即可，如果我们想列出某个年的月历情况，我们可以输入命令cal <span class="hljs-number">2016</span>，如果想列出某个年的某个月的话，我们可以输入命令cal <span class="hljs-number">9</span> <span class="hljs-number">2015</span>，即可查看<span class="hljs-number">2015</span>年<span class="hljs-number">9</span>月份的日历<br>## bc命令：一个简单好用的计算器<br>## 加法：+    减法：-    乘法：*    除法：/    指数：^    余数：%<br>## 使用quit命令可以退出bc计算器<br>## bc默认仅输出整数，如果要输出全部小数，那么就必须要执行scale=number，这里的number指的是小数点后的位数<br></code></pre></td></tr></table></figure><h3 id="E1-3-2-sh"><a href="#E1-3-2-sh" class="headerlink" title="E1-3-2.sh"></a>E1-3-2.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Please input some word: &quot;</span><br><span class="hljs-built_in">read</span> WORD<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$WORD</span> &gt;&gt; myfile.txt<br><span class="hljs-comment">## 一个箭头会覆盖写入，两个箭头是追加写入</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;The word in myfile.txt: &quot;</span><br><span class="hljs-comment">## cat命令用于连接文件并将内容输出到标准输出设备上</span><br><span class="hljs-built_in">cat</span> myfile.txt<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;The doucments in this dictionary: &quot;</span><br><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p>对E1-3-1.sh进行加权后运行：</p><p><img src="http://blog.zhuanjie.ltd/img/uploads/2021/10/image-4.png"></p><p>对E1-3-2.sh进行加权后运行：</p><p><img src="http://blog.zhuanjie.ltd/img/uploads/2021/10/image-3.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python的列表，集合，字典的区别和使用</title>
      <link href="/2021/10/16/python-list-set-dict/"/>
      <url>/2021/10/16/python-list-set-dict/</url>
      
        <content type="html"><![CDATA[<h2 id="列表List"><a href="#列表List" class="headerlink" title="列表List"></a>列表List</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">res = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;Randall&#x27;</span>]<br><br><span class="hljs-comment"># 增加元素：extend和append</span><br><br><span class="hljs-comment"># 如果想添加的一个元素是一个列表，那么append是将这个这个列表作为一个元素添加进来，而extend是将列中的元素一个一个添加进去</span><br>res.append(<span class="hljs-number">1</span>)<br>res.extend(<span class="hljs-string">&#x27;R&#x27;</span>)<br><br><span class="hljs-comment"># 删除元素：del，pop，切片，remove</span><br><span class="hljs-keyword">del</span> res[<span class="hljs-number">1</span>]<span class="hljs-comment"># 删除指定位置的元素</span><br>res.pop(<span class="hljs-number">1</span>)<span class="hljs-comment"># 弹出（删除）该位置上的元素，没有指定则是最后一个元素</span><br>res = res[:<span class="hljs-number">2</span>]+res[<span class="hljs-number">3</span>:]<span class="hljs-comment">#切片：从开始到角标为2的左边一个元素加上角标为3的元素到最后一个元素</span><br>res.remove(<span class="hljs-number">2</span>)<span class="hljs-comment"># 删除指定值的元素</span><br><br><span class="hljs-comment"># 更改元素</span><br>res[<span class="hljs-number">1</span>] = <span class="hljs-number">100</span><span class="hljs-comment"># 将指定位置的元素改为100</span><br><br><span class="hljs-comment"># 查元素</span><br><span class="hljs-built_in">print</span>(res[<span class="hljs-number">0</span>])<span class="hljs-comment"># 输出指定元素</span><br><br></code></pre></td></tr></table></figure><h3 id="列表内置函数完整列表"><a href="#列表内置函数完整列表" class="headerlink" title="列表内置函数完整列表"></a>列表内置函数完整列表</h3><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">len(list)</td><td align="center">列表元素个数</td></tr><tr><td align="center">max(list)</td><td align="center">返回列表元素最大值</td></tr><tr><td align="center">min(list)</td><td align="center">返回列表元素最小值</td></tr><tr><td align="center">list(seq)</td><td align="center">将元组转换为列表</td></tr></tbody></table><h3 id="列表内置方法完整列表"><a href="#列表内置方法完整列表" class="headerlink" title="列表内置方法完整列表"></a>列表内置方法完整列表</h3><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">list.append(obj)</td><td align="center">在列表末尾添加新的对象</td></tr><tr><td align="center">list.count(obj)</td><td align="center">统计某个元素在列表中出现的次数</td></tr><tr><td align="center">list.extend(seq)</td><td align="center">在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td align="center">list.index(obj)</td><td align="center">从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td align="center">list.insert(index, obj)</td><td align="center">将对象插入列表</td></tr><tr><td align="center">list.pop([index=-1])</td><td align="center">移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td align="center">list.remove(obj)</td><td align="center">移除列表中某个值的第一个匹配项</td></tr><tr><td align="center">list.reverse()</td><td align="center">反向列表中元素</td></tr><tr><td align="center">list.sort( key=None, reverse=False)</td><td align="center">对原列表进行排序</td></tr><tr><td align="center">list.clear()</td><td align="center">清空列表</td></tr><tr><td align="center">list.copy()</td><td align="center">复制列表</td></tr></tbody></table><hr><h2 id="集合Set"><a href="#集合Set" class="headerlink" title="集合Set"></a>集合Set</h2><p>创建一个空集合必须用 <strong>set()</strong> 而不是 **{ }**，因为 <strong>{ }</strong> 是用来创建一个空字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建</span><br>parame = &#123;value01,value02,...&#125;<br>parame = <span class="hljs-built_in">set</span>(value)<br><br><span class="hljs-comment"># 增加元素：add和update</span><br>parame.add(<span class="hljs-number">1</span>)<br>parame.update(x)<span class="hljs-comment"># x可以是列表，元组，字典等，若有多个x，每个x中间用逗号隔开</span><br><br><span class="hljs-comment"># 删除元素：remove，discard， pop() </span><br>parame.remove(x)<span class="hljs-comment"># 删除指定元素,若元素不存在则会发生错误</span><br>parame.discard(x)<span class="hljs-comment"># 删除指定元素,若元素不存在不会发生错误</span><br>parame.pop()<span class="hljs-comment"># 随机删除集合中的一个元素</span><br><br><span class="hljs-comment"># 计算集合parame里的元素个数</span><br><span class="hljs-built_in">len</span>(parame)<br><br><span class="hljs-comment"># 清空集合</span><br>parame.clear()<br><br><span class="hljs-comment"># 判断元素x是否在集合parame中</span><br>x <span class="hljs-keyword">in</span> parame<span class="hljs-comment"># 存在返回 True，不存在返回 False</span><br></code></pre></td></tr></table></figure><h3 id="集合内置方法完整列表"><a href="#集合内置方法完整列表" class="headerlink" title="集合内置方法完整列表"></a>集合内置方法完整列表</h3><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">add()</td><td align="center">为集合添加元素</td></tr><tr><td align="center">clear()</td><td align="center">移除集合中的所有元素</td></tr><tr><td align="center">copy()</td><td align="center">拷贝一个集合</td></tr><tr><td align="center">difference()</td><td align="center">返回多个集合的差集</td></tr><tr><td align="center">difference_update()</td><td align="center">移除集合中的元素，该元素在指定的集合也存在。</td></tr><tr><td align="center">discard()</td><td align="center">删除集合中指定的元素</td></tr><tr><td align="center">intersection()</td><td align="center">返回集合的交集</td></tr><tr><td align="center">intersection_update()</td><td align="center">返回集合的交集。</td></tr><tr><td align="center">isdisjoint()</td><td align="center">判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。</td></tr><tr><td align="center">issubset()</td><td align="center">判断指定集合是否为该方法参数集合的子集。</td></tr><tr><td align="center">issuperset()</td><td align="center">判断该方法的参数集合是否为指定集合的子集</td></tr><tr><td align="center">pop()</td><td align="center">随机移除元素</td></tr><tr><td align="center">remove()</td><td align="center">移除指定元素</td></tr><tr><td align="center">symmetric_difference()</td><td align="center">返回两个集合中不重复的元素集合。</td></tr><tr><td align="center">symmetric_difference_update()</td><td align="center">移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。</td></tr><tr><td align="center">union()</td><td align="center">返回两个集合的并集</td></tr><tr><td align="center">update()</td><td align="center">给集合添加元素</td></tr></tbody></table><hr><h2 id="字典Dict"><a href="#字典Dict" class="headerlink" title="字典Dict"></a>字典Dict</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 创建空的字典<br>dict1 = dict()<br>empty_dict = &#123;&#125;# 空的花括号代表空的dict<br>dict2 = &#123;<span class="hljs-string">&#x27;A&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;B&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;C&#x27;</span>: <span class="hljs-number">3</span>&#125;<br>dict3 = &#123;(<span class="hljs-number">20</span>, <span class="hljs-number">30</span>):<span class="hljs-string">&#x27;good&#x27;</span>, <span class="hljs-number">30</span>:<span class="hljs-string">&#x27;bad&#x27;</span>&#125;# 使用元组作为dict的key<br>dict4 = dict(spinach = <span class="hljs-number">1.39</span>, cabbage = <span class="hljs-number">2.59</span>)# 使用关键字参数来创建字典，输出为&#123;<span class="hljs-string">&#x27;spinach&#x27;</span>: <span class="hljs-number">1.39</span>, <span class="hljs-string">&#x27;cabbage&#x27;</span>: <span class="hljs-number">2.59</span>&#125;<br><br># 增加元素：<br>dict2[<span class="hljs-string">&#x27;D&#x27;</span>] = <span class="hljs-number">93</span># 对不存在的key赋值，就是增加key-value对<br># 如果对 dict 中存在的 key-value 对赋值，新赋的 value 就会覆盖原有的 value<br><br># 删除元素：del<br>del dict2[<span class="hljs-string">&#x27;A&#x27;</span>]<br><br># 清空集合<br>dict2.clear()<br><br># 判断元素x是否在集合parame中<br><span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-keyword">in</span> dict2# 存在返回 <span class="hljs-literal">True</span>，不存在返回 <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h3 id="字典内置函数-方法完整列表"><a href="#字典内置函数-方法完整列表" class="headerlink" title="字典内置函数/方法完整列表"></a>字典内置函数/方法完整列表</h3><table><thead><tr><th align="center">函数/方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">len(dict)</td><td align="center">计算字典元素个数，即键的总数</td></tr><tr><td align="center">str(dict)</td><td align="center">输出字典，可以打印的字符串表示</td></tr><tr><td align="center">type(variable)</td><td align="center">返回输入的变量类型，如果变量是字典就返回字典类型</td></tr><tr><td align="center">radiansdict.clear()</td><td align="center">删除字典内所有元素</td></tr><tr><td align="center">radiansdict.copy()</td><td align="center">返回一个字典的浅复制</td></tr><tr><td align="center">radiansdict.fromkeys()</td><td align="center">创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值</td></tr><tr><td align="center">radiansdict.get(key, default=None)</td><td align="center">返回指定键的值，如果键不在字典中返回 default 设置的默认值</td></tr><tr><td align="center">key in dict</td><td align="center">如果键在字典dict里返回true，否则返回false</td></tr><tr><td align="center">radiansdict.items()</td><td align="center">以列表返回一个视图对象</td></tr><tr><td align="center">radiansdict.keys()</td><td align="center">返回一个视图对象</td></tr><tr><td align="center">radiansdict.setdefault(key, default=None)</td><td align="center">和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td></tr><tr><td align="center">radiansdict.update(dict2)</td><td align="center">把字典dict2的键/值对更新到dict里</td></tr><tr><td align="center">radiansdict.values()</td><td align="center">返回一个视图对象</td></tr><tr><td align="center">pop(key[,default])</td><td align="center">删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值</td></tr><tr><td align="center">popitem()</td><td align="center">随机返回并删除字典中的最后一对键和值</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>移动应用基础——AndroidStudio编程（未完成）</title>
      <link href="/2021/10/15/androidstudiostudy/"/>
      <url>/2021/10/15/androidstudiostudy/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h2><h3 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// MainActivity.java代码设置</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">TextView</span> text;<span class="hljs-comment">// 新建TextView类型变量</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void onCreate(<span class="hljs-type">Bundle</span> savedInstanceState) &#123;<span class="hljs-comment">// 界面设置</span><br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(<span class="hljs-type">R</span>.layout.activity_main);<br>        <span class="hljs-type">String</span> word = <span class="hljs-string">&quot;TEXT&quot;</span>;<br><br>        text = (<span class="hljs-type">TextView</span>) <span class="hljs-keyword">this</span>.findViewById(<span class="hljs-type">R</span>.id.textView1);<span class="hljs-comment">//获取TextViev类型变量对应文本控件的ID，并绑定到text中</span><br>        text.setText(word);<span class="hljs-comment">// 设置文本内容为String类型变量word里的值</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// layout文件夹下activity_main.xml</span><br>&lt;<span class="hljs-type">TextView</span><br>        android:id=<span class="hljs-string">&quot;@+id/textView&quot;</span><span class="hljs-comment">// 控件id</span><br>        android:layout_width=<span class="hljs-string">&quot;wrap_content&quot;</span><span class="hljs-comment">// 控件宽度</span><br>        android:layout_height=<span class="hljs-string">&quot;wrap_content&quot;</span><span class="hljs-comment">// 控件高度</span><br>        android:text=<span class="hljs-string">&quot;@string/home_word&quot;</span><span class="hljs-comment">// 显示的文本</span><br>        android:textColor=<span class="hljs-string">&quot;#000000&quot;</span><span class="hljs-comment">// 文本的颜色</span><br>        android:textSize=<span class="hljs-string">&quot;48sp&quot;</span><span class="hljs-comment">// 文本字体大小</span><br>        app:layout_constraintBottom_toBottomOf=<span class="hljs-string">&quot;parent&quot;</span><br>        app:layout_constraintHorizontal_bias=<span class="hljs-string">&quot;0.1&quot;</span><br>        app:layout_constraintLeft_toLeftOf=<span class="hljs-string">&quot;parent&quot;</span><br>        app:layout_constraintRight_toRightOf=<span class="hljs-string">&quot;parent&quot;</span><br>        app:layout_constraintTop_toTopOf=<span class="hljs-string">&quot;parent&quot;</span><br>        app:layout_constraintVertical_bias=<span class="hljs-string">&quot;0.029999971&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// MainActivity.java代码设置</span><br>public <span class="hljs-keyword">class</span> MainActivity extends AppCompatActivity &#123;<br><br>    <span class="hljs-keyword">private</span> TextView text;<span class="hljs-comment">// 新建TextView类型变量</span><br>    <span class="hljs-keyword">private</span> Button button1;<span class="hljs-comment">// 新建Button类型变量</span><br><br>    @Override<br>    protected void on<span class="hljs-constructor">Create(Bundle <span class="hljs-params">savedInstanceState</span>)</span> &#123;<span class="hljs-comment">// 界面设置</span><br>        super.on<span class="hljs-constructor">Create(<span class="hljs-params">savedInstanceState</span>)</span>;<br>        set<span class="hljs-constructor">ContentView(R.<span class="hljs-params">layout</span>.<span class="hljs-params">activity_main</span>)</span>;<br>        String word = <span class="hljs-string">&quot;TEXT&quot;</span>;<br><br>        button1 = (Button) this.find<span class="hljs-constructor">ViewById(R.<span class="hljs-params">id</span>.<span class="hljs-params">button</span>)</span>;<span class="hljs-comment">//获取Button类型变量对应按钮控件的ID，并绑定到button1中</span><br>        text = (TextView) this.find<span class="hljs-constructor">ViewById(R.<span class="hljs-params">id</span>.<span class="hljs-params">textView1</span>)</span>;<br><br>        <span class="hljs-comment">//设置按钮点击监听器MyOnClickListener</span><br>        button1.set<span class="hljs-constructor">OnClickListener( <span class="hljs-params">new</span> View.OnClickListener()</span> &#123;<br>            @Override<br>            public void on<span class="hljs-constructor">Click(View <span class="hljs-params">v</span>)</span> &#123;<br><br>                <span class="hljs-comment">// 点击后运行的代码写在这</span><br>                text.set<span class="hljs-constructor">Text(<span class="hljs-params">word</span>)</span>;<span class="hljs-comment">// 这里运行点击按钮后更改文本为变量word里的内容</span><br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Toast</span>.</span></span>make<span class="hljs-constructor">Text(MainActivity.<span class="hljs-params">this</span>, <span class="hljs-string">&quot;您点击了按钮！&quot;</span>, Toast.LENGTH_SHORT)</span>.show<span class="hljs-literal">()</span>;<span class="hljs-comment">// Toast通知</span><br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// layout文件夹下activity_main.xml</span><br>&lt;Button<br>        android:id=<span class="hljs-string">&quot;@+id/button&quot;</span><span class="hljs-comment">// Button控件的id</span><br>        android:layout_width=<span class="hljs-string">&quot;wrap_content&quot;</span><span class="hljs-comment">// Button控件的宽度</span><br>        android:layout_height=<span class="hljs-string">&quot;wrap_content&quot;</span><span class="hljs-comment">// Button控件的高度</span><br>        android:text=<span class="hljs-string">&quot;@string/button_word&quot;</span><span class="hljs-comment">// Button按钮上的文字</span><br>        app:layout_constraintBottom_toTopOf=<span class="hljs-string">&quot;@+id/up&quot;</span><br>        app:layout_constraintEnd_toEndOf=<span class="hljs-string">&quot;@+id/end&quot;</span><br>        app:layout_constraintStart_toStartOf=<span class="hljs-string">&quot;@+id/start&quot;</span><br>        app:layout_constraintTop_toBottomOf=<span class="hljs-string">&quot;@+id/buttom&quot;</span><br>        tools:ignore=<span class="hljs-string">&quot;MissingConstraints&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 使用java代码设置</span><br><span class="hljs-function"><span class="hljs-title">setProgress</span><span class="hljs-params">(int)</span></span> <span class="hljs-comment">//设置第一进度</span><br><span class="hljs-function"><span class="hljs-title">setSecondaryProgress</span><span class="hljs-params">(int)</span></span> <span class="hljs-comment">//设置第二进度</span><br><span class="hljs-function"><span class="hljs-title">getProgress</span><span class="hljs-params">()</span></span> <span class="hljs-comment">//获取第一进度</span><br><span class="hljs-function"><span class="hljs-title">getSecondaryProgress</span><span class="hljs-params">()</span></span> <span class="hljs-comment">//获取第二进度</span><br><span class="hljs-function"><span class="hljs-title">incrementProgressBy</span><span class="hljs-params">(int)</span></span> <span class="hljs-comment">//增加或减少第一进度</span><br><span class="hljs-function"><span class="hljs-title">incrementSecondaryProgressBy</span><span class="hljs-params">(int)</span></span> <span class="hljs-comment">//增加或减少第二进度</span><br><span class="hljs-function"><span class="hljs-title">getMax</span><span class="hljs-params">()</span></span> <span class="hljs-comment">//获取最大进度</span><br><br><br><span class="hljs-comment">// layout文件夹下activity_main.xml</span><br>&lt;ProgressBar<br>            android:id=<span class="hljs-string">&quot;@+id/pb_main_download&quot;</span><br>            style=<span class="hljs-string">&quot;?android:attr/progressBarStyleHorizontal&quot;</span><br>            android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span><br>            android:layout_height=<span class="hljs-string">&quot;match_parent&quot;</span><br>            android:max=<span class="hljs-string">&quot;100&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><hr><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="跳转页面"><a href="#跳转页面" class="headerlink" title="跳转页面"></a>跳转页面</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// java文件里实现跳转activity的代码段</span><br>Intent intent = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Intent()</span>;<br>intent.set<span class="hljs-constructor">Class(<span class="hljs-params">com</span>.<span class="hljs-params">example</span>.<span class="hljs-params">helloword</span>.MainActivity.<span class="hljs-params">this</span>, MainActivity2.<span class="hljs-params">class</span>)</span>;<span class="hljs-comment">// 括号里两个变量，第一个为当前activity名称，后一个问要启动的activity的名称</span><br>start<span class="hljs-constructor">Activity(<span class="hljs-params">intent</span>)</span>;<br><br><br><span class="hljs-comment">// 新的activity要在AndroidManifest.xml文件里注册</span><br><span class="hljs-comment">// 可以在新的java文件中public class 文件名 extends AppCompatActivity的文件名处，alt+enter选择Add activity to manifest</span><br>&lt;activity<br>        android:name=<span class="hljs-string">&quot;.MainActivity2&quot;</span><br>        android:exported=<span class="hljs-string">&quot;false&quot;</span><br>        android:parentActivityName=<span class="hljs-string">&quot;.MainActivity&quot;</span><br>        android:label=<span class="hljs-string">&quot;@string/page2_welcome&quot;</span>/&gt;<br><span class="hljs-comment">//android:exported=&quot;true&quot;当前Activity是否可以被另一个Application的组件启动：true允许被启动；false不允许被启动</span><br><span class="hljs-comment">//android:parentActivityName实现了某个子界面下的左上角返回按钮返回到的页面</span><br><span class="hljs-comment">//android:label表示了页面上的左上角文字，默认包名</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AndroidStudio </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AS报错“Could not find com.android.tools.build:gradle:4.1.2.”</title>
      <link href="/2021/10/14/as-wrong-could-not-find-com-android-tools-buildgradle4-1-2/"/>
      <url>/2021/10/14/as-wrong-could-not-find-com-android-tools-buildgradle4-1-2/</url>
      
        <content type="html"><![CDATA[<p>更改build.gradle文件，换用阿里镜像</p><p>解决报错：Using insecure protocols with repositories, without explicit opt-in, is unsupported. Switch Maven repository ‘maven(<a href="http://maven.aliyun.com/nexus/content/groups/public/)&#39;">http://maven.aliyun.com/nexus/content/groups/public/)&#39;</a> to redirect to a secure protocol (like HTTPS) or allow insecure protocols.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span><br><br><span class="hljs-keyword">buildscript</span> &#123;<br>    <span class="hljs-keyword">repositories</span> &#123;<br>        google()<br>        jcenter()<br>        <span class="hljs-comment">//allowInsecureProtocol = true</span><br>        <span class="hljs-keyword">maven</span> &#123; url <span class="hljs-string">&quot;https://maven.aliyun.com/nexus/content/groups/public/&quot;</span> &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">dependencies</span> &#123;<br>        classpath <span class="hljs-symbol">&#x27;com</span>.android.tools.build<span class="hljs-operator">:</span>gradle<span class="hljs-operator">:</span>4.1.2&#x27;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">allprojects</span> &#123;<br>    <span class="hljs-keyword">repositories</span> &#123;<br>        google()<br>        jcenter()<br>        <span class="hljs-comment">//allowInsecureProtocol = true</span><br>        <span class="hljs-keyword">maven</span> &#123; url <span class="hljs-string">&quot;https://maven.aliyun.com/nexus/content/groups/public/&quot;</span> &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AndroidStudio </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>21春数据库系统设计小学期——大学实验材料管理信息系统数据库设计</title>
      <link href="/2021/07/02/shujvkuxiaoxueqi/"/>
      <url>/2021/07/02/shujvkuxiaoxueqi/</url>
      
        <content type="html"><![CDATA[<h1 id="大学实验材料管理信息系统数据库设计"><a href="#大学实验材料管理信息系统数据库设计" class="headerlink" title="大学实验材料管理信息系统数据库设计"></a>大学实验材料管理信息系统数据库设计</h1><blockquote><p> <strong>由于本人云服务器系统更新问题，项目后端数据库已经移植，下载后的程序无法连接到数据库，可重构项目并且自行搭建数据库</strong></p></blockquote><p><em>本程序是我都小学期作业，内部肯定存在很多不是最合适的代码跟算法，望大佬指正。最终程序采用云服务器</em></p><p><a href="http://startpage.zhuanjie.ltd/download/dxssyclxxglxt.zip">成品链接1</a></p><h2 id="课程设计内容要求"><a href="#课程设计内容要求" class="headerlink" title="课程设计内容要求"></a>课程设计内容要求</h2><blockquote><p><strong>设计一个小型数据库（使用Microsoft SQL Server ）</strong><br>（1）数据库来源于对现实世界的抽象和概括，要求设计科学、规范、合理，符合现实情况和实际需求；<br>（2）数据表的设计要求：关系模式至少要满足第三范式，既具有较低的冗余度，又具有较高的访问效率。要求有六个及以上的表，根据实际操作需要定义合理的索引；<br>（3）数据库设计的安全性要求：配置SQL Server以支持SQL Server用户身份验证方式，根据实际需要定义合理的用户权限以及用户视图；<br>（4）数据库设计的完整性要求：要求根据实际需要定义合理的完整性约束（实体完整性、参照完整性以及用户自定义完整性等）；<br>（5）根据实际情况定义合理的存储过程和触发器；<br>（6）数据展示系统设计：选择自己熟悉的界面开发工具，将设计的数据库功能（增加、删除、修改、查询）展示出来。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>这次课设我的选题是大学实验材料管理信息系统。简单的人工管理和文件系统已经无法应付繁杂的实验材料信息，难以高效整合实验材料信息，从而使实验材料管理费时费力的同时又难以取得理想的效果。而数据库刚好可以弥补人工管理和文件系统的不足。数据库具有许多优点：数据结构化、数据的共享度高，冗余度低、数据独立性高、数据安全性高和便于管理和控制。因此设计大学实验材料管理信息系统进行实验材料管理是十分有意义的。<br>数据库设计主要是设计出一个对于学生材料的管理系统。通过分析，规划，该系统分为五大模块。分别为登录页面、注册页面、学生页面、管理员页面、游客页面。其中：登录界面分为学生登录和管理员登录，登录方式可选择姓名登录、学号登录和游客登录；注册界面分为学生注册跟管理员注册（注册的时候要核查数据库内部是否有相同学号工号的用户，如果存在相同值，显示无法注册）；学生界面可以显示信息、借用材料、归还材料和修改账户设置；管理员界面可以显示、修改、添加和删除各个表里的信息；游客界面只能显示目前未借用材料的信息。</p></blockquote><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><blockquote><p>大学实验材料管理信息系统需要设计出两类人（学生和管理）登录、注册和使用操作的系统。学生要完成获取信息，借用材料，归还材料等操作。管理员要完成对于各个表的管理和修改。<br>大学实验材料管理信息系统分别为登录页面、注册页面、学生页面、管理员页面、游客页面。其中：登录界面分为学生登录和管理员登录，登录方式可选择姓名登录、学号登录和游客登录；注册界面分为学生注册跟管理员注册（注册的时候要核查数据库内部是否有相同学号工号的用户，如果存在相同值，显示无法注册）；学生界面可以显示信息、借用材料、归还材料和修改账户设置；管理员界面可以显示、修改、添加和删除各个表里的信息；游客界面只能显示目前未借用材料的信息。</p></blockquote><h2 id="概要结构设计"><a href="#概要结构设计" class="headerlink" title="概要结构设计"></a>概要结构设计</h2><blockquote><p>大学实验材料管理信息系统分别为登录页面、注册页面、学生页面、管理员页面、游客页面。其中：登录界面分为学生登录和管理员登录，登录方式可选择姓名登录、学号登录和游客登录；注册界面分为学生注册跟管理员注册（注册的时候要核查数据库内部是否有相同学号工号的用户，如果存在相同值，显示无法注册）；学生界面可以显示信息、借用材料、归还材料和修改账户设置；管理员界面可以显示、修改、添加和删除各个表里的信息；游客界面只能显示目前未借用材料的信息。<br>实验材料管理信息系统数据库在设计功能时,应该从用户的易用性、数据库的安全性和管理员的管理三个方面入手。<br>用户对于实验材料的借用以及余量的查询，要易于查看，符合直觉设计。拒绝用户删除、修改材料余量、借用历史和借用中等数据。只允许用户更改本人信息。并且要求测试边界条件以防暑假错误损坏数据库。<br>注册过程分为用户注册和管理员注册。实验材料应该由实验管理员进行管理，为了确保数据库的访问对象时材料管理员，应该设计相应的界面完成登录功能，防止数据库信息被非管理者修改和破坏。<br>为了更好地进行实验材料的管理，管理员可以查看、修改材料的信息和材料使用的信息。因而要设计材料信息查看、修改和删除功能。材料归实验室所属，而实验室的使用者是班级的学生。为了更好的了解材料的使用情况，应该掌握学生和实验室的信息，通过数据库了解实验室的使用情况。<br>除此之外，在借用和归还时，应该只可以选择可以操作的材料，更符合设计美学跟使用直觉。<br><img src="https://img-blog.csdnimg.cn/img_convert/b879f1770b20bcf9e39c785cd00198d2.png" alt="在这里插入图片描述"></p></blockquote><h2 id="数据库字典"><a href="#数据库字典" class="headerlink" title="数据库字典"></a>数据库字典</h2><h3 id="MS表（材料信息）"><a href="#MS表（材料信息）" class="headerlink" title="MS表（材料信息）"></a>MS表（材料信息）</h3><table><thead><tr><th>列名</th><th>数据类型</th><th>允许NULL值</th><th>备注</th></tr></thead><tbody><tr><td>MSNA</td><td>nchar(10)</td><td>√</td><td>材料名称</td></tr><tr><td>MSNO</td><td>nchar(10)</td><td>√</td><td>材料编号</td></tr><tr><td>MSNU</td><td>int</td><td>√</td><td>材料库存量</td></tr><tr><td>MSLNA</td><td>nchar(10)</td><td>√</td><td>实验室名称</td></tr><tr><td>MSLNO</td><td>nchar(10)</td><td>√</td><td>实验室编号</td></tr><tr><td>MSDP</td><td>tinyint</td><td>√</td><td>是否需要归还：1需要归还；0不需要归还</td></tr></tbody></table><h3 id="MSL表（实验室信息）"><a href="#MSL表（实验室信息）" class="headerlink" title="MSL表（实验室信息）"></a>MSL表（实验室信息）</h3><table><thead><tr><th>列名</th><th>数据类型</th><th>允许NULL值</th><th>备注</th></tr></thead><tbody><tr><td>MSLNA</td><td>nchar(10)</td><td>√</td><td>实验室名称</td></tr><tr><td>MSLNO</td><td>nchar(10)</td><td>√</td><td>实验室编号</td></tr><tr><td>ADNA</td><td>nchar(10)</td><td>√</td><td>管理员姓名</td></tr><tr><td>ADNO</td><td>nchar(10)</td><td>√</td><td>管理员工号</td></tr></tbody></table><h3 id="ST表（学生信息）"><a href="#ST表（学生信息）" class="headerlink" title="ST表（学生信息）"></a>ST表（学生信息）</h3><table><thead><tr><th>列名</th><th>数据类型</th><th>允许NULL值</th><th>备注</th></tr></thead><tbody><tr><td>STNA</td><td>nchar(10)</td><td>√</td><td>学生姓名</td></tr><tr><td>STNO</td><td>nchar(10)</td><td>√</td><td>学生学号</td></tr><tr><td>STKE</td><td>nchar(64)</td><td>√</td><td>学生密码</td></tr></tbody></table><h3 id="AD表（管理员信息）"><a href="#AD表（管理员信息）" class="headerlink" title="AD表（管理员信息）"></a>AD表（管理员信息）</h3><table><thead><tr><th>列名</th><th>数据类型</th><th>允许NULL值</th><th>备注</th></tr></thead><tbody><tr><td>ADNA</td><td>nchar(10)</td><td>√</td><td>管理员姓名</td></tr><tr><td>ADNO</td><td>nchar(10)</td><td>√</td><td>管理员工号</td></tr><tr><td>ADKE</td><td>nchar(64)</td><td>√</td><td>管理员密码</td></tr></tbody></table><h3 id="BO表（借用中信息表）"><a href="#BO表（借用中信息表）" class="headerlink" title="BO表（借用中信息表）"></a>BO表（借用中信息表）</h3><table><thead><tr><th>列名</th><th>数据类型</th><th>允许NULL值</th><th>备注</th></tr></thead><tbody><tr><td>STNO</td><td>nchar(10)</td><td>√</td><td>学生学号</td></tr><tr><td>MSLNO</td><td>nchar(10)</td><td>√</td><td>实验室编号</td></tr><tr><td>MSNO</td><td>nchar(10)</td><td>√</td><td>材料编号</td></tr><tr><td>BONU</td><td>int</td><td>√</td><td>借用数量</td></tr><tr><td>BODA</td><td>nchar(10)</td><td>√</td><td>借用日期</td></tr><tr><td>RTDA</td><td>nchar(10)</td><td>√</td><td>预计归还日期</td></tr><tr><td>CODE</td><td>nchar(10)</td><td>√</td><td>核验码</td></tr></tbody></table><h3 id="RE表（借用历史表）"><a href="#RE表（借用历史表）" class="headerlink" title="RE表（借用历史表）"></a>RE表（借用历史表）</h3><table><thead><tr><th>列名</th><th>数据类型</th><th>允许NULL值</th><th>备注</th></tr></thead><tbody><tr><td>STNO</td><td>nchar(10)</td><td>√</td><td>学生学号</td></tr><tr><td>MSLNO</td><td>nchar(10)</td><td>√</td><td>实验室编号</td></tr><tr><td>MSNO</td><td>nchar(10)</td><td>√</td><td>材料编号</td></tr><tr><td>BONU</td><td>int</td><td>√</td><td>借用数量</td></tr><tr><td>BODA</td><td>nchar(10)</td><td>√</td><td>借用日期</td></tr><tr><td>RTDA</td><td>nchar(10)</td><td>√</td><td>归还日期</td></tr></tbody></table><h2 id="E-R图"><a href="#E-R图" class="headerlink" title="E-R图"></a>E-R图</h2><blockquote><p><img src="https://img-blog.csdnimg.cn/20210705102826100.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhbmRhbGxDaHU=,size_16,color_FFFFFF,t_70#pic_center" alt="数据库E-R图"></p></blockquote><h2 id="数据流图"><a href="#数据流图" class="headerlink" title="数据流图"></a>数据流图</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/6e9f83d7f5c761f73ead85c305dbf70e.png" alt="数据流图"></p><h2 id="代码界面部分（采用VS2019C-语言编写）"><a href="#代码界面部分（采用VS2019C-语言编写）" class="headerlink" title="代码界面部分（采用VS2019C#语言编写）"></a>代码界面部分（采用VS2019C#语言编写）</h2><h3 id="1-login-cs"><a href="#1-login-cs" class="headerlink" title="1.login.cs"></a>1.login.cs</h3><p>代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 21数据库系统设计小学期——大学实验材料管理信息系统数据库设计</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 修改时间：2021/7/20</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 版本：2.0.2</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 作者：转接R</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 详细信息：https://blog.csdn.net/RandallChu/article/details/118423456</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 21.7.20更新日志：</span><br><span class="hljs-comment"> * 1.优化数据库，删除部分无用数据库列</span><br><span class="hljs-comment"> * 2.增加密码加密算法，通过sha256加密算法加密用户密码，将加密后的密码存入数据库</span><br><span class="hljs-comment"> * 3.更新数据库部分列的表示意义和属性</span><br><span class="hljs-comment"> * 4.添加了错误操作窗口抖动</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 21.7.22更新日志：</span><br><span class="hljs-comment"> * 1.修复了修改密码报错新旧密码重复的问题</span><br><span class="hljs-comment"> * 2.利用云端服务器数据库替代本地数据库</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Data.SqlClient;<br><span class="hljs-keyword">using</span> System.Drawing;<br><span class="hljs-keyword">using</span> System.Security.Cryptography;<br><span class="hljs-keyword">using</span> System.Text;<br><span class="hljs-keyword">using</span> System.Threading;<br><span class="hljs-keyword">using</span> System.Windows.Forms;<br><br><br><span class="hljs-keyword">namespace</span> 大学实验材料管理信息系统数据库设计<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">login</span> : <span class="hljs-title">Form</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> connectket= <span class="hljs-string">&quot;server=/*服务器ip*/;port=1433/*端口*/;user=/*用户名*/;password=/*密码*/;database=大学实验材料管理信息系统数据库设计&quot;</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">login</span>()</span><br>        &#123;<br>            InitializeComponent();<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(connectket);<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                conn.Open();<span class="hljs-comment">//打开通道，建立连接</span><br>                label7.Text = <span class="hljs-string">&quot;云端数据库连接成功！&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (SqlException ex)<br>            &#123;<br>                MessageBox.Show(ex.Message);  <span class="hljs-comment">//有异常</span><br>                label7.Text = <span class="hljs-string">&quot;云端数据库连接失败！请检查网络设置后重新加载程序！&quot;</span>;<br>            &#125;<br>            conn.Close();<br>        &#125;<br><br><br>        <span class="hljs-comment">//全局标识符id</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> id;<br><br>        <span class="hljs-comment">//获取今天日期</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> today = DateTime.Now.ToString(<span class="hljs-string">&quot;yyyyMMdd&quot;</span>);<br><br>        <span class="hljs-comment">//创建随机标识符</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">char</span>[] constant = &#123; <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;Z&#x27;</span> &#125;;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">GenerateRandom</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> Length</span>)</span><br>        &#123;<br>            System.Text.StringBuilder newRandom = <span class="hljs-keyword">new</span>(<span class="hljs-number">62</span>);<br>            Random rd = <span class="hljs-keyword">new</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; Length; i++)<br>            &#123;<br>                newRandom.Append(constant[rd.Next(<span class="hljs-number">62</span>)]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> newRandom.ToString();<br>        &#125;<br><br>        <span class="hljs-comment">//21.7.20——SHA256算法加密密码</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">GetSHA256HashFromString</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> strData</span>)</span><br>        &#123;<br>            <span class="hljs-built_in">byte</span>[] bytValue = System.Text.Encoding.UTF8.GetBytes(strData);<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                SHA256 sha256 = <span class="hljs-keyword">new</span> SHA256CryptoServiceProvider();<br>                <span class="hljs-built_in">byte</span>[] retVal = sha256.ComputeHash(bytValue);<br>                StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; retVal.Length; i++)<br>                &#123;<br>                    stringBuilder.Append(retVal[i].ToString(<span class="hljs-string">&quot;x2&quot;</span>));<br>                &#125;<br>                <span class="hljs-keyword">return</span> stringBuilder.ToString();<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception ex)<br>            &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;GetSHA256HashFromString() fail,error:&quot;</span> + ex.Message);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">groupBox2_Enter</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Form2_Load</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button2_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            textBox1.Text = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//清空文本框内容</span><br>            textBox2.Text = <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button6_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            textBox3.Text = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//清空文本框内容</span><br>            textBox4.Text = <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">radioButton4_CheckedChanged</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button8_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.Close();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button4_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.Close();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button1_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            String UserName, Password;<br>            UserName = textBox1.Text;<br>            Password = GetSHA256HashFromString(textBox2.Text.ToString().Trim());<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(connectket);<br>            <span class="hljs-comment">//姓名登录</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.radioButton1.Checked)<br>            &#123;<br>                String sql = <span class="hljs-string">$&quot;select count(*) from ST where STNA=&#x27;<span class="hljs-subst">&#123;<span class="hljs-keyword">this</span>.textBox1.Text&#125;</span>&#x27; and STKE = &#x27;<span class="hljs-subst">&#123;Password&#125;</span>&#x27;&quot;</span>;<br>                SqlCommand cmd = <span class="hljs-keyword">new</span>(sql, conn);<br>                SqlDataAdapter adapter = <span class="hljs-keyword">new</span>();<br>                adapter.SelectCommand = cmd;<br>                conn.Open();<br>                <span class="hljs-comment">//查询返回结果</span><br>                <span class="hljs-built_in">int</span> result = (<span class="hljs-built_in">int</span>)cmd.ExecuteScalar();<br>                <span class="hljs-keyword">if</span> (result == <span class="hljs-number">1</span>)<br>                &#123;<br>                    MessageBox.Show(<span class="hljs-string">&quot;登录成功！&quot;</span>);<br>                    SqlCommand com = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;select STNO from ST where STNA=&#x27;&quot;</span> + textBox1.Text.Trim() + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                    SqlDataReader dr = com.ExecuteReader();<br>                    <span class="hljs-keyword">if</span> (dr.Read())<br>                    &#123;<br>                        id = dr[<span class="hljs-number">0</span>].ToString().Trim();<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        id = <span class="hljs-string">&quot;none&quot;</span>;<br>                    &#125;<br>                    dr.Dispose();<br>                    com.Dispose();<br>                    <span class="hljs-keyword">this</span>.Hide();<br>                    student form1 = <span class="hljs-keyword">new</span>();<br>                    form1.Show();<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result == <span class="hljs-number">0</span>)<br>                &#123;<br>                    <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                    MessageBox.Show(<span class="hljs-string">&quot;用户名/密码错误！&quot;</span>);<br>                    textBox2.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                    MessageBox.Show(<span class="hljs-string">&quot;存在重名，请使用学号登录！&quot;</span>);<br>                    textBox1.Text = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//清空文本框内容</span><br>                &#125;<br>                conn.Close();<br>            &#125;<br>            <span class="hljs-comment">//学号登录</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.radioButton2.Checked)<br>            &#123;<br>                String sql = <span class="hljs-string">$&quot;select count(*) from ST where STNO=&#x27;<span class="hljs-subst">&#123;<span class="hljs-keyword">this</span>.textBox1.Text&#125;</span>&#x27; and STKE = &#x27;<span class="hljs-subst">&#123;Password&#125;</span>&#x27;&quot;</span>;<br>                SqlCommand cmd = <span class="hljs-keyword">new</span>(sql, conn);<br>                SqlDataAdapter adapter = <span class="hljs-keyword">new</span>();<br>                adapter.SelectCommand = cmd;<br>                conn.Open();<br>                <span class="hljs-comment">//查询返回结果</span><br>                <span class="hljs-built_in">int</span> result = (<span class="hljs-built_in">int</span>)cmd.ExecuteScalar();<br>                conn.Close();<br>                <span class="hljs-keyword">if</span> (result == <span class="hljs-number">1</span>)<br>                &#123;<br>                    MessageBox.Show(<span class="hljs-string">&quot;登录成功。&quot;</span>);<br>                    id = <span class="hljs-keyword">this</span>.textBox1.Text.Trim();<br>                    <span class="hljs-keyword">this</span>.Hide();<br>                    student form1 = <span class="hljs-keyword">new</span>();<br>                    form1.Show();<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result == <span class="hljs-number">0</span>)<br>                &#123;<br>                    <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                    MessageBox.Show(<span class="hljs-string">&quot;学号/密码错误！&quot;</span>);<br>                    textBox2.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                    MessageBox.Show(<span class="hljs-string">&quot;数据库信息错误，请联系管理员！&quot;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//游客登录</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.radioButton3.Checked)<br>            &#123;<br>                MessageBox.Show(<span class="hljs-string">&quot;登陆成功！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>, MessageBoxButtons.OK);<br>                <span class="hljs-keyword">this</span>.Hide();<br>                guider form1 = <span class="hljs-keyword">new</span>();<br>                form1.Show();<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                MessageBox.Show(<span class="hljs-string">&quot;请选择登录方式！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>, MessageBoxButtons.OK);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">label5_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button3_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.Hide();<br>            register form1 = <span class="hljs-keyword">new</span>();<br>            form1.Show();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button7_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.Hide();<br>            register form1 = <span class="hljs-keyword">new</span>();<br>            form1.Show();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button5_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            String UserName, Password;<br>            UserName = textBox3.Text;<br>            Password = GetSHA256HashFromString(textBox4.Text.ToString().Trim());<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(connectket);<br>            <span class="hljs-comment">//姓名登录</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.radioButton4.Checked)<br>            &#123;<br>                String sql = <span class="hljs-string">$&quot;select count(1) from AD where ADNA=&#x27;<span class="hljs-subst">&#123;<span class="hljs-keyword">this</span>.textBox3.Text&#125;</span>&#x27; and ADKE = &#x27;<span class="hljs-subst">&#123;Password&#125;</span>&#x27;&quot;</span>;<br>                SqlCommand cmd = <span class="hljs-keyword">new</span>(sql, conn);<br>                SqlDataAdapter adapter = <span class="hljs-keyword">new</span>();<br>                adapter.SelectCommand = cmd;<br>                conn.Open();<br>                <span class="hljs-comment">//查询返回结果</span><br>                <span class="hljs-built_in">int</span> result = (<span class="hljs-built_in">int</span>)cmd.ExecuteScalar();<br>                <span class="hljs-keyword">if</span> (result == <span class="hljs-number">1</span>)<br>                &#123;<br>                    MessageBox.Show(<span class="hljs-string">&quot;登录成功！&quot;</span>);<br>                    SqlCommand com = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;select ADNO from AD where ADNA=&#x27;&quot;</span> + textBox3.Text.Trim() + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                    SqlDataReader dr = com.ExecuteReader();<br>                    <span class="hljs-keyword">if</span> (dr.Read())<br>                    &#123;<br>                        id = dr[<span class="hljs-number">0</span>].ToString().Trim();<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        id = <span class="hljs-string">&quot;none&quot;</span>;<br>                    &#125;<br>                    dr.Dispose();<br>                    com.Dispose();<br>                    <span class="hljs-keyword">this</span>.Hide();<br>                    Admin form1 = <span class="hljs-keyword">new</span>();<br>                    form1.Show();<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                    MessageBox.Show(<span class="hljs-string">&quot;用户名/密码错误！&quot;</span>);<br>                    textBox4.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                &#125;<br>                conn.Close();<br>            &#125;<br>            <span class="hljs-comment">//工号登录</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.radioButton5.Checked)<br>            &#123;<br>                String sql = <span class="hljs-string">$&quot;select count(1) from AD where ADNO=&#x27;<span class="hljs-subst">&#123;<span class="hljs-keyword">this</span>.textBox3.Text&#125;</span>&#x27; and ADKE = &#x27;<span class="hljs-subst">&#123;Password&#125;</span>&#x27;&quot;</span>;<br>                SqlCommand cmd = <span class="hljs-keyword">new</span>(sql, conn);<br>                SqlDataAdapter adapter = <span class="hljs-keyword">new</span>();<br>                adapter.SelectCommand = cmd;<br>                conn.Open();<br>                <span class="hljs-comment">//查询返回结果</span><br>                <span class="hljs-built_in">int</span> result = (<span class="hljs-built_in">int</span>)cmd.ExecuteScalar();<br>                conn.Close();<br>                <span class="hljs-keyword">if</span> (result == <span class="hljs-number">1</span>)<br>                &#123;<br>                    MessageBox.Show(<span class="hljs-string">&quot;登录成功！&quot;</span>);<br>                    id = <span class="hljs-keyword">this</span>.textBox3.Text.Trim();<br>                    <span class="hljs-keyword">this</span>.Hide();<br>                    Admin form1 = <span class="hljs-keyword">new</span>();<br>                    form1.Show();<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                    MessageBox.Show(<span class="hljs-string">&quot;用户名/密码错误！&quot;</span>);<br>                    textBox4.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                MessageBox.Show(<span class="hljs-string">&quot;请选择登录方式！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>, MessageBoxButtons.OK);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><blockquote><p>登录界面分为学生登录和管理员登录。两种登录方式都分为姓名登录和ID登录，学生登录可以选择游客登录。登陆方式为获取填入文本框的ID、密码和选中的radiobutton，再将这两个值作为关键字传入选中的radiobutton对应的数据库进行比对，返回符合条件数量result。<br>如果result等于1就登陆成功，获取当前的用户ID存入当前全局静态变量ID中，跳转到radiobutton对应的窗口；如果result等于0就显示登陆失败，抖动登录窗口；对于result大于1的情况，如果姓名登录，显示要求学号/工号登录，如果ID登录，显示数据库错误，数据库信息遭到破坏，需要数据库管理员来修复数据库。</p></blockquote><p>界面截图：</p><blockquote><p><img src="https://img-blog.csdnimg.cn/20210702213106304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhbmRhbGxDaHU=,size_16,color_FFFFFF,t_70" alt="登录界面——学生登录"><br><img src="https://img-blog.csdnimg.cn/20210702213154354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhbmRhbGxDaHU=,size_16,color_FFFFFF,t_70" alt="登录界面——管理员登录"></p></blockquote><h3 id="2-register-cs"><a href="#2-register-cs" class="headerlink" title="2.register.cs"></a>2.register.cs</h3><p>代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Data.SqlClient;<br><span class="hljs-keyword">using</span> System.Drawing;<br><span class="hljs-keyword">using</span> System.Threading;<br><span class="hljs-keyword">using</span> System.Windows.Forms;<br><br><span class="hljs-keyword">namespace</span> 大学实验材料管理信息系统数据库设计<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">register</span> : <span class="hljs-title">Form</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">register</span>()</span><br>        &#123;<br>            InitializeComponent();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button2_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            textBox1.Text = <span class="hljs-string">&quot;&quot;</span>;<br>            textBox2.Text = <span class="hljs-string">&quot;&quot;</span>;<br>            textBox3.Text = <span class="hljs-string">&quot;&quot;</span>;<br>            textBox8.Text = <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button4_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            textBox4.Text = <span class="hljs-string">&quot;&quot;</span>;<br>            textBox5.Text = <span class="hljs-string">&quot;&quot;</span>;<br>            textBox6.Text = <span class="hljs-string">&quot;&quot;</span>;<br>            textBox7.Text = <span class="hljs-string">&quot;&quot;</span>;<br>            textBox9.Text = <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button1_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (textBox3.Text == textBox8.Text)<br>            &#123;<br>                SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>                String sql = <span class="hljs-string">$&quot;select count(*) from ST where STNO=&#x27;<span class="hljs-subst">&#123;<span class="hljs-keyword">this</span>.textBox2.Text&#125;</span>&#x27;&quot;</span>;<br>                SqlCommand cmd1 = <span class="hljs-keyword">new</span> SqlCommand(sql, conn);<br>                SqlDataAdapter adapter = <span class="hljs-keyword">new</span> SqlDataAdapter();<br>                adapter.SelectCommand = cmd1;<br>                conn.Open();<br>                <span class="hljs-comment">//查询返回结果</span><br>                <span class="hljs-built_in">int</span> result = (<span class="hljs-built_in">int</span>)cmd1.ExecuteScalar();<br>                <span class="hljs-keyword">if</span> (result == <span class="hljs-number">0</span>)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (textBox1.Text.Trim() != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; textBox2.Text.Trim() != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; textBox3.Text.Trim() != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; textBox8.Text.Trim() != <span class="hljs-string">&quot;&quot;</span>)   <span class="hljs-comment">//判断文本框是否全部都是空</span><br>                    &#123;<br>                        <span class="hljs-comment">//插入文本框中输入的数据到数据库中</span><br>                        String sqlStr = <span class="hljs-string">&quot;insert into ST(STNA,STNO,STKE) values (&#x27;&quot;</span> + textBox1.Text.Trim() + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + textBox2.Text.Trim() + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + login.GetSHA256HashFromString(textBox3.Text.ToString().Trim()) + <span class="hljs-string">&quot;&#x27;)&quot;</span>;<br>                        SqlCommand cmd = <span class="hljs-keyword">new</span> SqlCommand(sqlStr, conn);<br>                        <span class="hljs-keyword">try</span><span class="hljs-comment">//异常处理</span><br>                        &#123;<br>                            cmd.ExecuteNonQuery();<br>                            conn.Close();<br>                            <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">int</span>)MessageBox.Show(<span class="hljs-string">&quot;注册成功，是否直接登录？&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>, MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation) == <span class="hljs-number">1</span>)<br>                            &#123;<br>                                login.id = textBox2.Text.Trim();<br>                                <span class="hljs-keyword">this</span>.Hide();<br>                                student form1 = <span class="hljs-keyword">new</span> student();<br>                                form1.Show();<br>                            &#125;<br>                            <span class="hljs-keyword">else</span><br>                            &#123;<br>                                textBox1.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                                textBox2.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                                textBox3.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                                textBox8.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">catch</span> (Exception ex)<br>                        &#123;<br>                            <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                            MessageBox.Show(<span class="hljs-string">&quot;注册失败！失败原因：&quot;</span> + ex.Message.ToString(), <span class="hljs-string">&quot;提示信息&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                        MessageBox.Show(<span class="hljs-string">&quot;存在文本框为空！&quot;</span>);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">int</span>)MessageBox.Show(<span class="hljs-string">&quot;学号已经存在，是否跳转登录？&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>, MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation) == <span class="hljs-number">1</span>)<br>                    &#123;<br>                        login.id = textBox2.Text.Trim();<br>                        <span class="hljs-keyword">this</span>.Hide();<br>                        login form1 = <span class="hljs-keyword">new</span> login();<br>                        form1.Show();<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        textBox2.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                MessageBox.Show(<span class="hljs-string">&quot;两次输入密码不一致！&quot;</span>);<br>                textBox8.Text = <span class="hljs-string">&quot;&quot;</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button3_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (textBox6.Text.Trim() == textBox9.Text.Trim())<br>            &#123;<br>                SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>                String sql = <span class="hljs-string">$&quot;select count(*) from ST where STNO=&#x27;<span class="hljs-subst">&#123;<span class="hljs-keyword">this</span>.textBox2.Text&#125;</span>&#x27;&quot;</span>;<br>                SqlCommand cmd1 = <span class="hljs-keyword">new</span> SqlCommand(sql, conn);<br>                SqlDataAdapter adapter = <span class="hljs-keyword">new</span> SqlDataAdapter();<br>                adapter.SelectCommand = cmd1;<br>                conn.Open();<br>                <span class="hljs-comment">//查询返回结果</span><br>                <span class="hljs-built_in">int</span> result = (<span class="hljs-built_in">int</span>)cmd1.ExecuteScalar();<br>                <span class="hljs-keyword">if</span> (result == <span class="hljs-number">0</span>)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (textBox7.Text.ToString().Trim() == <span class="hljs-string">&quot;adminZJ&quot;</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">if</span> (textBox4.Text.Trim() != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; textBox5.Text.Trim() != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; textBox6.Text.Trim() != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; textBox9.Text.Trim() != <span class="hljs-string">&quot;&quot;</span>)   <span class="hljs-comment">//判断文本框是否全部都是空</span><br>                        &#123;<br>                            <span class="hljs-comment">//插入文本框中输入的数据到数据库中</span><br>                            String sqlStr = <span class="hljs-string">&quot;insert into AD(ADNA,ADNO,ADKE) values (&#x27;&quot;</span> + textBox4.Text.Trim() + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + textBox5.Text.Trim() + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + login.GetSHA256HashFromString(textBox6.Text.ToString().Trim()) + <span class="hljs-string">&quot;&#x27;)&quot;</span>;<br>                            SqlCommand cmd = <span class="hljs-keyword">new</span> SqlCommand(sqlStr, conn);<br>                            <span class="hljs-keyword">try</span><span class="hljs-comment">//异常处理</span><br>                            &#123;<br>                                cmd.ExecuteNonQuery();<br>                                conn.Close();<br>                                <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">int</span>)MessageBox.Show(<span class="hljs-string">&quot;注册成功，是否直接登录？&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>, MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation) == <span class="hljs-number">1</span>)<br>                                &#123;<br>                                    login.id = textBox5.Text.Trim();<br>                                    <span class="hljs-keyword">this</span>.Hide();<br>                                    Admin form1 = <span class="hljs-keyword">new</span> Admin();<br>                                    form1.Show();<br>                                &#125;<br>                                <span class="hljs-keyword">else</span><br>                                &#123;<br>                                    textBox4.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                                    textBox5.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                                    textBox6.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                                    textBox7.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                                    textBox9.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                                &#125;<br>                            &#125;<br>                            <span class="hljs-keyword">catch</span> (Exception ex)<br>                            &#123;<br>                                <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                                MessageBox.Show(<span class="hljs-string">&quot;注册失败！失败原因：&quot;</span> + ex.Message.ToString(), <span class="hljs-string">&quot;提示信息&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">else</span><br>                        &#123;<br>                            <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                            MessageBox.Show(<span class="hljs-string">&quot;存在文本框为空！&quot;</span>);<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                        MessageBox.Show(<span class="hljs-string">&quot;验证码错误！&quot;</span>);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">int</span>)MessageBox.Show(<span class="hljs-string">&quot;工号已经存在，是否跳转登录？&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>, MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation) == <span class="hljs-number">1</span>)<br>                    &#123;<br>                        login.id = textBox5.Text.Trim();<br>                        <span class="hljs-keyword">this</span>.Hide();<br>                        login form1 = <span class="hljs-keyword">new</span> login();<br>                        form1.Show();<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        textBox5.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                    &#125;<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                MessageBox.Show(<span class="hljs-string">&quot;两次输入密码不一致！&quot;</span>);<br>                textBox8.Text = <span class="hljs-string">&quot;&quot;</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button5_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.Hide();<br>            login form1 = <span class="hljs-keyword">new</span> login();<br>            form1.Show();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button6_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.Hide();<br>            login form1 = <span class="hljs-keyword">new</span> login();<br>            form1.Show();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">label10_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register_Load</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><blockquote><p>注册界面分为学生注册和管理员注册。学生注册需要姓名学号密码，管理员注册需要姓名工号密码和注册验证码。<br>学生注册里的学号要独一无二，如果数据库里面有重复学号会提示已经存在学号，会询问是否直接跳转登录。注册里的两次密码要保持一致。<br>管理员注册需要注册验证码”admin”（可以修改）。以防止没有权限的人来注册管理员账户。</p></blockquote><p>界面截图：</p><blockquote><p><img src="https://img-blog.csdnimg.cn/20210702213317197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhbmRhbGxDaHU=,size_16,color_FFFFFF,t_70" alt="注册——学生信息注册"><br><img src="https://img-blog.csdnimg.cn/20210702213425538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhbmRhbGxDaHU=,size_16,color_FFFFFF,t_70" alt="注册——管理员信息注册"></p></blockquote><h3 id="3-student-cs"><a href="#3-student-cs" class="headerlink" title="3.student.cs"></a>3.student.cs</h3><p>代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Data;<br><span class="hljs-keyword">using</span> System.Data.SqlClient;<br><span class="hljs-keyword">using</span> System.Windows.Forms;<br><span class="hljs-keyword">using</span> System.Drawing;<br><span class="hljs-keyword">using</span> System.Threading;<br><br><br><span class="hljs-keyword">namespace</span> 大学实验材料管理信息系统数据库设计<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">student</span> : <span class="hljs-title">Form</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">student</span>()</span><br>        &#123;<br><br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            InitializeComponent();<br>            textBox1.Text = login.id;<br>            textBox2.Text = DateTime.Now.ToString(<span class="hljs-string">&quot;yyyy/MM/dd &quot;</span> + <span class="hljs-string">&quot;ddd&quot;</span>);<br>            SqlCommand com = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;select STNA from ST where STNO=&#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>            conn.Open();<br>            SqlDataReader dr = com.ExecuteReader();<br>            dr.Read();<br>            <span class="hljs-built_in">string</span> hello = <span class="hljs-string">&quot;欢迎您&quot;</span> + dr[<span class="hljs-number">0</span>].ToString().Trim() + <span class="hljs-string">&quot;!&quot;</span>;<br>            label7.Text = hello;<br>            dr.Dispose();<br>            com.Dispose();<br>            DataSet ds1 = <span class="hljs-keyword">new</span> DataSet();<br>            DataSet ds2 = <span class="hljs-keyword">new</span> DataSet();<br>            SqlDataAdapter da = <span class="hljs-keyword">new</span> SqlDataAdapter(<span class="hljs-string">&quot;select distinct MSLNO from MS &quot;</span>, conn);<br>            SqlDataAdapter db = <span class="hljs-keyword">new</span> SqlDataAdapter(<span class="hljs-string">&quot;select distinct MSLNO from BO where STNO = &#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>            da.Fill(ds1);<br>            db.Fill(ds2);<br>            comboBox1.DataSource = ds1.Tables[<span class="hljs-number">0</span>].DefaultView;<br>            comboBox1.DisplayMember = <span class="hljs-string">&quot;MSLNO&quot;</span>;<br>            comboBox3.DataSource = ds2.Tables[<span class="hljs-number">0</span>].DefaultView;<br>            comboBox3.DisplayMember = <span class="hljs-string">&quot;MSLNO&quot;</span>;<br>            <span class="hljs-built_in">int</span> count = comboBox1.Items.Count;<span class="hljs-comment">//获取combobox1中所有行的数量</span><br>            comboBox1.SelectedIndex = <span class="hljs-number">-1</span>;<br>            comboBox3.SelectedIndex = <span class="hljs-number">-1</span>;<br>            SqlDataAdapter sda = <span class="hljs-keyword">new</span> SqlDataAdapter(<span class="hljs-string">&quot;select MSNA AS 材料名,MSNO AS 材料编号,MSLNA AS 实验室名称,MSLNO AS 实验室编号,MSNU AS 材料余量 from MS&quot;</span>, conn);<br>            DataSet ds = <span class="hljs-keyword">new</span> DataSet();<span class="hljs-comment">//实例化DataSet对象</span><br>            sda.Fill(ds);<span class="hljs-comment">//使用SqlDataAdapter对象的Fill方法填充DataSet</span><br>            dataGridView1.DataSource = ds.Tables[<span class="hljs-number">0</span>];<span class="hljs-comment">//设置dataGridView1控件的数据源</span><br>            dataGridView1.RowHeadersVisible = <span class="hljs-literal">true</span>;<span class="hljs-comment">//显示行标题</span><br>            SqlCommand cmd6 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;select count(*) from BO where (&quot;</span> + Convert.ToInt32(login.today) + <span class="hljs-string">&quot;-RTDA)&gt;=&#x27;&quot;</span> + <span class="hljs-number">0</span> + <span class="hljs-string">&quot;&#x27; AND STNO = &#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>            SqlDataAdapter adapter = <span class="hljs-keyword">new</span> SqlDataAdapter();<br>            adapter.SelectCommand = cmd6;<br>            <span class="hljs-built_in">int</span> getw = (<span class="hljs-built_in">int</span>)cmd6.ExecuteScalar();<br>            <span class="hljs-keyword">if</span> (getw &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                MessageBox.Show(<span class="hljs-string">&quot;您有&quot;</span> + getw + <span class="hljs-string">&quot;条已过期未还材料记录，请及时归还材料！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>            &#125;<br>            conn.Close();<br>        &#125;<br><br>        <span class="hljs-built_in">string</span> returnday;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button1_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.Hide();<br>            login form1 = <span class="hljs-keyword">new</span> login();<br>            form1.Show();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button2_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.Close();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button3_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            <span class="hljs-comment">//或者conn = new SqlConnection(&quot;Data Source= . ; Initial Catalog=jxsk; Integrated Security=True &quot;);</span><br>            SqlDataAdapter sda = <span class="hljs-keyword">new</span> SqlDataAdapter(<span class="hljs-string">&quot;select MSNA AS 材料名,MSNO AS 材料编号,MSLNA AS 实验室名称,MSLNO AS 实验室编号,MSNU AS 材料余量 from MS&quot;</span>, conn);<br>            DataSet ds = <span class="hljs-keyword">new</span> DataSet();<span class="hljs-comment">//实例化DataSet对象</span><br>            sda.Fill(ds);<span class="hljs-comment">//使用SqlDataAdapter对象的Fill方法填充DataSet</span><br>            dataGridView1.DataSource = ds.Tables[<span class="hljs-number">0</span>];<span class="hljs-comment">//设置dataGridView1控件的数据源</span><br>            dataGridView1.RowHeadersVisible = <span class="hljs-literal">true</span>;<span class="hljs-comment">//显示行标题</span><br>            conn.Close();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">textBox1_TextChanged</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button4_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            dataGridView2.DataSource = <span class="hljs-literal">null</span>;<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            SqlDataAdapter sda = <span class="hljs-keyword">new</span> SqlDataAdapter(<span class="hljs-string">&quot;select MSNO AS 材料编号,MSLNO AS 材料所属实验室,BONU AS 材料数量,BODA AS 借用日期,RTDA AS 预计归还日期 from BO WHERE STNO =&#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>            DataSet ds = <span class="hljs-keyword">new</span> DataSet();<span class="hljs-comment">//实例化DataSet对象</span><br>            sda.Fill(ds);<span class="hljs-comment">//使用SqlDataAdapter对象的Fill方法填充DataSet</span><br>            dataGridView2.DataSource = ds.Tables[<span class="hljs-number">0</span>];<span class="hljs-comment">//设置dataGridView1控件的数据源</span><br>            dataGridView2.RowHeadersVisible = <span class="hljs-literal">true</span>;<span class="hljs-comment">//显示行标题</span><br>            <span class="hljs-built_in">int</span> n = dataGridView2.Rows.Count;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (Convert.ToInt32(dataGridView2.Rows[i].Cells[<span class="hljs-number">4</span>].Value) &gt; Convert.ToInt32(login.today))<br>                &#123;<br>                    dataGridView2.Rows[i].Cells[<span class="hljs-number">0</span>].Style.BackColor = System.Drawing.Color.LightGreen;<br>                    dataGridView2.Rows[i].Cells[<span class="hljs-number">1</span>].Style.BackColor = System.Drawing.Color.LightGreen;<br>                    dataGridView2.Rows[i].Cells[<span class="hljs-number">2</span>].Style.BackColor = System.Drawing.Color.LightGreen;<br>                    dataGridView2.Rows[i].Cells[<span class="hljs-number">3</span>].Style.BackColor = System.Drawing.Color.LightGreen;<br>                    dataGridView2.Rows[i].Cells[<span class="hljs-number">4</span>].Style.BackColor = System.Drawing.Color.LightGreen;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Convert.ToInt32(dataGridView2.Rows[i].Cells[<span class="hljs-number">4</span>].Value) == Convert.ToInt32(login.today))<br>                &#123;<br>                    dataGridView2.Rows[i].Cells[<span class="hljs-number">0</span>].Style.BackColor = System.Drawing.Color.Yellow;<br>                    dataGridView2.Rows[i].Cells[<span class="hljs-number">1</span>].Style.BackColor = System.Drawing.Color.Yellow;<br>                    dataGridView2.Rows[i].Cells[<span class="hljs-number">2</span>].Style.BackColor = System.Drawing.Color.Yellow;<br>                    dataGridView2.Rows[i].Cells[<span class="hljs-number">3</span>].Style.BackColor = System.Drawing.Color.Yellow;<br>                    dataGridView2.Rows[i].Cells[<span class="hljs-number">4</span>].Style.BackColor = System.Drawing.Color.Yellow;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    dataGridView2.Rows[i].Cells[<span class="hljs-number">0</span>].Style.BackColor = System.Drawing.Color.Red;<br>                    dataGridView2.Rows[i].Cells[<span class="hljs-number">1</span>].Style.BackColor = System.Drawing.Color.Red;<br>                    dataGridView2.Rows[i].Cells[<span class="hljs-number">2</span>].Style.BackColor = System.Drawing.Color.Red;<br>                    dataGridView2.Rows[i].Cells[<span class="hljs-number">3</span>].Style.BackColor = System.Drawing.Color.Red;<br>                    dataGridView2.Rows[i].Cells[<span class="hljs-number">4</span>].Style.BackColor = System.Drawing.Color.Red;<br>                &#125;<br>            &#125;<br>            conn.Close();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">tabPage3_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">student_Load</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button5_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            dataGridView2.DataSource = <span class="hljs-literal">null</span>;<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            SqlDataAdapter sday = <span class="hljs-keyword">new</span> SqlDataAdapter(<span class="hljs-string">&quot;select MSNO AS 材料编号,MSLNO AS 材料所属实验室,BONU AS 材料数量,BODA AS 借用日期,RTDA AS 归还日期 from RC WHERE STNO =&#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>            DataSet dsy = <span class="hljs-keyword">new</span> DataSet();<span class="hljs-comment">//实例化DataSet对象</span><br>            sday.Fill(dsy);<span class="hljs-comment">//使用SqlDataAdapter对象的Fill方法填充DataSet            </span><br>            dataGridView2.DataSource = dsy.Tables[<span class="hljs-number">0</span>];<span class="hljs-comment">//设置dataGridView1控件的数据源</span><br>            dataGridView2.RowHeadersVisible = <span class="hljs-literal">true</span>;<span class="hljs-comment">//显示行标题</span><br>            conn.Close();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button7_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            textBox3.Text = <span class="hljs-string">&quot;&quot;</span>;<br>            textBox4.Text = <span class="hljs-string">&quot;&quot;</span>;<br>            textBox5.Text = <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button6_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            <span class="hljs-keyword">if</span> (textBox3.Text.Trim() != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; textBox4.Text.Trim() != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; textBox5.Text.Trim() != <span class="hljs-string">&quot;&quot;</span>)<br>            &#123;<br>                SqlCommand cmd3 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;select count(*) from ST where STNO = &#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                conn.Open();<br>                <span class="hljs-built_in">int</span> b = (<span class="hljs-built_in">int</span>)cmd3.ExecuteScalar();<br>                <span class="hljs-keyword">if</span> (b == <span class="hljs-number">1</span>)<br>                &#123;<br>                    SqlCommand cmd4 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;select STKE from ST where STNO = &#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                    <span class="hljs-built_in">string</span> c = cmd4.ExecuteScalar().ToString().Trim();<br>                    <span class="hljs-built_in">string</span> oldpwd = login.GetSHA256HashFromString(textBox3.Text.ToString().Trim());<br>                    <span class="hljs-built_in">string</span> newpwd = login.GetSHA256HashFromString(textBox4.Text.ToString().Trim());<br>                    <span class="hljs-built_in">string</span> dnewpwd = login.GetSHA256HashFromString(textBox5.Text.ToString().Trim());<br><br>                    <span class="hljs-keyword">if</span> (newpwd == dnewpwd)<br>                    &#123;<br>                        <span class="hljs-keyword">if</span> (c == oldpwd)<br>                        &#123;<br>                            <span class="hljs-keyword">if</span> (oldpwd != newpwd)<br>                            &#123;<br>                                SqlCommand cmd5 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;update ST set STKE = &#x27;&quot;</span> + newpwd + <span class="hljs-string">&quot;&#x27;where STNO = &#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                                <span class="hljs-built_in">int</span> k = (<span class="hljs-built_in">int</span>)cmd5.ExecuteNonQuery();<br>                                <span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">0</span>)<br>                                &#123;<br>                                    MessageBox.Show(<span class="hljs-string">&quot;密码修改成功，请重新登录！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                                    <span class="hljs-keyword">this</span>.Hide();<br>                                    login form1 = <span class="hljs-keyword">new</span> login();<br>                                    form1.Show();<br>                                &#125;<br>                                <span class="hljs-keyword">else</span><br>                                &#123;<br>                                    <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                                    MessageBox.Show(<span class="hljs-string">&quot;密码修改失败！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                                    textBox3.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                                    textBox4.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                                    textBox5.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                                &#125;<br>                            &#125;<br>                            <span class="hljs-keyword">else</span><br>                            &#123;<br>                                <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                                MessageBox.Show(<span class="hljs-string">&quot;新旧密码不能一样！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                                textBox4.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                                textBox5.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">else</span><br>                        &#123;<br>                            <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                            MessageBox.Show(<span class="hljs-string">&quot;原密码填写错误！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                            textBox3.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                            textBox4.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                            textBox5.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                        MessageBox.Show(<span class="hljs-string">&quot;两次新密码不一致！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                        textBox4.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                        textBox5.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                    MessageBox.Show(<span class="hljs-string">&quot;用户名不存在请重新登录！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                    <span class="hljs-keyword">this</span>.Hide();<br>                    login form1 = <span class="hljs-keyword">new</span> login();<br>                    form1.Show();<br>                &#125;<br>                conn.Close();<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                MessageBox.Show(<span class="hljs-string">&quot;密码不能为空！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">textBox4_TextChanged</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">groupBox1_Enter</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">label10_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dateTimePicker1_ValueChanged</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            returnday = dateTimePicker1.Value.ToString(<span class="hljs-string">&quot;yyyyMMdd&quot;</span>);<br>            textBox7.Text = dateTimePicker1.Value.ToString(<span class="hljs-string">&quot;D&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button9_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            comboBox2.DataSource = <span class="hljs-literal">null</span>;<br>            comboBox1.SelectedIndex = <span class="hljs-number">-1</span>;<br>            comboBox2.SelectedIndex = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">this</span>.numericUpDown1.DecimalPlaces = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">this</span>.numericUpDown1.Value = Decimal.Round(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>            textBox7.Text = <span class="hljs-string">&quot;&quot;</span>;<br>            returnday = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">this</span>.dateTimePicker1.Format = DateTimePickerFormat.Custom;<br>            <span class="hljs-keyword">this</span>.dateTimePicker1.CustomFormat = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">this</span>.dateTimePicker1.Checked = <span class="hljs-literal">false</span>;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button8_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            <span class="hljs-keyword">if</span> (comboBox1.Text.Trim() == <span class="hljs-string">&quot;&quot;</span>)<br>            &#123;<br>                <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                MessageBox.Show(<span class="hljs-string">&quot;实验室编号，材料编号为空！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (comboBox2.Text.Trim() == <span class="hljs-string">&quot;&quot;</span>)<br>                &#123;<br>                    <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                    MessageBox.Show(<span class="hljs-string">&quot;材料编号为空！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-built_in">string</span> labid = comboBox1.Text.Trim();<span class="hljs-comment">//实验室编号</span><br>                    <span class="hljs-built_in">string</span> material = comboBox2.Text.Trim();<span class="hljs-comment">//材料编号</span><br>                    <span class="hljs-built_in">int</span> num = Convert.ToInt32(numericUpDown1.Value.ToString().Trim());<span class="hljs-comment">//材料数量</span><br>                    returnday = dateTimePicker1.Value.ToString(<span class="hljs-string">&quot;yyyyMMdd&quot;</span>);<span class="hljs-comment">//returnday返还日期</span><br>                    <span class="hljs-comment">//获取材料数量</span><br>                    SqlCommand cmd4 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;select MSNU from MS where MSNO = &#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27; AND MSLNO = &#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                    SqlCommand cmd5 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;select MSDP from MS where MSNO = &#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27; AND MSLNO = &#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                    conn.Open();<br>                    <span class="hljs-built_in">int</span> c = Convert.ToInt32(cmd4.ExecuteScalar().ToString());<br>                    <span class="hljs-built_in">int</span> d = Convert.ToInt32(cmd5.ExecuteScalar().ToString());<br>                    conn.Close();<br>                    <span class="hljs-keyword">if</span> (d == <span class="hljs-number">1</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">if</span> (textBox7.Text.Trim() == <span class="hljs-string">&quot;&quot;</span>)<br>                        &#123;<br>                            <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                            MessageBox.Show(<span class="hljs-string">&quot;该材料需要归还，请填写归还日期！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                        &#125;<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Convert.ToInt32(login.today.Trim()) &gt; Convert.ToInt32(returnday))<br>                        &#123;<br>                            <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                            MessageBox.Show(<span class="hljs-string">&quot;归还日期不能早于今天！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                            textBox7.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                            returnday = <span class="hljs-string">&quot;&quot;</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">else</span><br>                        &#123;<br>                            <span class="hljs-keyword">if</span> (c &gt;= num)<br>                            &#123;<br>                                SqlCommand cmd = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;insert into BO(STNO,MSLNO,MSNO,BONU,BODA,RTDA,CODE) values (&#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + num + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + login.today + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + returnday + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + login.GenerateRandom(<span class="hljs-number">10</span>) + <span class="hljs-string">&quot;&#x27;)&quot;</span>, conn);<br>                                SqlCommand cmd1 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;insert into RC(STNO,MSLNO,MSNO,BONU,BODA) values (&#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + num + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + login.today + <span class="hljs-string">&quot;&#x27;)&quot;</span>, conn);<br>                                <span class="hljs-keyword">try</span><span class="hljs-comment">//异常处理</span><br>                                &#123;<br>                                    conn.Open();<br>                                    cmd.ExecuteNonQuery();<br>                                    cmd1.ExecuteNonQuery();<br>                                    <span class="hljs-built_in">int</span> res = c - num;<br>                                    <span class="hljs-keyword">if</span> (res == <span class="hljs-number">0</span>)<br>                                    &#123;<br>                                        SqlCommand cmd2 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;delete from MS where MSNO = &#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27; AND MSLNO = &#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                                        <span class="hljs-keyword">try</span><br>                                        &#123;<br>                                            cmd2.ExecuteNonQuery();<br>                                            MessageBox.Show(<span class="hljs-string">&quot;该材料需要归还，借用成功！&quot;</span>);<br>                                        &#125;<br>                                        <span class="hljs-keyword">catch</span> (Exception ex)<br>                                        &#123;<br>                                            <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                                            MessageBox.Show(<span class="hljs-string">&quot;删除原数据失败！失败原因：&quot;</span> + ex.Message.ToString(), <span class="hljs-string">&quot;提示信息&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);<br>                                        &#125;<br>                                    &#125;<br>                                    <span class="hljs-keyword">else</span><br>                                    &#123;<br>                                        SqlCommand cmd2 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;update MS set MSNU = &#x27;&quot;</span> + res + <span class="hljs-string">&quot;&#x27;where MSNO = &#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27; AND MSLNO = &#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                                        <span class="hljs-keyword">try</span><br>                                        &#123;<br>                                            cmd2.ExecuteNonQuery();<br>                                            MessageBox.Show(<span class="hljs-string">&quot;该材料需要归还，借用成功！&quot;</span>);<br>                                            <span class="hljs-keyword">this</span>.Hide();<br>                                            student form1 = <span class="hljs-keyword">new</span> student();<br>                                            form1.Show();<br>                                        &#125;<br>                                        <span class="hljs-keyword">catch</span> (Exception ex)<br>                                        &#123;<br>                                            <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                                            MessageBox.Show(<span class="hljs-string">&quot;删除原数据失败！失败原因：&quot;</span> + ex.Message.ToString(), <span class="hljs-string">&quot;提示信息&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);<br>                                        &#125;<br>                                    &#125;<br>                                    conn.Close();<br>                                &#125;<br>                                <span class="hljs-keyword">catch</span> (Exception ex)<br>                                &#123;<br>                                    <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                                    MessageBox.Show(<span class="hljs-string">&quot;借用失败！失败原因：&quot;</span> + ex.Message.ToString(), <span class="hljs-string">&quot;提示信息&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);<br>                                &#125;<br>                            &#125;<br>                            <span class="hljs-keyword">else</span><br>                            &#123;<br>                                MessageBox.Show(<span class="hljs-string">&quot;材料数量最多为&quot;</span> + c + <span class="hljs-string">&quot;，请重新填写！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                                numericUpDown1.Text = c.ToString();<br>                            &#125;<br>                        &#125;<br><br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (d == <span class="hljs-number">0</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">if</span> (c &gt;= num)<br>                        &#123;<br>                            SqlCommand cmd1 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;insert into RC(STNO,MSLNO,MSNO,BONU,BODA,RTDA) values (&#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + num + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + login.today + <span class="hljs-string">&quot;&#x27;,&#x27;无需归还&#x27;)&quot;</span>, conn);<br>                            <span class="hljs-keyword">try</span><span class="hljs-comment">//异常处理</span><br>                            &#123;<br>                                conn.Open();<br>                                cmd1.ExecuteNonQuery();<br>                                <span class="hljs-built_in">int</span> res = c - num;<br>                                <span class="hljs-keyword">if</span> (res == <span class="hljs-number">0</span>)<br>                                &#123;<br>                                    SqlCommand cmd2 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;delete from MS where MSNO = &#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27; AND MSLNO = &#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                                    <span class="hljs-keyword">try</span><br>                                    &#123;<br>                                        cmd2.ExecuteNonQuery();<br>                                        MessageBox.Show(<span class="hljs-string">&quot;该材料不需要归还，借用成功！&quot;</span>);<br>                                    &#125;<br>                                    <span class="hljs-keyword">catch</span> (Exception ex)<br>                                    &#123;<br>                                        <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                                        MessageBox.Show(<span class="hljs-string">&quot;删除原数据失败！失败原因：&quot;</span> + ex.Message.ToString(), <span class="hljs-string">&quot;提示信息&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);<br>                                    &#125;<br>                                &#125;<br>                                <span class="hljs-keyword">else</span><br>                                &#123;<br>                                    SqlCommand cmd2 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;update MS set MSNU = &#x27;&quot;</span> + res + <span class="hljs-string">&quot;&#x27;where MSNO = &#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27; AND MSLNO = &#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                                    <span class="hljs-keyword">try</span><br>                                    &#123;<br>                                        cmd2.ExecuteNonQuery();<br>                                        MessageBox.Show(<span class="hljs-string">&quot;该材料不需要归还，借用成功！&quot;</span>);<br>                                        <span class="hljs-keyword">this</span>.Hide();<br>                                        student form1 = <span class="hljs-keyword">new</span> student();<br>                                        form1.Show();<br>                                    &#125;<br>                                    <span class="hljs-keyword">catch</span> (Exception ex)<br>                                    &#123;<br>                                        <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                                        MessageBox.Show(<span class="hljs-string">&quot;删除原数据失败！失败原因：&quot;</span> + ex.Message.ToString(), <span class="hljs-string">&quot;提示信息&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);<br>                                    &#125;<br>                                &#125;<br>                                conn.Close();<br>                                conn.Close();<br>                            &#125;<br>                            <span class="hljs-keyword">catch</span> (Exception ex)<br>                            &#123;<br>                                MessageBox.Show(<span class="hljs-string">&quot;借用失败！失败原因：&quot;</span> + ex.Message.ToString(), <span class="hljs-string">&quot;提示信息&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">else</span><br>                        &#123;<br>                            <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                            MessageBox.Show(<span class="hljs-string">&quot;材料数量最多为&quot;</span> + c + <span class="hljs-string">&quot;，请重新填写！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                            numericUpDown1.Text = c.ToString();<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                        MessageBox.Show(<span class="hljs-string">&quot;数据库信息错误，请联系管理员！&quot;</span>);<br>                    &#125;<br>                &#125;<br><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">tabPage5_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">comboBox1_SelectedIndexChanged</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            comboBox2.DataSource = <span class="hljs-literal">null</span>;<br>            comboBox2.SelectedIndex = <span class="hljs-number">-1</span>;<br>            comboBox2.Items.Clear();<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            conn.Open();<br>            DataSet ds1 = <span class="hljs-keyword">new</span> DataSet();<br>            SqlDataAdapter da = <span class="hljs-keyword">new</span> SqlDataAdapter(<span class="hljs-string">&quot;select distinct MSNO from MS WHERE MSLNO = &#x27;&quot;</span> + comboBox1.Text + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>            da.Fill(ds1);<br>            comboBox2.DataSource = ds1.Tables[<span class="hljs-number">0</span>].DefaultView;<br>            comboBox2.DisplayMember = <span class="hljs-string">&quot;MSNO&quot;</span>;<br>            conn.Close();<br>            comboBox2.SelectedIndex = <span class="hljs-number">-1</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">numericUpDown1_ValueChanged</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button10_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            <span class="hljs-keyword">if</span> (comboBox2.Text.Trim() == <span class="hljs-string">&quot;&quot;</span>)<br>            &#123;<br>                MessageBox.Show(<span class="hljs-string">&quot;请选择材料！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">string</span> labid = comboBox1.Text.Trim();<span class="hljs-comment">//实验室编号</span><br>                <span class="hljs-built_in">string</span> material = comboBox2.Text.Trim();<span class="hljs-comment">//材料编号</span><br>                SqlCommand cmd5 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;select MSDP from MS where MSNO = &#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27; AND MSLNO = &#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn); conn.Open();<br>                <span class="hljs-built_in">int</span> d = Convert.ToInt32(cmd5.ExecuteScalar().ToString());<br>                conn.Close();<br>                <span class="hljs-keyword">if</span> (d == <span class="hljs-number">1</span>)<br>                &#123;<br>                    MessageBox.Show(<span class="hljs-string">&quot;材料&quot;</span> + comboBox2.Text.Trim() + <span class="hljs-string">&quot;需要归还！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    MessageBox.Show(<span class="hljs-string">&quot;材料&quot;</span> + comboBox2.Text.Trim() + <span class="hljs-string">&quot;不需要归还！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">comboBox2_SelectedIndexChanged</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">comboBox3_SelectedIndexChanged</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            comboBox4.DataSource = <span class="hljs-literal">null</span>;<br>            comboBox4.SelectedIndex = <span class="hljs-number">-1</span>;<br>            comboBox4.Items.Clear();<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            conn.Open();<br>            DataSet ds1 = <span class="hljs-keyword">new</span> DataSet();<br>            SqlDataAdapter da = <span class="hljs-keyword">new</span> SqlDataAdapter(<span class="hljs-string">&quot;select distinct MSNO from BO WHERE MSLNO = &#x27;&quot;</span> + comboBox3.Text + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>            da.Fill(ds1);<br>            comboBox4.DataSource = ds1.Tables[<span class="hljs-number">0</span>].DefaultView;<br>            comboBox4.DisplayMember = <span class="hljs-string">&quot;MSNO&quot;</span>;<br>            conn.Close();<br>            comboBox4.SelectedIndex = <span class="hljs-number">-1</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button11_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            <span class="hljs-keyword">if</span> (comboBox3.Text.Trim() == <span class="hljs-string">&quot;&quot;</span>)<br>            &#123;<br>                <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                MessageBox.Show(<span class="hljs-string">&quot;实验室编号为空！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (comboBox4.Text.Trim() == <span class="hljs-string">&quot;&quot;</span>)<br>                &#123;<br>                    <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                    MessageBox.Show(<span class="hljs-string">&quot;材料编号为空！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-built_in">string</span> labid = comboBox3.Text.Trim();<span class="hljs-comment">//实验室编号</span><br>                    <span class="hljs-built_in">string</span> material = comboBox4.Text.Trim();<span class="hljs-comment">//材料编号</span><br>                    <span class="hljs-built_in">int</span> num = Convert.ToInt32(numericUpDown2.Value.ToString().Trim());<span class="hljs-comment">//材料数量</span><br><br>                    <span class="hljs-comment">//获取材料数量</span><br>                    SqlCommand cmd4 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;select BONU from BO where MSNO = &#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27; AND MSLNO = &#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27; AND STNO = &#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                    SqlCommand cmd5 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;select BODA from BO where MSNO = &#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27; AND MSLNO = &#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27; AND STNO = &#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                    SqlCommand cmd6 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;select MSNU from MS where MSNO = &#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27; AND MSLNO = &#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                    SqlCommand cmd9 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;select count(*) from MS where MSNO = &#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27; AND MSLNO = &#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                    SqlCommand cmd11 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;select CODE from BO where MSNO = &#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27; AND MSLNO = &#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27; AND STNO = &#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                    conn.Open();<br>                    <span class="hljs-built_in">int</span> orinum;<br>                    <span class="hljs-built_in">int</span> b = (<span class="hljs-built_in">int</span>)cmd9.ExecuteScalar();<br>                    <span class="hljs-built_in">string</span> code = cmd11.ExecuteScalar().ToString();<br>                    SqlDataReader dr = cmd5.ExecuteReader();<br>                    dr.Read();<br>                    <span class="hljs-built_in">string</span> borrday = dr[<span class="hljs-number">0</span>].ToString().Trim();<br>                    dr.Dispose();<br>                    cmd5.Dispose();<br>                    <span class="hljs-built_in">int</span> c = (<span class="hljs-built_in">int</span>)cmd4.ExecuteScalar();<br>                    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>)<br>                    &#123;<br>                        orinum = <span class="hljs-number">0</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        SqlDataReader dr1 = cmd6.ExecuteReader();<br>                        dr1.Read();<br>                        orinum = Convert.ToInt32(dr1[<span class="hljs-number">0</span>].ToString());<br>                        dr1.Dispose();<br>                    &#125;<br>                    conn.Close();<br>                    <span class="hljs-keyword">if</span> (orinum &gt; <span class="hljs-number">0</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">if</span> (c &gt;= num)<br>                        &#123;<br>                            conn.Open();<br>                            <span class="hljs-built_in">int</span> res = c - num;<br>                            <span class="hljs-keyword">if</span> (res == <span class="hljs-number">0</span>)<br>                            &#123;<br>                                <span class="hljs-built_in">int</span> x = orinum + num;<br>                                SqlCommand cmd2 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;delete from BO where MSNO = &#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27; AND MSLNO = &#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27; AND BONU = &#x27;&quot;</span> + num + <span class="hljs-string">&quot;&#x27; AND STNO = &#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;AND CODE = &#x27;&quot;</span> + code + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                                SqlCommand cmd3 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;update RC set RTDA =&#x27;&quot;</span> + login.today + <span class="hljs-string">&quot;&#x27;where MSNO = &#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27; AND MSLNO = &#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27; AND BONU = &#x27;&quot;</span> + num + <span class="hljs-string">&quot;&#x27; AND STNO = &#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                                SqlCommand cmd7 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;update MS set MSNU = &#x27;&quot;</span> + x + <span class="hljs-string">&quot;&#x27;where MSNO = &#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27; AND MSLNO = &#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                                <span class="hljs-keyword">try</span><br>                                &#123;<br>                                    cmd2.ExecuteNonQuery();<br>                                    cmd3.ExecuteNonQuery();<br>                                    cmd7.ExecuteNonQuery();<br>                                    MessageBox.Show(<span class="hljs-string">&quot;材料归还成功！&quot;</span>);<br>                                &#125;<br>                                <span class="hljs-keyword">catch</span> (Exception ex)<br>                                &#123;<br>                                    <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                                    MessageBox.Show(<span class="hljs-string">&quot;操作失败！失败原因：&quot;</span> + ex.Message.ToString(), <span class="hljs-string">&quot;提示信息&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);<br>                                &#125;<br>                            &#125;<br>                            <span class="hljs-keyword">else</span><br>                            &#123;<br>                                <span class="hljs-built_in">int</span> x = orinum + num;<br>                                SqlCommand cmd2 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;update BO set BONU = &#x27;&quot;</span> + res + <span class="hljs-string">&quot;&#x27;where STNO = &#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27; AND MSLNO = &#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27; AND BODA = &#x27;&quot;</span> + borrday + <span class="hljs-string">&quot;&#x27; AND STNO = &#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;AND CODE = &#x27;&quot;</span> + code + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                                SqlCommand cmd7 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;update MS set MSNU = &#x27;&quot;</span> + x + <span class="hljs-string">&quot;&#x27;where MSNO = &#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27; AND MSLNO = &#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                                <span class="hljs-keyword">try</span><br>                                &#123;<br>                                    cmd2.ExecuteNonQuery();<br>                                    cmd7.ExecuteNonQuery();<br>                                    MessageBox.Show(<span class="hljs-string">&quot;部分材料归还成功！&quot;</span>);<br>                                    <span class="hljs-keyword">this</span>.Hide();<br>                                    student form1 = <span class="hljs-keyword">new</span> student();<br>                                    form1.Show();<br>                                &#125;<br>                                <span class="hljs-keyword">catch</span> (Exception ex)<br>                                &#123;<br>                                    <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                                    MessageBox.Show(<span class="hljs-string">&quot;操作失败！失败原因：&quot;</span> + ex.Message.ToString(), <span class="hljs-string">&quot;提示信息&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);<br>                                &#125;<br>                            &#125;<br>                            conn.Close();<br>                        &#125;<br>                        <span class="hljs-keyword">else</span><br>                        &#123;<br>                            <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                            MessageBox.Show(<span class="hljs-string">&quot;材料数量最多为&quot;</span> + c + <span class="hljs-string">&quot;，请重新填写！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                            numericUpDown2.Text = c.ToString();<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        <span class="hljs-keyword">if</span> (c &gt;= num)<br>                        &#123;<br>                            conn.Open();<br>                            <span class="hljs-built_in">int</span> res = c - num;<br>                            <span class="hljs-keyword">if</span> (res == <span class="hljs-number">0</span>)<br>                            &#123;<br>                                <span class="hljs-built_in">int</span> x = orinum + num;<br>                                SqlCommand cmd2 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;delete from BO where MSNO = &#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27; AND MSLNO = &#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27; AND BONU = &#x27;&quot;</span> + num + <span class="hljs-string">&quot;&#x27; AND STNO = &#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                                SqlCommand cmd3 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;update RC set RTDA =&#x27;&quot;</span> + login.today + <span class="hljs-string">&quot;&#x27;where MSNO = &#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27; AND MSLNO = &#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27; AND BONU = &#x27;&quot;</span> + num + <span class="hljs-string">&quot;&#x27; AND STNO = &#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                                SqlCommand cmd7 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;insert into MS(MSNO,MSNU,MSLNO,MSDP) values (&#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + x + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + <span class="hljs-number">1</span> + <span class="hljs-string">&quot;&#x27;)&quot;</span>, conn);<br>                                <span class="hljs-keyword">try</span><br>                                &#123;<br>                                    cmd2.ExecuteNonQuery();<br>                                    cmd3.ExecuteNonQuery();<br>                                    cmd7.ExecuteNonQuery();<br>                                    MessageBox.Show(<span class="hljs-string">&quot;材料归还成功！&quot;</span>);<br>                                &#125;<br>                                <span class="hljs-keyword">catch</span> (Exception ex)<br>                                &#123;<br>                                    <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                                    MessageBox.Show(<span class="hljs-string">&quot;操作失败！失败原因：&quot;</span> + ex.Message.ToString(), <span class="hljs-string">&quot;提示信息&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);<br>                                &#125;<br>                            &#125;<br>                            <span class="hljs-keyword">else</span><br>                            &#123;<br>                                <span class="hljs-built_in">int</span> x = orinum + num;<br>                                SqlCommand cmd2 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;update BO set BONU = &#x27;&quot;</span> + res + <span class="hljs-string">&quot;&#x27;where STNO = &#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27; AND MSLNO = &#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27; AND BONU = &#x27;&quot;</span> + c + <span class="hljs-string">&quot;&#x27; AND STNO = &#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                                SqlCommand cmd3 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;insert into RC(STNO,MSLNO,MSNO,BONU,BODA,RTDA) values (&#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + num + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + borrday + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + login.today + <span class="hljs-string">&quot;&#x27;)&quot;</span>, conn);<br>                                SqlCommand cmd7 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;insert into MS(MSNO,MSNU,MSLNO,MSDP) values (&#x27;&quot;</span> + material + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + x + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + labid + <span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span> + <span class="hljs-number">1</span> + <span class="hljs-string">&quot;&#x27;)&quot;</span>, conn);<br>                                <span class="hljs-keyword">try</span><br>                                &#123;<br>                                    cmd2.ExecuteNonQuery();<br>                                    cmd3.ExecuteNonQuery();<br>                                    cmd7.ExecuteNonQuery();<br>                                    MessageBox.Show(<span class="hljs-string">&quot;部分材料归还成功！&quot;</span>);<br>                                    <span class="hljs-keyword">this</span>.Hide();<br>                                    student form1 = <span class="hljs-keyword">new</span> student();<br>                                    form1.Show();<br>                                &#125;<br>                                <span class="hljs-keyword">catch</span> (Exception ex)<br>                                &#123;<br>                                    <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                                    MessageBox.Show(<span class="hljs-string">&quot;操作失败！失败原因：&quot;</span> + ex.Message.ToString(), <span class="hljs-string">&quot;提示信息&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);<br>                                &#125;<br>                            &#125;<br>                            conn.Close();<br>                        &#125;<br>                        <span class="hljs-keyword">else</span><br>                        &#123;<br>                            MessageBox.Show(<span class="hljs-string">&quot;材料数量最多为&quot;</span> + c + <span class="hljs-string">&quot;，请重新填写！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                            numericUpDown2.Text = c.ToString();<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button12_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            comboBox4.DataSource = <span class="hljs-literal">null</span>;<br>            comboBox3.SelectedIndex = <span class="hljs-number">-1</span>;<br>            comboBox4.SelectedIndex = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">this</span>.numericUpDown2.DecimalPlaces = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">this</span>.numericUpDown2.Value = Decimal.Round(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>            returnday = <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button13_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            SqlCommand cmd6 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;select count(*) from BO where (&quot;</span> + Convert.ToInt32(login.today) + <span class="hljs-string">&quot;-RTDA)&gt;=&#x27;&quot;</span> + <span class="hljs-number">0</span> + <span class="hljs-string">&quot;&#x27; AND STNO = &#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>            SqlDataAdapter adapter = <span class="hljs-keyword">new</span> SqlDataAdapter();<br>            adapter.SelectCommand = cmd6;<br>            <span class="hljs-built_in">int</span> getw = (<span class="hljs-built_in">int</span>)cmd6.ExecuteScalar();<br>            <span class="hljs-keyword">if</span> (MessageBox.Show(<span class="hljs-string">&quot;确认删除？&quot;</span>, <span class="hljs-string">&quot;提示信息&quot;</span>, MessageBoxButtons.YesNo) == DialogResult.Yes)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (MessageBox.Show(<span class="hljs-string">&quot;最后一次确认删除？&quot;</span>, <span class="hljs-string">&quot;提示信息&quot;</span>, MessageBoxButtons.YesNo) == DialogResult.Yes)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (getw &gt; <span class="hljs-number">0</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                        MessageBox.Show(<span class="hljs-string">&quot;您有&quot;</span> + getw + <span class="hljs-string">&quot;条已过期未还材料记录，请及时归还材料后进行注销操作！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        SqlCommand cmd1 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;delete from ST where STNO = &#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                        SqlCommand cmd2 = <span class="hljs-keyword">new</span> SqlCommand(<span class="hljs-string">&quot;delete from BO where STNO = &#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                        cmd1.ExecuteNonQuery();<br>                        cmd2.ExecuteNonQuery();<br>                        MessageBox.Show(<span class="hljs-string">&quot;注销账户成功&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                        <span class="hljs-keyword">this</span>.Hide();<br>                        login form1 = <span class="hljs-keyword">new</span> login();<br>                        form1.Show();<br>                    &#125;<br>                &#125;<br>            &#125;<br>            conn.Close();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">label15_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br><br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>学生界面分为材料信息查询、借用信息查询、借用历史查询、借用、归还、修改个人密码。学生界面在加载的时候获取当前用户ID，用户姓名，系统时间，同时查询借用历史表中有多少未归还已过期材料记录。如果查询数量大于0，显示提示框提示需要归还。<br>材料信息查询只能让用户刷新读取数据，不允许用户修改删除数据。借用历史，借用中数据只允许查看，刷新；借用中数据被查询出来后，会标记背景颜色。如果材料当天到期，标黄，如果已经过期，表红，借用中且未到归还日期就标绿。<br>借用和归还操作分别需要两个combobox，第一个combobox的数据源在加载窗口的时候就已经设置好了，第二个combobox的数据源由第一个combobox里面的选项为关键字筛选出。借用、归还的数量都需要选择数量，数量不能超过源里的最大数量。如果超过就弹出提示框，并且自动将数据调到最大。<br>修改个人信息只允许修改密码，修改密码前要校对老密码是否正确和两次输入的新密码是否一致。</p></blockquote><p>界面截图：</p><blockquote><p><img src="https://img-blog.csdnimg.cn/2021070221360132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhbmRhbGxDaHU=,size_16,color_FFFFFF,t_70" alt="学生——材料余量"><br><img src="https://img-blog.csdnimg.cn/20210702213639697.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhbmRhbGxDaHU=,size_16,color_FFFFFF,t_70" alt="学生——借用查询"><br><img src="https://img-blog.csdnimg.cn/20210702213714397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhbmRhbGxDaHU=,size_16,color_FFFFFF,t_70" alt="学生——操作——借用"><br><img src="https://img-blog.csdnimg.cn/20210702213742980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhbmRhbGxDaHU=,size_16,color_FFFFFF,t_70" alt="学生——操作——归还"><br><img src="https://img-blog.csdnimg.cn/2021070221380825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhbmRhbGxDaHU=,size_16,color_FFFFFF,t_70" alt="学生——用户信息设置"></p></blockquote><h3 id="4-Admin-cs"><a href="#4-Admin-cs" class="headerlink" title="4.Admin.cs"></a>4.Admin.cs</h3><p>代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Data;<br><span class="hljs-keyword">using</span> System.Data.SqlClient;<br><span class="hljs-keyword">using</span> System.Drawing;<br><span class="hljs-keyword">using</span> System.Threading;<br><span class="hljs-keyword">using</span> System.Windows.Forms;<br><br><span class="hljs-keyword">namespace</span> 大学实验材料管理信息系统数据库设计<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Admin</span> : <span class="hljs-title">Form</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Admin</span>()</span><br>        &#123;<br>            InitializeComponent();<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            textBox1.Text = login.id;<br>            textBox2.Text = DateTime.Now.ToString(<span class="hljs-string">&quot;yyyy/MM/dd &quot;</span> + <span class="hljs-string">&quot;ddd&quot;</span>);<br>            SqlCommand com = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;select ADNA from AD where ADNO=&#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>            conn.Open();<br>            SqlDataReader dr = com.ExecuteReader();<br>            dr.Read();<br>            <span class="hljs-built_in">string</span> hello = <span class="hljs-string">&quot;欢迎您&quot;</span> + dr[<span class="hljs-number">0</span>].ToString().Trim() + <span class="hljs-string">&quot;!&quot;</span>;<br>            label3.Text = hello;<br>            dr.Dispose();<br>            com.Dispose();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">groupBox1_Enter</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button2_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.Close();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button1_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.Hide();<br>            login form1 = <span class="hljs-keyword">new</span>();<br>            form1.Show();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">admin_Load</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            conn.Open();<br>            SqlDataAdapter sda = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;select MSNA AS 材料名称,MSNO AS 材料编号,MSLNA AS 实验室名称,MSLNO AS 实验室编号,MSNU AS 材料余量,MSDP AS 是否需要归还 from MS&quot;</span>, conn);<br>            DataSet ds = <span class="hljs-keyword">new</span>();<br>            sda.Fill(ds);<br>            dataGridView1.DataSource = ds.Tables[<span class="hljs-number">0</span>];<br>            dataGridView1.RowHeadersVisible = <span class="hljs-literal">true</span>;<br>            SqlDataAdapter sda1 = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;select STNA AS 学生姓名,STNO AS 学号 from ST&quot;</span>, conn);<br>            DataSet ds1 = <span class="hljs-keyword">new</span>();<br>            sda1.Fill(ds1);<br>            dataGridView2.DataSource = ds1.Tables[<span class="hljs-number">0</span>];<br>            dataGridView2.RowHeadersVisible = <span class="hljs-literal">true</span>;<br>            SqlDataAdapter sda2 = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;select STNO AS 学生学号,MSNO AS 材料编号,MSLNO AS 实验室编号,BONU AS 借用数量,BODA AS 借用日期,RTDA AS 预计归还日期,CODE AS 核验码 from BO&quot;</span>, conn);<br>            DataSet ds2 = <span class="hljs-keyword">new</span>();<br>            sda2.Fill(ds2);<br>            dataGridView3.DataSource = ds2.Tables[<span class="hljs-number">0</span>];<br>            dataGridView3.RowHeadersVisible = <span class="hljs-literal">true</span>;<br>            SqlDataAdapter sda3 = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;select MSLNA AS 实验室名称,MSLNO AS 实验室编号,ADNA AS 管理员姓名,ADNO AS 管理员编号 from MSL&quot;</span>, conn);<br>            DataSet ds3 = <span class="hljs-keyword">new</span>();<br>            sda3.Fill(ds3);<br>            dataGridView4.DataSource = ds3.Tables[<span class="hljs-number">0</span>];<br>            dataGridView4.RowHeadersVisible = <span class="hljs-literal">true</span>;<br>            conn.Close();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button3_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//实例化SqlConnection变量conn，连接数据库</span><br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            conn.Open();<br>            <span class="hljs-comment">//实例化SqlDataAdapter对象</span><br>            SqlDataAdapter sda = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;select MSNA AS 材料名称,MSNO AS 材料编号,MSLNA AS 实验室名称,MSLNO AS 实验室编号,MSNU AS 材料余量,MSDP AS 是否需要归还 from MS&quot;</span>, conn);<br>            DataSet ds = <span class="hljs-keyword">new</span>();<span class="hljs-comment">//实例化DataSet对象</span><br>            sda.Fill(ds);<span class="hljs-comment">//使用SqlDataAdapter对象的Fill方法填充DataSet            </span><br>            dataGridView1.DataSource = ds.Tables[<span class="hljs-number">0</span>];<span class="hljs-comment">//设置dataGridView1控件的数据源</span><br>            dataGridView1.RowHeadersVisible = <span class="hljs-literal">true</span>;<span class="hljs-comment">//禁止显示行标题</span><br>            conn.Close();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button8_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//实例化SqlConnection变量conn，连接数据库</span><br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            conn.Open();<br>            <span class="hljs-comment">//实例化SqlDataAdapter对象</span><br>            SqlDataAdapter sda = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;select STNA AS 学生姓名,STNO AS 学号 from ST&quot;</span>, conn);<br>            DataSet ds = <span class="hljs-keyword">new</span>();<span class="hljs-comment">//实例化DataSet对象</span><br>            sda.Fill(ds);<span class="hljs-comment">//使用SqlDataAdapter对象的Fill方法填充DataSet            </span><br>            dataGridView2.DataSource = ds.Tables[<span class="hljs-number">0</span>];<span class="hljs-comment">//设置dataGridView1控件的数据源</span><br>            dataGridView2.RowHeadersVisible = <span class="hljs-literal">true</span>;<span class="hljs-comment">//禁止显示行标题</span><br>            conn.Close();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button11_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//实例化SqlConnection变量conn，连接数据库</span><br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            conn.Open();<br>            <span class="hljs-comment">//实例化SqlDataAdapter对象</span><br>            SqlDataAdapter sda = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;select STNO AS 学生学号,MSNO AS 材料编号,MSLNO AS 实验室编号,BONU AS 借用数量,BODA AS 借用日期,RTDA AS 预计归还日期,CODE AS 核验码 from BO&quot;</span>, conn);<br>            DataSet ds = <span class="hljs-keyword">new</span>();<span class="hljs-comment">//实例化DataSet对象</span><br>            sda.Fill(ds);<span class="hljs-comment">//使用SqlDataAdapter对象的Fill方法填充DataSet            </span><br>            dataGridView3.DataSource = ds.Tables[<span class="hljs-number">0</span>];<span class="hljs-comment">//设置dataGridView1控件的数据源</span><br>            dataGridView3.RowHeadersVisible = <span class="hljs-literal">true</span>;<span class="hljs-comment">//禁止显示行标题</span><br>            conn.Close();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button4_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            conn.Open();<br>            SqlCommand cmd = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;select MSNA AS 材料名称,MSNO AS 材料编号,MSLNA AS 实验室名称,MSLNO AS 实验室编号,MSNU AS 材料余量,MSDP AS 是否需要归还 from MS&quot;</span>, conn);<br>            SqlDataAdapter sda = <span class="hljs-keyword">new</span>();<br>            sda.SelectCommand = cmd;<br>            DataSet ds = <span class="hljs-keyword">new</span>();<span class="hljs-comment">//实例化DataSet对象            </span><br>            sda.Fill(ds, <span class="hljs-string">&quot;cs&quot;</span>);<br>            DataTable dt = ds.Tables[<span class="hljs-string">&quot;cs&quot;</span>];<br>            DataRow dr = ds.Tables[<span class="hljs-string">&quot;cs&quot;</span>].NewRow();<span class="hljs-comment">//新建一个数据行</span><br>            <span class="hljs-built_in">int</span> r = dataGridView1.CurrentRow.Index;<span class="hljs-comment">//获得当前行的索引</span><br>            <span class="hljs-comment">//数据行赋值</span><br>            dr[<span class="hljs-number">0</span>] = dataGridView1.Rows[r].Cells[<span class="hljs-number">0</span>].Value;<br>            dr[<span class="hljs-number">1</span>] = dataGridView1.Rows[r].Cells[<span class="hljs-number">1</span>].Value;<br>            dr[<span class="hljs-number">2</span>] = dataGridView1.Rows[r].Cells[<span class="hljs-number">2</span>].Value;<br>            dr[<span class="hljs-number">3</span>] = dataGridView1.Rows[r].Cells[<span class="hljs-number">3</span>].Value;<br>            dr[<span class="hljs-number">4</span>] = dataGridView1.Rows[r].Cells[<span class="hljs-number">4</span>].Value;<br>            dr[<span class="hljs-number">5</span>] = dataGridView1.Rows[r].Cells[<span class="hljs-number">5</span>].Value;<br>            String str = <span class="hljs-keyword">this</span>.dataGridView1.CurrentRow.Cells[<span class="hljs-string">&quot;材料编号&quot;</span>].Value.ToString();<br>            String sql1 = <span class="hljs-string">&quot;delete from MS where MSNO =&#x27;&quot;</span> + str + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>            cmd = <span class="hljs-keyword">new</span> SqlCommand(sql1, conn);<br>            cmd.ExecuteNonQuery();<br>            ds.Tables[<span class="hljs-string">&quot;cs&quot;</span>].Rows.Add(dr);<br>            <span class="hljs-comment">//批量更新数据库</span><br>            SqlCommandBuilder cmdbuilder = <span class="hljs-keyword">new</span>(sda);<br>            <span class="hljs-keyword">if</span> (ds.Tables[<span class="hljs-string">&quot;cs&quot;</span>].GetChanges() != <span class="hljs-literal">null</span>)<br>            &#123;<br>                sda.Update(ds, <span class="hljs-string">&quot;cs&quot;</span>);<br>                ds.AcceptChanges();<br>            &#125;<br>            MessageBox.Show(<span class="hljs-string">&quot;修改成功！&quot;</span>);<br>            conn.Close();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button9_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            <span class="hljs-comment">//判断用户是否选择一行数据，true为没选择，false为选择</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.dataGridView3.Rows[<span class="hljs-keyword">this</span>.dataGridView3.CurrentRow.Index].Cells[<span class="hljs-string">&quot;核验码&quot;</span>].Value.ToString() == <span class="hljs-string">&quot;&quot;</span>)<br>            &#123;<br>                <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                MessageBox.Show(<span class="hljs-string">&quot;请选择一项进行删除！&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;  <span class="hljs-comment">//判断用户是否点击确定按钮，true为点击，false为没有点击</span><br>                <span class="hljs-keyword">if</span> (MessageBox.Show(<span class="hljs-string">&quot;确认删除？&quot;</span>, <span class="hljs-string">&quot;提示信息&quot;</span>, MessageBoxButtons.YesNo) == DialogResult.Yes)<br>                &#123;<br>                    String str = <span class="hljs-keyword">this</span>.dataGridView3.CurrentRow.Cells[<span class="hljs-number">6</span>].Value.ToString();<br>                    String sql = <span class="hljs-string">&quot;delete from BO where CODE =&#x27;&quot;</span> + str + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>                    SqlCommand cmd = <span class="hljs-keyword">new</span>(sql, conn);<br>                    conn.Open();<br>                    cmd.ExecuteNonQuery();<br>                    <span class="hljs-keyword">this</span>.dataGridView3.Rows.Remove(<span class="hljs-keyword">this</span>.dataGridView3.CurrentRow);<br>                    MessageBox.Show(<span class="hljs-string">&quot;此行删除成功！&quot;</span>);<br>                &#125;<br>            &#125;<br>            conn.Close();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button10_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            conn.Open();<br>            SqlCommand cmd = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;select STNO AS 学生学号,MSNO AS 材料编号,MSLNO AS 实验室编号,BONU AS 借用数量,BODA AS 借用日期,RTDA AS 预计归还日期,CODE AS 核验码 from BO&quot;</span>, conn);<br>            SqlDataAdapter sda = <span class="hljs-keyword">new</span>();<br>            sda.SelectCommand = cmd;<br>            DataSet ds = <span class="hljs-keyword">new</span>();<span class="hljs-comment">//实例化DataSet对象            </span><br>            sda.Fill(ds, <span class="hljs-string">&quot;cs&quot;</span>);<br>            DataTable dt = ds.Tables[<span class="hljs-string">&quot;cs&quot;</span>];<br>            DataRow dr = ds.Tables[<span class="hljs-string">&quot;cs&quot;</span>].NewRow();<span class="hljs-comment">//新建一个数据行</span><br>            <span class="hljs-built_in">int</span> r = dataGridView3.CurrentRow.Index;<span class="hljs-comment">//获得当前行的索引</span><br>            <span class="hljs-comment">//数据行赋值</span><br>            dr[<span class="hljs-number">0</span>] = dataGridView3.Rows[r].Cells[<span class="hljs-number">0</span>].Value;<br>            dr[<span class="hljs-number">1</span>] = dataGridView3.Rows[r].Cells[<span class="hljs-number">1</span>].Value;<br>            dr[<span class="hljs-number">2</span>] = dataGridView3.Rows[r].Cells[<span class="hljs-number">2</span>].Value;<br>            dr[<span class="hljs-number">3</span>] = dataGridView3.Rows[r].Cells[<span class="hljs-number">3</span>].Value;<br>            dr[<span class="hljs-number">4</span>] = dataGridView3.Rows[r].Cells[<span class="hljs-number">4</span>].Value;<br>            dr[<span class="hljs-number">5</span>] = dataGridView3.Rows[r].Cells[<span class="hljs-number">5</span>].Value;<br>            dr[<span class="hljs-number">6</span>] = dataGridView3.Rows[r].Cells[<span class="hljs-number">6</span>].Value;<br>            String str = <span class="hljs-keyword">this</span>.dataGridView3.CurrentRow.Cells[<span class="hljs-string">&quot;核验码&quot;</span>].Value.ToString();<br>            String sql1 = <span class="hljs-string">&quot;delete from BO where CODE =&#x27;&quot;</span> + str + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>            cmd = <span class="hljs-keyword">new</span> SqlCommand(sql1, conn);<br>            cmd.ExecuteNonQuery();<br>            ds.Tables[<span class="hljs-string">&quot;cs&quot;</span>].Rows.Add(dr);<br>            <span class="hljs-comment">//批量更新数据库</span><br>            SqlCommandBuilder cmdbuilder = <span class="hljs-keyword">new</span>(sda);<br>            <span class="hljs-keyword">if</span> (ds.Tables[<span class="hljs-string">&quot;cs&quot;</span>].GetChanges() != <span class="hljs-literal">null</span>)<br>            &#123;<br>                sda.Update(ds, <span class="hljs-string">&quot;cs&quot;</span>);<br>                ds.AcceptChanges();<br>            &#125;<br>            MessageBox.Show(<span class="hljs-string">&quot;修改成功！&quot;</span>);<br>            conn.Close();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button5_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            <span class="hljs-comment">//判断用户是否选择一行数据，true为没选择，false为选择</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.dataGridView1.Rows[<span class="hljs-keyword">this</span>.dataGridView1.CurrentRow.Index].Cells[<span class="hljs-string">&quot;材料编号&quot;</span>].Value.ToString() == <span class="hljs-string">&quot;&quot;</span>)<br>            &#123;<br>                <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                MessageBox.Show(<span class="hljs-string">&quot;请选择一项进行删除！&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;  <span class="hljs-comment">//判断用户是否点击确定按钮，true为点击，false为没有点击</span><br>                <span class="hljs-keyword">if</span> (MessageBox.Show(<span class="hljs-string">&quot;确认删除？&quot;</span>, <span class="hljs-string">&quot;提示信息&quot;</span>, MessageBoxButtons.YesNo) == DialogResult.Yes)<br>                &#123;<br>                    String str = <span class="hljs-keyword">this</span>.dataGridView1.CurrentRow.Cells[<span class="hljs-number">1</span>].Value.ToString();<br>                    String sql = <span class="hljs-string">&quot;delete from MS where MSNO =&#x27;&quot;</span> + str + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>                    SqlCommand cmd = <span class="hljs-keyword">new</span>(sql, conn);<br>                    conn.Open();<br>                    cmd.ExecuteNonQuery();<br>                    <span class="hljs-keyword">this</span>.dataGridView1.Rows.Remove(<span class="hljs-keyword">this</span>.dataGridView1.CurrentRow);<br>                    MessageBox.Show(<span class="hljs-string">&quot;此行删除成功！&quot;</span>);<br>                &#125;<br>            &#125;<br>            conn.Close();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button6_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            <span class="hljs-comment">//判断用户是否选择一行数据，true为没选择，false为选择</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.dataGridView2.Rows[<span class="hljs-keyword">this</span>.dataGridView2.CurrentRow.Index].Cells[<span class="hljs-string">&quot;学号&quot;</span>].Value.ToString() == <span class="hljs-string">&quot;&quot;</span>)<br>            &#123;<br>                MessageBox.Show(<span class="hljs-string">&quot;请选择一项进行删除！&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;  <span class="hljs-comment">//判断用户是否点击确定按钮，true为点击，false为没有点击</span><br>                <span class="hljs-keyword">if</span> (MessageBox.Show(<span class="hljs-string">&quot;确认删除？&quot;</span>, <span class="hljs-string">&quot;提示信息&quot;</span>, MessageBoxButtons.YesNo) == DialogResult.Yes)<br>                &#123;<br>                    String str = <span class="hljs-keyword">this</span>.dataGridView2.CurrentRow.Cells[<span class="hljs-number">1</span>].Value.ToString();<br>                    String sql = <span class="hljs-string">&quot;delete from ST where STNO =&#x27;&quot;</span> + str + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>                    SqlCommand cmd = <span class="hljs-keyword">new</span>(sql, conn);<br>                    conn.Open();<br>                    cmd.ExecuteNonQuery();<br>                    <span class="hljs-keyword">this</span>.dataGridView2.Rows.Remove(<span class="hljs-keyword">this</span>.dataGridView2.CurrentRow);<br>                    MessageBox.Show(<span class="hljs-string">&quot;此行删除成功！&quot;</span>);<br>                &#125;<br>            &#125;<br>            conn.Close();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button12_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            textBox3.Text = <span class="hljs-string">&quot;&quot;</span>;<br>            textBox4.Text = <span class="hljs-string">&quot;&quot;</span>;<br>            textBox5.Text = <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button13_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            <span class="hljs-keyword">if</span> (textBox3.Text.Trim() != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; textBox4.Text.Trim() != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; textBox5.Text.Trim() != <span class="hljs-string">&quot;&quot;</span>)<br>            &#123;<br>                SqlCommand cmd3 = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;select count(*) from AD where ADNO = &#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                conn.Open();<br>                <span class="hljs-built_in">int</span> b = (<span class="hljs-built_in">int</span>)cmd3.ExecuteScalar();<br>                <span class="hljs-keyword">if</span> (b == <span class="hljs-number">1</span>)<br>                &#123;<br>                    SqlCommand cmd4 = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;select ADKE from AD where ADNO = &#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                    <span class="hljs-built_in">string</span> c = cmd4.ExecuteScalar().ToString().Trim();<br>                    <span class="hljs-built_in">string</span> oldpwd = login.GetSHA256HashFromString(textBox3.Text.ToString().Trim());<br>                    <span class="hljs-built_in">string</span> newpwd = login.GetSHA256HashFromString(textBox4.Text.ToString().Trim());<br>                    <span class="hljs-built_in">string</span> dnewpwd = login.GetSHA256HashFromString(textBox5.Text.ToString().Trim());<br><br>                    <span class="hljs-keyword">if</span> (newpwd == dnewpwd)<br>                    &#123;<br>                        <span class="hljs-keyword">if</span> (c == oldpwd)<br>                        &#123;<br>                            <span class="hljs-keyword">if</span> (oldpwd != newpwd)<br>                            &#123;<br>                                SqlCommand cmd5 = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;update AD set ADKE = &#x27;&quot;</span> + newpwd + <span class="hljs-string">&quot;&#x27;where ADNO = &#x27;&quot;</span> + login.id + <span class="hljs-string">&quot;&#x27;&quot;</span>, conn);<br>                                <span class="hljs-built_in">int</span> k = (<span class="hljs-built_in">int</span>)cmd5.ExecuteNonQuery();<br>                                <span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">0</span>)<br>                                &#123;<br>                                    MessageBox.Show(<span class="hljs-string">&quot;密码修改成功，请重新登录！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                                    <span class="hljs-keyword">this</span>.Hide();<br>                                    login form1 = <span class="hljs-keyword">new</span>();<br>                                    form1.Show();<br>                                &#125;<br>                                <span class="hljs-keyword">else</span><br>                                &#123;<br>                                    <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                                    MessageBox.Show(<span class="hljs-string">&quot;密码修改失败！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                                    textBox3.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                                    textBox4.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                                    textBox5.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                                &#125;<br>                            &#125;<br>                            <span class="hljs-keyword">else</span><br>                            &#123;<br>                                <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                                MessageBox.Show(<span class="hljs-string">&quot;新旧密码不能一样！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                                textBox4.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                                textBox5.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                            &#125;<br><br>                        &#125;<br>                        <span class="hljs-keyword">else</span><br>                        &#123;<br>                            <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                            MessageBox.Show(<span class="hljs-string">&quot;原密码填写错误！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                            textBox3.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                            textBox4.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                            textBox5.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                        MessageBox.Show(<span class="hljs-string">&quot;两次新密码不一致！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                        textBox4.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                        textBox5.Text = <span class="hljs-string">&quot;&quot;</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                    MessageBox.Show(<span class="hljs-string">&quot;用户名不存在请重新登录！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>                    <span class="hljs-keyword">this</span>.Hide();<br>                    login form1 = <span class="hljs-keyword">new</span>();<br>                    form1.Show();<br>                &#125;<br>                conn.Close();<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                MessageBox.Show(<span class="hljs-string">&quot;密码不能为空！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button16_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//实例化SqlConnection变量conn，连接数据库</span><br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            conn.Open();<br>            <span class="hljs-comment">//实例化SqlDataAdapter对象</span><br>            SqlDataAdapter sda = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;select MSLNA AS 实验室名称,MSLNO AS 实验室编号,ADNA AS 管理员姓名,ADNO AS 管理员编号 from MSL&quot;</span>, conn);<br>            DataSet ds = <span class="hljs-keyword">new</span>();<span class="hljs-comment">//实例化DataSet对象</span><br>            sda.Fill(ds);<span class="hljs-comment">//使用SqlDataAdapter对象的Fill方法填充DataSet            </span><br>            dataGridView4.DataSource = ds.Tables[<span class="hljs-number">0</span>];<span class="hljs-comment">//设置dataGridView1控件的数据源</span><br>            dataGridView4.RowHeadersVisible = <span class="hljs-literal">true</span>;<span class="hljs-comment">//禁止显示行标题</span><br>            conn.Close();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button15_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            conn.Open();<br>            SqlCommand cmd = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;select MSLNA AS 实验室名称,MSLNO AS 实验室编号,ADNA AS 管理员姓名,ADNO AS 管理员编号 from MSL&quot;</span>, conn);<br>            SqlDataAdapter sda = <span class="hljs-keyword">new</span>();<br>            sda.SelectCommand = cmd;<br>            DataSet ds = <span class="hljs-keyword">new</span>();<span class="hljs-comment">//实例化DataSet对象            </span><br>            sda.Fill(ds, <span class="hljs-string">&quot;cs&quot;</span>);<br>            DataTable dt = ds.Tables[<span class="hljs-string">&quot;cs&quot;</span>];<br>            DataRow dr = ds.Tables[<span class="hljs-string">&quot;cs&quot;</span>].NewRow();<span class="hljs-comment">//新建一个数据行</span><br>            <span class="hljs-built_in">int</span> r = dataGridView4.CurrentRow.Index;<span class="hljs-comment">//获得当前行的索引</span><br>            <span class="hljs-comment">//数据行赋值</span><br>            dr[<span class="hljs-number">0</span>] = dataGridView4.Rows[r].Cells[<span class="hljs-number">0</span>].Value;<br>            dr[<span class="hljs-number">1</span>] = dataGridView4.Rows[r].Cells[<span class="hljs-number">1</span>].Value;<br>            dr[<span class="hljs-number">2</span>] = dataGridView4.Rows[r].Cells[<span class="hljs-number">2</span>].Value;<br>            dr[<span class="hljs-number">3</span>] = dataGridView4.Rows[r].Cells[<span class="hljs-number">3</span>].Value;<br>            String str = <span class="hljs-keyword">this</span>.dataGridView4.CurrentRow.Cells[<span class="hljs-string">&quot;实验室编号&quot;</span>].Value.ToString();<br>            String sql1 = <span class="hljs-string">&quot;delete from MSL where MSLNO =&#x27;&quot;</span> + str + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>            cmd = <span class="hljs-keyword">new</span> SqlCommand(sql1, conn);<br>            cmd.ExecuteNonQuery();<br>            ds.Tables[<span class="hljs-string">&quot;cs&quot;</span>].Rows.Add(dr);<br>            <span class="hljs-comment">//批量更新数据库</span><br>            SqlCommandBuilder cmdbuilder = <span class="hljs-keyword">new</span>(sda);<br>            <span class="hljs-keyword">if</span> (ds.Tables[<span class="hljs-string">&quot;cs&quot;</span>].GetChanges() != <span class="hljs-literal">null</span>)<br>            &#123;<br>                sda.Update(ds, <span class="hljs-string">&quot;cs&quot;</span>);<br>                ds.AcceptChanges();<br>            &#125;<br>            MessageBox.Show(<span class="hljs-string">&quot;修改成功！&quot;</span>);<br>            conn.Close();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button14_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            <span class="hljs-comment">//判断用户是否选择一行数据，true为没选择，false为选择</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.dataGridView4.Rows[<span class="hljs-keyword">this</span>.dataGridView4.CurrentRow.Index].Cells[<span class="hljs-string">&quot;实验室编号&quot;</span>].Value.ToString() == <span class="hljs-string">&quot;&quot;</span>)<br>            &#123;<br>                <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top - <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left + <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left, <span class="hljs-keyword">this</span>.Top + <span class="hljs-number">10</span>); Thread.Sleep(<span class="hljs-number">1</span>); <span class="hljs-keyword">this</span>.Location = <span class="hljs-keyword">new</span> Point(<span class="hljs-keyword">this</span>.Left - <span class="hljs-number">10</span>, <span class="hljs-keyword">this</span>.Top);<br>                MessageBox.Show(<span class="hljs-string">&quot;请选择一项进行删除！&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;  <span class="hljs-comment">//判断用户是否点击确定按钮，true为点击，false为没有点击</span><br>                <span class="hljs-keyword">if</span> (MessageBox.Show(<span class="hljs-string">&quot;确认删除？&quot;</span>, <span class="hljs-string">&quot;提示信息&quot;</span>, MessageBoxButtons.YesNo) == DialogResult.Yes)<br>                &#123;<br>                    String str = <span class="hljs-keyword">this</span>.dataGridView4.CurrentRow.Cells[<span class="hljs-number">1</span>].Value.ToString();<br>                    String sql = <span class="hljs-string">&quot;delete from MSL where MSLNO =&#x27;&quot;</span> + str + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>                    SqlCommand cmd = <span class="hljs-keyword">new</span>(sql, conn);<br>                    conn.Open();<br>                    cmd.ExecuteNonQuery();<br>                    <span class="hljs-keyword">this</span>.dataGridView4.Rows.Remove(<span class="hljs-keyword">this</span>.dataGridView4.CurrentRow);<br>                    MessageBox.Show(<span class="hljs-string">&quot;此行删除成功！&quot;</span>);<br>                &#125;<br>            &#125;<br>            conn.Close();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><blockquote><p>管理员可以查询、添加、修改、删除材料信息，除去密码以外的个人信息，实验室信息，借用信息，以及个人信息。<br>修改个人信息只允许修改密码，修改密码前要校对老密码是否正确和两次输入的新密码是否一致。</p></blockquote><p>界面截图：</p><blockquote><p><img src="https://img-blog.csdnimg.cn/20210702213924402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhbmRhbGxDaHU=,size_16,color_FFFFFF,t_70" alt="管理员——材料管理"><br><img src="https://img-blog.csdnimg.cn/20210702214009781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhbmRhbGxDaHU=,size_16,color_FFFFFF,t_70" alt="管理员——学生信息"><br><img src="https://img-blog.csdnimg.cn/20210702214054434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhbmRhbGxDaHU=,size_16,color_FFFFFF,t_70" alt="管理员——借用中信息管理"><br><img src="https://img-blog.csdnimg.cn/20210702214127351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhbmRhbGxDaHU=,size_16,color_FFFFFF,t_70" alt="管理员——实验室设置"><br><img src="https://img-blog.csdnimg.cn/20210702214147818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhbmRhbGxDaHU=,size_16,color_FFFFFF,t_70" alt="管理员——用户信息设置"></p></blockquote><h3 id="5-guider-cs"><a href="#5-guider-cs" class="headerlink" title="5.guider.cs"></a>5.guider.cs</h3><p>代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Data;<br><span class="hljs-keyword">using</span> System.Data.SqlClient;<br><span class="hljs-keyword">using</span> System.Windows.Forms;<br><br><span class="hljs-keyword">namespace</span> 大学实验材料管理信息系统数据库设计<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">guider</span> : <span class="hljs-title">Form</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">guider</span>()</span><br>        &#123;<br>            InitializeComponent();<br>            textBox2.Text = DateTime.Now.ToString(<span class="hljs-string">&quot;yyyy/MM/dd &quot;</span> + <span class="hljs-string">&quot;ddd&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button2_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.Close();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button1_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.Hide();<br>            login form1 = <span class="hljs-keyword">new</span> login();<br>            form1.Show();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button3_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            SqlConnection conn = <span class="hljs-keyword">new</span>(login.connectket);<br>            SqlDataAdapter sda = <span class="hljs-keyword">new</span> SqlDataAdapter(<span class="hljs-string">&quot;select MSNA AS 材料名,MSNO AS 材料编号,MSLNA AS 实验室名称,MSLNO AS 实验室编号,MSNU AS 材料余量 from MS&quot;</span>, conn);<br>            DataSet ds = <span class="hljs-keyword">new</span> DataSet();<span class="hljs-comment">//实例化DataSet对象</span><br>            sda.Fill(ds);<span class="hljs-comment">//使用SqlDataAdapter对象的Fill方法填充DataSet            </span><br>            dataGridView1.DataSource = ds.Tables[<span class="hljs-number">0</span>];<span class="hljs-comment">//设置dataGridView1控件的数据源</span><br>            dataGridView1.RowHeadersVisible = <span class="hljs-literal">true</span>;<span class="hljs-comment">//显示行标题</span><br>            conn.Close();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">guider_Load</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">groupBox1_Enter</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><blockquote><p>以保证公开透明的原则游客登录只允许查看材料信息表</p></blockquote><p>界面截图：</p><blockquote><p><img src="https://img-blog.csdnimg.cn/20210702214301994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhbmRhbGxDaHU=,size_16,color_FFFFFF,t_70" alt="游客登录"></p></blockquote><h2 id="打包文件"><a href="#打包文件" class="headerlink" title="打包文件"></a>打包文件</h2><p><a href="https://download.csdn.net/download/RandallChu/19997166">大学实验材料管理信息系统数据库设计.zip</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>本实验采用的是实验指导书中实验7、8的方法去做的，过程会稍显复杂。在实验期间主要心得与收获如下： </p><ol><li>实验本身并不是很难，因为大多的实现方法就是增、删、查、改四项，真正有问题的是实现部分，因为要考虑到各个组件和界面的交互操作；</li><li>代码本身不难写，难的是数据库的设计和界面的美工，这两个方面是这么久一直没有涉及过的，尤其是界面的美工。数据库的设计也是，要详细分析好各个数据项的数据类型，否则编写代码的时候会出现很严重的类型匹配错误；</li><li>学生窗口中的借用选项卡和归还选项卡中的combobox都从数据库中获取信息，当选择第一个combobox中的数据后第二个combobox才会加载信息源；</li><li>借用中记录表BO里面可能会出现相同借用的情况（即同一个人在同一天借了相同数量的相同物品），我创建了一个生成十位核验码的方法<em>GenerateRandom(int Length)</em> 每次借用东西的时候都会自动生成一个核验码来确定唯一行；</li><li>我使用的是VS2019里的C#窗体应用，目标框架使用的是.NET5.0；</li><li>完成题目所要求的功能花了两天加一个通宵，很多时候网上的代码不能使用，我只能代码进行重构，这个过程很痛苦，因为有些地方改了之后就会报错，花费很多时间来换条路进行重构。但是结局是开心的，因为最后完成了我的目标，使得代码的整洁度、可读性都得到了不小的提升。</li></ol></blockquote><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><blockquote><p><em>7.3</em><br><em>这次的小学期就很离谱。老师<del>王学伟</del>就全程不管我们班，问她问题也不耐烦。当她刚刚给女生看完数据库，我们男生想给她看一下我们的数据库设计的怎么样她就不想看，说到时候一起看。我们还去问了好几遍，就是不看。最后在今天下午她不耐烦的花了两分钟来看了我操作程序（只演示了登录，学生页面显示信息和借用）的同时问我问题（算是答辩），最后说不用演示了直接给我了分数。==这个程序在她这里就花了两分钟不到就完成答辩和评分==。我自认为我从0开始（没学过C#和SSMS）写了两天加一个通宵的东西比人家花了半天时间复制粘贴弄出来什么技术含量没有的框架好，但是人家就是分数比我高？==以后的北印信工的同学一定要避坑，别选某些老师的课，真就恶心人，太离谱！！！==</em></p></blockquote><blockquote><p><em>7.5更改</em><br><em>室友问了整个数据库系统设计的评分标准。评高分的标准——使用的语言是否为Java、设计是否插入背景图片（ps：我们都没学过Java连接数据库，C#连接数据库也只是在最后的两个实验里有，她关于用Java或者C#连接数据库一点没说），你这高分全是美观要求为啥不去教设计艺术学院？来嚯嚯我们信工？我们翻遍了整个实验的题目与要求，没有找到一点跟她说的相关的评分标准。我个人认为作为一个老师这样不咋地。你小学期每天在我们实验室待的时间不超过十分钟。在上课时间出去接孩子。一直在隔壁班，有什么通知只跟隔壁班说。再强调一下==以后的北印信工的同学在选课的时候一定要避坑，别选某些老师的课，这某些老师太恶心人，越想越离谱！！！==</em><br><em>附数据库系统设计题目与要求</em><img src="https://img-blog.csdnimg.cn/20210705104517191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhbmRhbGxDaHU=,size_16,color_FFFFFF,t_70" alt="数据库系统设计题目与要求1"><br><img src="https://img-blog.csdnimg.cn/20210705104604327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhbmRhbGxDaHU=,size_16,color_FFFFFF,t_70" alt="数据库系统设计题目与要求2"></p></blockquote><blockquote><p>7.20优化程序算法</p><ol><li>优化数据库，删除部分无用数据库列；</li><li>增加密码加密算法，通过sha256加密算法加密用户密码，将加密后的密码存入数据库；</li><li>更新数据库部分列的表示意义和属性；</li><li>添加了错误操作窗口抖动。</li></ol></blockquote><blockquote><p>21.7.22更新日志：</p><ol><li>修复了修改密码报错新旧密码重复的问题</li><li>利用云端服务器数据库替代本地数据库</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>12届蓝桥杯C++决赛试题</title>
      <link href="/2021/06/06/12lanqiao/"/>
      <url>/2021/06/06/12lanqiao/</url>
      
        <content type="html"><![CDATA[<h2 id="1-大写"><a href="#1-大写" class="headerlink" title="1.大写"></a>1.大写</h2><p><strong>题目</strong></p><blockquote><p>给定一个只包含大写字母和小写字母的字符串，请将其中所有的小写字母转换成大写字母后将字符串输出。</p></blockquote><p><strong>输入</strong></p><blockquote><p>输入一行包含一个字符串。</p></blockquote><p><strong>输入样例</strong></p><blockquote><p>LanQiao</p></blockquote><p><strong>输出</strong></p><blockquote><p>输出转换成大写后的字符串。</p></blockquote><p><strong>输出样例</strong></p><blockquote><p>LANQIAO</p></blockquote><p><strong>评测用例规模与约定</strong></p><blockquote><p>对于所有评测用例，字符串的长度不超过100。</p></blockquote><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">100</span>];<br>    <span class="hljs-built_in">fgets</span>(s,<span class="hljs-number">100</span>,stdin);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">strlen</span>(s);i++)&#123;<br>        <span class="hljs-keyword">if</span>(s[i]&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;s[i]&lt;=<span class="hljs-string">&#x27;z&#x27;</span>)&#123;<br>            s[i]=s[i]-(<span class="hljs-string">&#x27;a&#x27;</span>-<span class="hljs-string">&#x27;A&#x27;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(s);<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="2-二进制问题"><a href="#2-二进制问题" class="headerlink" title="2.二进制问题"></a>2.二进制问题</h2><p><strong>题目</strong></p><p>小蓝最近在学习二进制。他想知道1到N中有多少个数满足其二进制表示中恰好有K个1。你能帮助他吗?</p><p><strong>输入</strong></p><blockquote><p>输入两个数N，K。N表示从1到N这么多数字，K表示二进制数字中有K个1。</p></blockquote><p><strong>输入样例</strong></p><blockquote><p>7 2</p></blockquote><p><strong>输出</strong></p><blockquote><p>输出一个数字，表示从1到N这么多数字的二进制数字中有多少个二进制数字中有K个1.</p></blockquote><p><strong>输出样例</strong></p><blockquote><p>3</p></blockquote><p><strong>评测用例规模与约定</strong></p><blockquote><p>对于30%的评测用例，1&lt;N≤ 10^8^,1 &lt;K ≤10。<br>对于60%的评测用例，1≤N≤2×10^9^,1&lt;K ≤30。<br>对于所有评测用例，1≤N≤ 10^18^,1≤K ≤50。</p></blockquote><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> sheet[<span class="hljs-number">10000</span>][<span class="hljs-number">10000</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-type">int</span> c;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,i)&gt;=n)&#123;<br>            c=i<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,k;<br>    cin &gt;&gt; n;<br>    cin &gt;&gt; k;<br>    <span class="hljs-type">int</span> c=<span class="hljs-built_in">judge</span>(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=c;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=i&amp;&amp;j&lt;=k;j++)&#123;<br>            <span class="hljs-keyword">if</span>(j==<span class="hljs-number">0</span>)&#123;<br>                sheet[i][j]=<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i==j)&#123;<br>                sheet[i][j]=<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                sheet[i][j]=sheet[i<span class="hljs-number">-1</span>][j]+sheet[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br>            &#125;<br>            <span class="hljs-comment">//cout &lt;&lt; sheet[i][j] &lt;&lt; &quot; &quot;;</span><br>        &#125;<br>        <span class="hljs-comment">//cout &lt;&lt; endl;</span><br>    &#125;<br>    <span class="hljs-type">int</span> sum=sheet[c][k];<br>    <span class="hljs-keyword">while</span>(n&gt;<span class="hljs-number">1</span>&amp;&amp;k&gt;=<span class="hljs-number">1</span>)&#123;<br>        n=n-<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,c);<br>        k--;<br>        c=<span class="hljs-built_in">judge</span>(n);<br>        sum=sum+sheet[c][k];<br>    &#125;<br>    cout &lt;&lt; sum;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="思路总结："><a href="#思路总结：" class="headerlink" title="思路总结："></a>思路总结：</h2><p>按照二进制长度（1的二进制长度为1，5的二进制长度为3）为行，二进制数中1的个数为列进行列表，利用动态规划求解。先求出表中右下角值，再在表中找出(N-pow(2,最大列数),k-循环次数)的值相加，最后结果就是总个数。</p><table><thead><tr><th align="center"></th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">…</th><th align="center">K</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">1</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2</td><td align="center">1</td><td align="center"></td><td align="center">1</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">3</td><td align="center">1</td><td align="center"></td><td align="center"></td><td align="center">1</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">4</td><td align="center">1</td><td align="center"></td><td align="center">=sheet(3,2)+sheet(3,1)</td><td align="center"></td><td align="center">1</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">…</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">N</td><td align="center">1</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">=sheet(n-1,k)+sheet(n-1,k-1)</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>全点对最短路径All point pair shortest path</title>
      <link href="/2021/05/25/all-point-pair-shortest-path/"/>
      <url>/2021/05/25/all-point-pair-shortest-path/</url>
      
        <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minnum</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)</span></span>&#123;<span class="hljs-comment">//get the min number </span><br>    <span class="hljs-type">int</span> n=a;<br>    <span class="hljs-keyword">if</span>(a&gt;b)&#123;<br>        n=b;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(n&gt;c)&#123;<br>        n=c;<br>    &#125;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxinarr</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> size)</span></span>&#123;<br>    <span class="hljs-type">int</span> n=a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;size;i++)&#123;<br>        <span class="hljs-keyword">if</span>(n&lt;a[i])<br>            n=a[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mininarr</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> size)</span></span>&#123;<br>    <span class="hljs-type">int</span> n=a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;size;i++)&#123;<br>        <span class="hljs-keyword">if</span>(n&gt;a[i])<br>            n=a[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; startpoint;<br>    vector&lt;<span class="hljs-type">int</span>&gt; endpoint;<br>    vector&lt;<span class="hljs-type">int</span>&gt; weight;<br>    <span class="hljs-type">int</span> number;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请依次输入每段路经的起始点，结束点和权值（输入-1结束输入ps:-1所在行数字无效）：&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><br>        cin &gt;&gt; number;<br>        <span class="hljs-keyword">if</span> (number == <span class="hljs-number">-1</span>)<span class="hljs-comment">//如果是-1则跳出循环</span><br>            <span class="hljs-keyword">break</span>;<br>        startpoint.<span class="hljs-built_in">push_back</span>(number);<span class="hljs-comment">//每输入一个数字就把它添加到数组的最后</span><br>        cin &gt;&gt; number;<br>        <span class="hljs-keyword">if</span> (number == <span class="hljs-number">-1</span>)<br>            <span class="hljs-keyword">break</span>;<br>        endpoint.<span class="hljs-built_in">push_back</span>(number);<br>        cin &gt;&gt; number;<br>        <span class="hljs-keyword">if</span> (number == <span class="hljs-number">-1</span>)<br>            <span class="hljs-keyword">break</span>;<br>        weight.<span class="hljs-built_in">push_back</span>(number);<br>    &#125;<br>    <span class="hljs-type">int</span> *sp = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[startpoint.<span class="hljs-built_in">size</span>()];<br>    <span class="hljs-keyword">if</span> (!startpoint.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-built_in">memcpy</span>(sp, &amp;startpoint[<span class="hljs-number">0</span>], startpoint.<span class="hljs-built_in">size</span>()*<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>    &#125;<br>    <span class="hljs-type">int</span> *ep = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[endpoint.<span class="hljs-built_in">size</span>()];<br>    <span class="hljs-keyword">if</span> (!endpoint.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-built_in">memcpy</span>(ep, &amp;endpoint[<span class="hljs-number">0</span>], endpoint.<span class="hljs-built_in">size</span>()*<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>    &#125;<br>    <span class="hljs-type">int</span> *wt = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[weight.<span class="hljs-built_in">size</span>()];<br>    <span class="hljs-keyword">if</span> (!weight.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-built_in">memcpy</span>(wt, &amp;weight[<span class="hljs-number">0</span>], weight.<span class="hljs-built_in">size</span>()*<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>    &#125;<br>    <span class="hljs-type">int</span> size=<span class="hljs-built_in">minnum</span>(startpoint.<span class="hljs-built_in">size</span>(),endpoint.<span class="hljs-built_in">size</span>(),weight.<span class="hljs-built_in">size</span>());<br><br>    <span class="hljs-type">int</span> max=<span class="hljs-built_in">maxinarr</span>(ep,size);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">maxinarr</span>(sp,size)&gt;<span class="hljs-built_in">maxinarr</span>(ep,size))<br>        <span class="hljs-type">int</span> max=<span class="hljs-built_in">maxinarr</span>(sp,size);<br><br>    <span class="hljs-type">int</span> sheet[max+<span class="hljs-number">1</span>][max+<span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> min=<span class="hljs-built_in">mininarr</span>(ep,size);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">mininarr</span>(sp,size)&gt;<span class="hljs-built_in">mininarr</span>(ep,size))<br>        <span class="hljs-type">int</span> min=<span class="hljs-built_in">mininarr</span>(sp,size);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=min;i&lt;=max;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=min;j&lt;=max;j++)&#123;<br>            sheet[i][j]=<span class="hljs-number">99999</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//比较存入路径长短后存入数据 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>        <span class="hljs-keyword">if</span>(sheet[sp[i]][ep[i]]&gt;wt[i])&#123;<br>            sheet[sp[i]][ep[i]]=wt[i];<br>        &#125;<br>    &#125;<br><br>    cout&lt;&lt;<span class="hljs-string">&quot;排序前：&quot;</span>&lt;&lt; endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=min;i&lt;=max;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=min;j&lt;=max;j++)&#123;<br>            cout &lt;&lt; sheet[i][j]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-comment">//循环计算最短路径表 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=min;k&lt;=max;k++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=min;i&lt;=max;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=min;j&lt;=max;j++)&#123;<br>                <span class="hljs-keyword">if</span>(sheet[i][j]&gt;sheet[i][k]+sheet[k][j])<br>                    sheet[i][j]=sheet[i][k]+sheet[k][j];<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-string">&quot;排序后：&quot;</span>&lt;&lt; endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=min;i&lt;=max;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=min;j&lt;=max;j++)&#123;<br>            cout &lt;&lt; sheet[i][j]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;          &quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=min;i&lt;=max;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%10d&quot;</span>,i);<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=min;i&lt;=max;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=min<span class="hljs-number">-1</span>;j&lt;=max;j++)&#123;<br>            <span class="hljs-keyword">if</span>(j==min<span class="hljs-number">-1</span>)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%10d&quot;</span>,i);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%10d&quot;</span>,sheet[i][j]);<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>读取数组定义了三个个vector容器，将数值存入容器后再将容器转换为普通数组。函数上面对于该算法的分析，求解过程实际上是典型的动态规划解题过程，描述最优子结构：公式的推倒，思考过程，得到一个递归解，按自底向上的方式计算最优解：最短路径权值矩阵。最后有计算结果构造一个最优解，给出最短路径。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>背包问题BackpackProblem</title>
      <link href="/2021/05/25/backpackproblem/"/>
      <url>/2021/05/25/backpackproblem/</url>
      
        <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">package</span><span class="hljs-params">(<span class="hljs-type">int</span> *weight,<span class="hljs-type">int</span> *size,<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> c)</span></span>;<span class="hljs-comment">//构造最优矩阵</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getResult</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> c,<span class="hljs-type">int</span> *res,<span class="hljs-type">int</span> *size,<span class="hljs-type">int</span> *weight)</span></span>;<span class="hljs-comment">//构造最优解</span><br><span class="hljs-type">int</span> f[<span class="hljs-number">10</span>][<span class="hljs-number">100</span>];<br><span class="hljs-comment">//构造最优矩阵</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; vweight;<span class="hljs-comment">//定义一个vector数组vweight</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; vsize;<br>    <span class="hljs-type">int</span> number;<br>    vweight.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>    vsize.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入每个物品的重量：&quot;</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br>        cin &gt;&gt; number;<br>        vweight.<span class="hljs-built_in">push_back</span>(number);<span class="hljs-comment">//每输入一个数字就把它添加到数组的最后</span><br>        <span class="hljs-keyword">if</span> (cin.<span class="hljs-built_in">get</span>() == <span class="hljs-string">&#x27;\n&#x27;</span>)<span class="hljs-comment">//如果是回车符则跳出循环</span><br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> *weight = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[vweight.<span class="hljs-built_in">size</span>()];<span class="hljs-comment">//每个物品的重量</span><br>    <span class="hljs-keyword">if</span> (!vweight.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-built_in">memcpy</span>(weight, &amp;vweight[<span class="hljs-number">0</span>], vweight.<span class="hljs-built_in">size</span>()*<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入每个物品的价值：&quot;</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        cin &gt;&gt; number;<br>        vsize.<span class="hljs-built_in">push_back</span>(number);<br>        <span class="hljs-keyword">if</span> (cin.<span class="hljs-built_in">get</span>() == <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> *size = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[vsize.<span class="hljs-built_in">size</span>()];<span class="hljs-comment">//每个物品的价值</span><br>    <span class="hljs-keyword">if</span> (!vsize.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-built_in">memcpy</span>(size, &amp;vsize[<span class="hljs-number">0</span>], vsize.<span class="hljs-built_in">size</span>()*<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>    &#125;<br>    <span class="hljs-keyword">if</span>(vweight.<span class="hljs-built_in">size</span>()!=vsize.<span class="hljs-built_in">size</span>())&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;数据输入错误，请重新开始&quot;</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入背包的总容量：&quot;</span>;<br>    <span class="hljs-type">int</span> c; <span class="hljs-comment">//背包能容的重量</span><br>    cin &gt;&gt; c;<br>    <span class="hljs-type">int</span> n = vweight.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; <span class="hljs-comment">//物品的个数</span><br>    <span class="hljs-type">int</span> res[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;a&lt;n;a++)&#123;<br>        res[a]=<span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> i,j;<br>    <span class="hljs-built_in">package</span>(weight,size,n,c);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;=c;j++)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%2d &quot;</span>,f[i][j]);<br>        cout &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-built_in">getResult</span>(n,c,res,size,weight);<br>    cout &lt;&lt; <span class="hljs-string">&quot;放入背包最大价值: &quot;</span> &lt;&lt; f[n][c] &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;放入背包的物品为: &quot;</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">if</span>(res[i] == <span class="hljs-number">1</span>)<br>            cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;  &quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">package</span><span class="hljs-params">(<span class="hljs-type">int</span> *weight,<span class="hljs-type">int</span> *size,<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> c)</span></span>&#123;<br>    <span class="hljs-type">int</span> i,j;<br>    <span class="hljs-comment">//初始化矩阵</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        f[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=c;j++)<br>        f[<span class="hljs-number">0</span>][j] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=c;j++)&#123;<br>            <span class="hljs-comment">//当容量够放入第i个物品，并且放入之后的价值要比不放大</span><br>            <span class="hljs-keyword">if</span>(weight[i] &lt;= j &amp;&amp; f[i<span class="hljs-number">-1</span>][j-weight[i]] + size[i] &gt; f[i<span class="hljs-number">-1</span>][j])&#123;<br>                f[i][j] = f[i<span class="hljs-number">-1</span>][j-weight[i]] + size[i];<br>            &#125;<span class="hljs-keyword">else</span><br>                f[i][j] = f[i<span class="hljs-number">-1</span>][j];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getResult</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> c,<span class="hljs-type">int</span> *res,<span class="hljs-type">int</span> *size,<span class="hljs-type">int</span> *weight)</span></span>&#123;<br><span class="hljs-comment">//构造最优解</span><br>    <span class="hljs-type">int</span> i,j;<br>    j = c;<br>    <span class="hljs-keyword">for</span>(i=n;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br>        <span class="hljs-keyword">if</span>(f[i][j] != f[i<span class="hljs-number">-1</span>][j])&#123;<br>            res[i] = <span class="hljs-number">1</span>;<br>            j = j - weight[i];<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>背包问题是要求一个最优值，如果要求输出这个最优值的方案，可以参照一般动态规划问题输出方案的方法：记录下每个状态的最优值是由哪一个策略推出来的，这样便可根据这条策略找到上一个状态，从上一个状态接着向前推即可。即自顶向下的备忘录法或自底向上。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>霍夫曼编码Huffman</title>
      <link href="/2021/05/25/huffman/"/>
      <url>/2021/05/25/huffman/</url>
      
        <content type="html"><![CDATA[<h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><span class="hljs-comment">// 统计字符频度的临时结点</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> uch;<span class="hljs-comment">// 以8bits为单元的无符号字符</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> weight;<span class="hljs-comment">// 每类（以二进制编码区分）字符出现频度</span><br>&#125; TmpNode;<br><span class="hljs-comment">// 哈夫曼树结点</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> uch;<span class="hljs-comment">// 以8bits为单元的无符号字符</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> weight;<span class="hljs-comment">// 每类（以二进制编码区分）字符出现频度</span><br>    <span class="hljs-type">char</span> *code;<span class="hljs-comment">// 字符对应的哈夫曼编码（动态分配存储空间）</span><br>    <span class="hljs-type">int</span> parent, lchild, rchild;<span class="hljs-comment">// 定义双亲和左右孩子</span><br>&#125; HufNode, *HufTree;<br><span class="hljs-comment">// 选择最小和次小的两个结点，建立哈夫曼树调用</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">select</span><span class="hljs-params">(HufNode *huf_tree, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> *s1, <span class="hljs-type">int</span> *s2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 找最小</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> min = ULONG_MAX;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        <span class="hljs-keyword">if</span>(huf_tree[i].parent == <span class="hljs-number">0</span> &amp;&amp; huf_tree[i].weight &lt; min)<br>        &#123;<br>            min = huf_tree[i].weight;<br>            *s1 = i;<br>        &#125;<br>    huf_tree[*s1].parent=<span class="hljs-number">1</span>;   <span class="hljs-comment">// 标记此结点已被选中</span><br>    <span class="hljs-comment">// 找次小</span><br>    min=ULONG_MAX;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        <span class="hljs-keyword">if</span>(huf_tree[i].parent == <span class="hljs-number">0</span> &amp;&amp; huf_tree[i].weight &lt; min)<br>        &#123;<br>            min = huf_tree[i].weight;<br>            *s2 = i;<br>        &#125;<br>&#125;<br><span class="hljs-comment">// 建立哈夫曼树</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreateTree</span><span class="hljs-params">(HufNode *huf_tree, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> char_kinds, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> node_num)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">int</span> s1, s2;<br>    <span class="hljs-keyword">for</span>(i = char_kinds; i &lt; node_num; ++i)<br>    &#123;<br>        <span class="hljs-built_in">select</span>(huf_tree, i, &amp;s1, &amp;s2);<span class="hljs-comment">// 选择最小的两个结点</span><br>        huf_tree[s1].parent = huf_tree[s2].parent = i;<br>        huf_tree[i].lchild = s1;<br>        huf_tree[i].rchild = s2;<br>        huf_tree[i].weight = huf_tree[s1].weight + huf_tree[s2].weight;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 生成哈夫曼编码</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HufCode</span><span class="hljs-params">(HufNode *huf_tree, <span class="hljs-type">unsigned</span> char_kinds)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">int</span> cur, next, index;<br>    <span class="hljs-type">char</span> *code_tmp = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">256</span>*<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>));<span class="hljs-comment">// 暂存编码，最多256个叶子，编码长度不超多255</span><br>    code_tmp[<span class="hljs-number">256</span><span class="hljs-number">-1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; char_kinds; ++i)<br>    &#123;<br>        index = <span class="hljs-number">256</span><span class="hljs-number">-1</span>;<span class="hljs-comment">// 编码临时空间索引初始化</span><br>        <span class="hljs-comment">// 从叶子向根反向遍历求编码</span><br>        <span class="hljs-keyword">for</span>(cur = i, next = huf_tree[i].parent; next != <span class="hljs-number">0</span>;<br>            cur = next, next = huf_tree[next].parent)<br>            <span class="hljs-keyword">if</span>(huf_tree[next].lchild == cur)<br>                code_tmp[--index] = <span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-comment">// 左&#x27;0&#x27;</span><br>            <span class="hljs-keyword">else</span><br>                code_tmp[--index] = <span class="hljs-string">&#x27;1&#x27;</span>;<span class="hljs-comment">// 右&#x27;1&#x27;</span><br>        huf_tree[i].code = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>((<span class="hljs-number">256</span>-index)*<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>));<span class="hljs-comment">// 为第i个字符编码动态分配存储空间 </span><br>        <span class="hljs-built_in">strcpy</span>(huf_tree[i].code, &amp;code_tmp[index]);     <span class="hljs-comment">// 正向保存编码到树结点相应域中</span><br>    &#125;<br>    <span class="hljs-built_in">free</span>(code_tmp);<span class="hljs-comment">// 释放编码临时空间</span><br>&#125;<br><span class="hljs-comment">// 压缩函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">compress</span><span class="hljs-params">(<span class="hljs-type">char</span> *ifname, <span class="hljs-type">char</span> *ofname)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i, j;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> char_kinds;<span class="hljs-comment">// 字符种类</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> char_temp;<span class="hljs-comment">// 暂存8bits字符</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> file_len = <span class="hljs-number">0</span>;<br>    FILE *infile, *outfile;<br>    TmpNode node_temp;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> node_num;<br>    HufTree huf_tree;<br>    <span class="hljs-type">char</span> code_buf[<span class="hljs-number">256</span>] = <span class="hljs-string">&quot;\0&quot;</span>;<span class="hljs-comment">// 待存编码缓冲区</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> code_len;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    ** 动态分配256个结点，暂存字符频度，</span><br><span class="hljs-comment">    ** 统计并拷贝到树结点后立即释放</span><br><span class="hljs-comment">    */</span><br>    TmpNode *tmp_nodes =(TmpNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">256</span>*<span class="hljs-built_in">sizeof</span>(TmpNode));<br>    <span class="hljs-comment">// 初始化暂存结点</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; ++i)<br>    &#123;<br>        tmp_nodes[i].weight = <span class="hljs-number">0</span>;<br>        tmp_nodes[i].uch = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)i;<span class="hljs-comment">// 数组的256个下标与256种字符对应</span><br>    &#125;<br>    <span class="hljs-comment">// 遍历文件，获取字符频度</span><br>    infile = <span class="hljs-built_in">fopen</span>(ifname, <span class="hljs-string">&quot;rb&quot;</span>);<br>    <span class="hljs-comment">// 判断输入文件是否存在</span><br>    <span class="hljs-keyword">if</span> (infile == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-built_in">fread</span>((<span class="hljs-type">char</span> *)&amp;char_temp, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>), <span class="hljs-number">1</span>, infile);<span class="hljs-comment">// 读入一个字符</span><br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">feof</span>(infile))<br>    &#123;<br>        ++tmp_nodes[char_temp].weight;<span class="hljs-comment">// 统计下标对应字符的权重，利用数组的随机访问快速统计字符频度</span><br>        ++file_len;<br>        <span class="hljs-built_in">fread</span>((<span class="hljs-type">char</span> *)&amp;char_temp, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>), <span class="hljs-number">1</span>, infile);<span class="hljs-comment">// 读入一个字符</span><br>    &#125;<br>    <span class="hljs-built_in">fclose</span>(infile);<br>    <span class="hljs-comment">// 排序，将频度为零的放最后，剔除</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span><span class="hljs-number">-1</span>; ++i)<br>        <span class="hljs-keyword">for</span>(j = i+<span class="hljs-number">1</span>; j &lt; <span class="hljs-number">256</span>; ++j)<br>            <span class="hljs-keyword">if</span>(tmp_nodes[i].weight &lt; tmp_nodes[j].weight)<br>            &#123;<br>                node_temp = tmp_nodes[i];<br>                tmp_nodes[i] = tmp_nodes[j];<br>                tmp_nodes[j] = node_temp;<br>            &#125;<br>    <span class="hljs-comment">// 统计实际的字符种类（出现次数不为0）</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; ++i)<br>        <span class="hljs-keyword">if</span>(tmp_nodes[i].weight == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>    char_kinds = i;<br>    <span class="hljs-keyword">if</span> (char_kinds == <span class="hljs-number">1</span>)<br>    &#123;<br>        outfile = <span class="hljs-built_in">fopen</span>(ofname, <span class="hljs-string">&quot;wb&quot;</span>);<span class="hljs-comment">// 打开压缩后将生成的文件</span><br>        <span class="hljs-built_in">fwrite</span>((<span class="hljs-type">char</span> *)&amp;char_kinds, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>), <span class="hljs-number">1</span>, outfile);<span class="hljs-comment">// 写入字符种类</span><br>        <span class="hljs-built_in">fwrite</span>((<span class="hljs-type">char</span> *)&amp;tmp_nodes[<span class="hljs-number">0</span>].uch, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>), <span class="hljs-number">1</span>, outfile);<span class="hljs-comment">// 写入唯一的字符</span><br>        <span class="hljs-built_in">fwrite</span>((<span class="hljs-type">char</span> *)&amp;tmp_nodes[<span class="hljs-number">0</span>].weight, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>), <span class="hljs-number">1</span>, outfile);<span class="hljs-comment">// 写入字符频度，也就是文件长度</span><br>        <span class="hljs-built_in">free</span>(tmp_nodes);<br>        <span class="hljs-built_in">fclose</span>(outfile);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        node_num = <span class="hljs-number">2</span> * char_kinds - <span class="hljs-number">1</span>;<span class="hljs-comment">// 根据字符种类数，计算建立哈夫曼树所需结点数 </span><br>        huf_tree = (HufNode *)<span class="hljs-built_in">malloc</span>(node_num*<span class="hljs-built_in">sizeof</span>(HufNode));<span class="hljs-comment">// 动态建立哈夫曼树所需结点     </span><br>        <span class="hljs-comment">// 初始化前char_kinds个结点</span><br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; char_kinds; ++i)<br>        &#123;<br>            <span class="hljs-comment">// 将暂存结点的字符和频度拷贝到树结点</span><br>            huf_tree[i].uch = tmp_nodes[i].uch;<br>            huf_tree[i].weight = tmp_nodes[i].weight;<br>            huf_tree[i].parent = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-built_in">free</span>(tmp_nodes); <span class="hljs-comment">// 释放字符频度统计的暂存区</span><br>        <span class="hljs-comment">// 初始化后node_num-char_kins个结点</span><br>        <span class="hljs-keyword">for</span>(; i &lt; node_num; ++i)<br>            huf_tree[i].parent = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">CreateTree</span>(huf_tree, char_kinds, node_num);<span class="hljs-comment">// 创建哈夫曼树</span><br>        <span class="hljs-built_in">HufCode</span>(huf_tree, char_kinds);<span class="hljs-comment">// 生成哈夫曼编码</span><br>        <span class="hljs-comment">// 写入字符和相应权重，供解压时重建哈夫曼树</span><br>        outfile = <span class="hljs-built_in">fopen</span>(ofname, <span class="hljs-string">&quot;wb&quot;</span>);<span class="hljs-comment">// 打开压缩后将生成的文件</span><br>        <span class="hljs-built_in">fwrite</span>((<span class="hljs-type">char</span> *)&amp;char_kinds, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>), <span class="hljs-number">1</span>, outfile);<span class="hljs-comment">// 写入字符种类</span><br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; char_kinds; ++i)<br>        &#123;<br>            <span class="hljs-built_in">fwrite</span>((<span class="hljs-type">char</span> *)&amp;huf_tree[i].uch, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>), <span class="hljs-number">1</span>, outfile);<span class="hljs-comment">// 写入字符（已排序，读出后顺序不变）</span><br>            <span class="hljs-built_in">fwrite</span>((<span class="hljs-type">char</span> *)&amp;huf_tree[i].weight, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>), <span class="hljs-number">1</span>, outfile);<span class="hljs-comment">// 写入字符对应权重</span><br>        &#125;<br>        <span class="hljs-comment">// 紧接着字符和权重信息后面写入文件长度和字符编码</span><br>        <span class="hljs-built_in">fwrite</span>((<span class="hljs-type">char</span> *)&amp;file_len, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>), <span class="hljs-number">1</span>, outfile);<span class="hljs-comment">// 写入文件长度</span><br>        infile = <span class="hljs-built_in">fopen</span>(ifname, <span class="hljs-string">&quot;rb&quot;</span>);<span class="hljs-comment">// 以二进制形式打开待压缩的文件</span><br>        <span class="hljs-built_in">fread</span>((<span class="hljs-type">char</span> *)&amp;char_temp, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>), <span class="hljs-number">1</span>, infile);     <span class="hljs-comment">// 每次读取8bits</span><br>        <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">feof</span>(infile))<br>        &#123;<br>            <span class="hljs-comment">// 匹配字符对应编码</span><br>            <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; char_kinds; ++i)<br>                <span class="hljs-keyword">if</span>(char_temp == huf_tree[i].uch)<br>                    <span class="hljs-built_in">strcat</span>(code_buf, huf_tree[i].code);<br>            <span class="hljs-comment">// 以8位（一个字节长度）为处理单元</span><br>            <span class="hljs-keyword">while</span>(<span class="hljs-built_in">strlen</span>(code_buf) &gt;= <span class="hljs-number">8</span>)<br>            &#123;<br>                char_temp = <span class="hljs-string">&#x27;\0&#x27;</span>;<span class="hljs-comment">// 清空字符暂存空间，改为暂存字符对应编码</span><br>                <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; ++i)<br>                &#123;<br>                    char_temp &lt;&lt;= <span class="hljs-number">1</span>;<span class="hljs-comment">// 左移一位，为下一个bit腾出位置</span><br>                    <span class="hljs-keyword">if</span>(code_buf[i] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>                        char_temp = <span class="hljs-number">1</span>;<span class="hljs-comment">// 当编码为&quot;1&quot;，通过或操作符将其添加到字节的最低位</span><br>                &#125;<br>                <span class="hljs-built_in">fwrite</span>((<span class="hljs-type">char</span> *)&amp;char_temp, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>), <span class="hljs-number">1</span>, outfile);<span class="hljs-comment">// 将字节对应编码存入文件</span><br>                <span class="hljs-built_in">strcpy</span>(code_buf, code_buf+<span class="hljs-number">8</span>);<span class="hljs-comment">// 编码缓存去除已处理的前八位</span><br>            &#125;<br>            <span class="hljs-built_in">fread</span>((<span class="hljs-type">char</span> *)&amp;char_temp, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>), <span class="hljs-number">1</span>, infile);     <span class="hljs-comment">// 每次读取8bits</span><br>        &#125;<br>        <span class="hljs-comment">// 处理最后不足8bits编码</span><br>        code_len = <span class="hljs-built_in">strlen</span>(code_buf);<br>        <span class="hljs-keyword">if</span>(code_len &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            char_temp = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>            <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; code_len; ++i)<br>            &#123;<br>                char_temp &lt;&lt;= <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(code_buf[i] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>                    char_temp = <span class="hljs-number">1</span>;<br>            &#125;<br>            char_temp &lt;&lt;= <span class="hljs-number">8</span>-code_len;       <span class="hljs-comment">// 将编码字段从尾部移到字节的高位</span><br>            <span class="hljs-built_in">fwrite</span>((<span class="hljs-type">char</span> *)&amp;char_temp, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>), <span class="hljs-number">1</span>, outfile);       <span class="hljs-comment">// 存入最后一个字节</span><br>        &#125;<br>        <span class="hljs-comment">// 关闭文件</span><br>        <span class="hljs-built_in">fclose</span>(infile);<br>        <span class="hljs-built_in">fclose</span>(outfile);<br>        <span class="hljs-comment">// 释放内存</span><br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; char_kinds; ++i)<br>            <span class="hljs-built_in">free</span>(huf_tree[i].code);<br>        <span class="hljs-built_in">free</span>(huf_tree);<br>    &#125;<br>&#125;<span class="hljs-comment">//compress</span><br><br><span class="hljs-comment">// 解压函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">extract</span><span class="hljs-params">(<span class="hljs-type">char</span> *ifname, <span class="hljs-type">char</span> *ofname)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> file_len;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> writen_len = <span class="hljs-number">0</span>;<span class="hljs-comment">// 控制文件写入长度</span><br>    FILE *infile, *outfile;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> char_kinds;<span class="hljs-comment">// 存储字符种类</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> node_num;<br>    HufTree huf_tree;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> code_temp;<span class="hljs-comment">// 暂存8bits编码</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> root;<span class="hljs-comment">// 保存根节点索引，供匹配编码使用</span><br>    infile = <span class="hljs-built_in">fopen</span>(ifname, <span class="hljs-string">&quot;rb&quot;</span>);<span class="hljs-comment">// 以二进制方式打开压缩文件</span><br>    <span class="hljs-comment">// 判断输入文件是否存在</span><br>    <span class="hljs-keyword">if</span> (infile == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 读取压缩文件前端的字符及对应编码，用于重建哈夫曼树</span><br>    <span class="hljs-built_in">fread</span>((<span class="hljs-type">char</span> *)&amp;char_kinds, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>), <span class="hljs-number">1</span>, infile);     <span class="hljs-comment">// 读取字符种类数</span><br>    <span class="hljs-keyword">if</span> (char_kinds == <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">fread</span>((<span class="hljs-type">char</span> *)&amp;code_temp, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>), <span class="hljs-number">1</span>, infile);     <span class="hljs-comment">// 读取唯一的字符</span><br>        <span class="hljs-built_in">fread</span>((<span class="hljs-type">char</span> *)&amp;file_len, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>), <span class="hljs-number">1</span>, infile);     <span class="hljs-comment">// 读取文件长度</span><br>        outfile = <span class="hljs-built_in">fopen</span>(ofname, <span class="hljs-string">&quot;wb&quot;</span>);<span class="hljs-comment">// 打开压缩后将生成的文件</span><br>        <span class="hljs-keyword">while</span> (file_len--)<br>            <span class="hljs-built_in">fwrite</span>((<span class="hljs-type">char</span> *)&amp;code_temp, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>), <span class="hljs-number">1</span>, outfile);<br>        <span class="hljs-built_in">fclose</span>(infile);<br>        <span class="hljs-built_in">fclose</span>(outfile);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        node_num = <span class="hljs-number">2</span> * char_kinds - <span class="hljs-number">1</span>;<span class="hljs-comment">// 根据字符种类数，计算建立哈夫曼树所需结点数 </span><br>        huf_tree = (HufNode *)<span class="hljs-built_in">malloc</span>(node_num*<span class="hljs-built_in">sizeof</span>(HufNode));<span class="hljs-comment">// 动态分配哈夫曼树结点空间</span><br>        <span class="hljs-comment">// 读取字符及对应权重，存入哈夫曼树节点</span><br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; char_kinds; ++i)<br>        &#123;<br>            <span class="hljs-built_in">fread</span>((<span class="hljs-type">char</span> *)&amp;huf_tree[i].uch, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>), <span class="hljs-number">1</span>, infile);<span class="hljs-comment">// 读入字符</span><br>            <span class="hljs-built_in">fread</span>((<span class="hljs-type">char</span> *)&amp;huf_tree[i].weight, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>), <span class="hljs-number">1</span>, infile);<span class="hljs-comment">// 读入字符对应权重</span><br>            huf_tree[i].parent = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-comment">// 初始化后node_num-char_kins个结点的parent</span><br>        <span class="hljs-keyword">for</span>(; i &lt; node_num; ++i)<br>            huf_tree[i].parent = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">CreateTree</span>(huf_tree, char_kinds, node_num);<span class="hljs-comment">// 重建哈夫曼树（与压缩时的一致）</span><br>        <span class="hljs-comment">// 读完字符和权重信息，紧接着读取文件长度和编码，进行解码</span><br>        <span class="hljs-built_in">fread</span>((<span class="hljs-type">char</span> *)&amp;file_len, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>), <span class="hljs-number">1</span>, infile);<span class="hljs-comment">// 读入文件长度</span><br>        outfile = <span class="hljs-built_in">fopen</span>(ofname, <span class="hljs-string">&quot;wb&quot;</span>);<span class="hljs-comment">// 打开压缩后将生成的文件</span><br>        root = node_num<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">fread</span>((<span class="hljs-type">char</span> *)&amp;code_temp, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>), <span class="hljs-number">1</span>, infile);<span class="hljs-comment">// 读取一个字符长度的编码</span><br>            <span class="hljs-comment">// 处理读取的一个字符长度的编码（通常为8位）</span><br>            <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; ++i)<br>            &#123;<br>            <span class="hljs-comment">// 由根向下直至叶节点正向匹配编码对应字符</span><br>                <span class="hljs-keyword">if</span>(code_temp &amp; <span class="hljs-number">128</span>)<br>                    root = huf_tree[root].rchild;<br>                <span class="hljs-keyword">else</span><br>                    root = huf_tree[root].lchild;<br>                <span class="hljs-keyword">if</span>(root &lt; char_kinds)<br>                &#123;<br>                    <span class="hljs-built_in">fwrite</span>((<span class="hljs-type">char</span> *)&amp;huf_tree[root].uch, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>), <span class="hljs-number">1</span>, outfile);<br>                    ++writen_len;<br>                    <span class="hljs-keyword">if</span> (writen_len == file_len) <span class="hljs-keyword">break</span>;<span class="hljs-comment">// 控制文件长度，跳出内层循环</span><br>                    root = node_num<span class="hljs-number">-1</span>;        <span class="hljs-comment">// 复位为根索引，匹配下一个字符</span><br>                &#125;<br>                code_temp &lt;&lt;= <span class="hljs-number">1</span>;<span class="hljs-comment">// 将编码缓存的下一位移到最高位，供匹配</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (writen_len == file_len) <span class="hljs-keyword">break</span>;<span class="hljs-comment">// 控制文件长度，跳出外层循环</span><br>        &#125;<br>        <span class="hljs-comment">// 关闭文件</span><br>        <span class="hljs-built_in">fclose</span>(infile);<br>        <span class="hljs-built_in">fclose</span>(outfile);<br>        <span class="hljs-comment">// 释放内存</span><br>        <span class="hljs-built_in">free</span>(huf_tree);<br>    &#125;<br>&#125;<span class="hljs-comment">//extract()</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;朱安杰 194020215\n&quot;</span>);<br>        <span class="hljs-type">int</span> opt, flag  = <span class="hljs-number">0</span>;<span class="hljs-comment">// 每次进入循环都要初始化flag为0</span><br>        <span class="hljs-type">char</span> ifname[<span class="hljs-number">256</span>], ofname[<span class="hljs-number">256</span>];<span class="hljs-comment">// 保存输入输出文件名</span><br>        <span class="hljs-comment">// 输入所选择操作类型的数字代号：1：压缩，2：解压，3：退出</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入操作所对应的数字:\n 1: 压缩\n 2: 解压\n 3: 退出\n&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;opt);<br>        <span class="hljs-keyword">if</span> (opt == <span class="hljs-number">3</span>)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入输入文件名: &quot;</span>);<br>            <span class="hljs-built_in">fflush</span>(stdin);<span class="hljs-comment">// 清空标准输入流，防止干扰gets函数读取文件名</span><br>            <span class="hljs-built_in">gets</span>(ifname);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入输出文件名: &quot;</span>);<br>            <span class="hljs-built_in">fflush</span>(stdin);<br>            <span class="hljs-built_in">gets</span>(ofname);<br>        &#125;<br>        <span class="hljs-keyword">switch</span>(opt)<br>        &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;压缩中……\n&quot;</span>);<br>                flag = <span class="hljs-built_in">compress</span>(ifname, ofname);<span class="hljs-comment">// 压缩，返回值用于判断是否文件名不存在</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;解压中……\n&quot;</span>);<br>                flag = <span class="hljs-built_in">extract</span>(ifname, ofname);<span class="hljs-comment">// 解压，返回值用于判断是否文件名不存在</span><br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;抱歉, 文件 \&quot;%s\&quot; 不存在!\n&quot;</span>, ifname);<span class="hljs-comment">// 如果标志为&#x27;-1&#x27;则输入文件不存在</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;操作完成!\n&quot;</span>);<span class="hljs-comment">// 操作完成</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>在霍夫曼编码这个实验中，我们需要将输入的任意一个源，运用Huffman编码压缩技术进行压缩，除此之外，我们还需要将压缩好的文件还原为原来的文件（即解压）。既然需要用哈夫曼编码解决问题，首先我们需将文件中出现的字符以及它们出现的次数写入配置文件中，构建哈夫曼树，而在构建哈夫曼树时，需要选出所给数据中最小的两个一步步的搭建，这是此次实验中要解决的一个问题之一。建好Huffman树后，要根据“左0右1”的方法对树进行编码，在这两个过程中，需要把文件当做“符号”来看待，“符号”确定为多少个也是值得思考的问题。做好哈夫曼树的构建以及哈夫曼编码后，我们需要在压缩文件中按顺序存入每个字符的Huffman编码对文件进行压缩。对于解压缩，我们需要利用配置文件重构Huffman树，那么这棵树如何重构也是有待于解决的。最后就是用主函数调用所有函数完成整个过程了，当然在主函数里，我们还需要利用分支来区分到底是压缩还是解压缩文件，有利于用户的选择。通过编写与学习huffman编码压缩与解压文件，我更清楚的认识了huffma编码的具体压缩程度，与压缩在实际之中的用法。也会在接下来的学习中有更多的思路。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>区间调度IntervalScheduling</title>
      <link href="/2021/05/25/intervalscheduling/"/>
      <url>/2021/05/25/intervalscheduling/</url>
      
        <content type="html"><![CDATA[<h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> _count[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>]; <span class="hljs-comment">//构造最优矩阵</span><br><span class="hljs-type">int</span> p[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> numbers[<span class="hljs-number">100</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-type">int</span> start[], <span class="hljs-type">int</span> finish[],<span class="hljs-type">int</span> TASK_COUNT)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">2</span>; len &lt;= TASK_COUNT + <span class="hljs-number">2</span>; len++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> begin = <span class="hljs-number">0</span>; begin &lt;= TASK_COUNT + <span class="hljs-number">1</span>; begin++) &#123;<br>            <span class="hljs-type">int</span> end = begin + len - <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> max = <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> slice = <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> k;<br>            <span class="hljs-keyword">for</span> (k = begin + <span class="hljs-number">1</span>; k &lt;= end - <span class="hljs-number">1</span>; k++) &#123;<br>                <span class="hljs-keyword">if</span> (start[k] &gt;= finish[begin]&amp;&amp;finish[k]&lt;=start[end]) &#123;<br>                    <span class="hljs-type">int</span> temp = _count[begin][k] + _count[k][end] + <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">if</span> (temp &gt; max) &#123;<br>                        max = temp;<br>                        slice = k;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            p[begin][end] = slice;<br>            _count[begin][end] = max;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printDp</span><span class="hljs-params">( <span class="hljs-type">int</span> begin, <span class="hljs-type">int</span> end)</span> </span>&#123;<br>    <span class="hljs-type">int</span> pos = p[begin][end];<br>    <span class="hljs-keyword">if</span> (pos == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>;<br>    cout &lt;&lt; numbers[pos] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-built_in">printDp</span>(begin, pos);<br>    <span class="hljs-built_in">printDp</span>(pos, end);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; vfinish;<br>    vector&lt;<span class="hljs-type">int</span>&gt; vstart;<br>    <span class="hljs-comment">//插入数组前置数值-1</span><br>    vstart.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">-1</span>);<br>    vfinish.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">-1</span>);<br>    <span class="hljs-type">int</span> number;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请分别输入各个事件的开始跟结束时间：&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br>        cin &gt;&gt; number;<br>        vstart.<span class="hljs-built_in">push_back</span>(number);<br>        cin &gt;&gt; number;<br>        vfinish.<span class="hljs-built_in">push_back</span>(number);<br>        <span class="hljs-keyword">if</span> (cin.<span class="hljs-built_in">get</span>() == <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-comment">//插入数组后置数值255</span><br>    vstart.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">255</span>);<br>    vfinish.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">255</span>);<br>    <span class="hljs-type">int</span> *start = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[vstart.<span class="hljs-built_in">size</span>()];<br>    <span class="hljs-keyword">if</span> (!vstart.<span class="hljs-built_in">empty</span>())<br>        <span class="hljs-built_in">memcpy</span>(start, &amp;vstart[<span class="hljs-number">0</span>], vstart.<span class="hljs-built_in">size</span>()*<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-type">int</span> *finish = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[vfinish.<span class="hljs-built_in">size</span>()];<br>    <span class="hljs-keyword">if</span> (!vfinish.<span class="hljs-built_in">empty</span>())<br>        <span class="hljs-built_in">memcpy</span>(finish, &amp;vfinish[<span class="hljs-number">0</span>], vfinish.<span class="hljs-built_in">size</span>()*<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-type">int</span> TASK_COUNT = vstart.<span class="hljs-built_in">size</span>()<span class="hljs-number">-2</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;vstart.<span class="hljs-built_in">size</span>();i++)<br>        numbers[i]=i;<br>    cout &lt;&lt; <span class="hljs-string">&quot;图例如下：&quot;</span> &lt;&lt; endl; <span class="hljs-comment">//输出图示</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= TASK_COUNT; i++) &#123;<br>        cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;:&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; start[i]; j++) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;  &quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = start[i]; j &lt; finish[i]; j++)<br>            cout &lt;&lt; <span class="hljs-string">&quot;■&quot;</span>;<br>        cout &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;TASK_COUNT+<span class="hljs-number">2</span>;i++)&#123;<span class="hljs-comment">//按照结束时间排序</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;TASK_COUNT+<span class="hljs-number">1</span>;j++)&#123;<br>            <span class="hljs-keyword">if</span>(finish[j]&gt;finish[j+<span class="hljs-number">1</span>])&#123;<br>                std::<span class="hljs-built_in">swap</span>(finish[j],finish[j+<span class="hljs-number">1</span>]);<br>                std::<span class="hljs-built_in">swap</span>(start[j],start[j+<span class="hljs-number">1</span>]);<br>                std::<span class="hljs-built_in">swap</span>(numbers[j],numbers[j+<span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= TASK_COUNT + <span class="hljs-number">2</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= TASK_COUNT + <span class="hljs-number">2</span>; j++) &#123;<br>            _count[i][j] = <span class="hljs-number">0</span>;<br>            p[i][j] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">dp</span>(start, finish, TASK_COUNT);<br>    cout &lt;&lt; <span class="hljs-string">&quot;总共可完成的事件个数为：&quot;</span> &lt;&lt; _count[<span class="hljs-number">0</span>][TASK_COUNT + <span class="hljs-number">1</span>] &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;完成的事件为：&quot;</span>;<br>    <span class="hljs-built_in">printDp</span>(<span class="hljs-number">0</span>, TASK_COUNT + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>区间调度的实验采用了结束时间先后为顺序排序。按照排序依次比较看事件是否匹配，如果匹配则加入。贪心算法，优先选择最早结束的需求，确保资源尽可能早地被释放，把留下来满足其他需求的时间最大化。具体伪代码如下所示，算法结束后集合A中会保留所有相容请求，A的大小即是最大相容数量。Aijj为Sij最优解，另其中的任务按照结束时间递增排序,令ak是Aij的第一个结束的任务,如果ak=am,则证明成立。否则我们将ak用am替换，则它成为了另一个解A’ij，同样是最优解。所以即将任务以结束时间递增排序，第一个结束的任务一定在最优解中，依次找出子问题中最先结束，且开始时间在前一个解最后一个任务结束之间之后。复杂度为O(n)。同时很容易得出有递归和递推两种形式，一般采用递推。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TODO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序QuickSort</title>
      <link href="/2021/05/25/quicksort/"/>
      <url>/2021/05/25/quicksort/</url>
      
        <content type="html"><![CDATA[<h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//快速排序算法(从小到大)</span><br><span class="hljs-comment">//arr:需要排序的数组，begin:需要排序的区间左边界，end:需要排序的区间的右边界</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QuickSort</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr,<span class="hljs-type">int</span> begin,<span class="hljs-type">int</span> end)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//如果区间不只一个数</span><br>    <span class="hljs-keyword">if</span>(begin &lt; end)&#123;<br>        <span class="hljs-type">int</span> temp = arr[begin]; <span class="hljs-comment">//将区间的第一个数作为基准数</span><br>        <span class="hljs-type">int</span> i = begin; <span class="hljs-comment">//从左到右进行查找时的“指针”，指示当前左位置</span><br>        <span class="hljs-type">int</span> j = end; <span class="hljs-comment">//从右到左进行查找时的“指针”，指示当前右位置</span><br><span class="hljs-comment">//不重复遍历</span><br>        <span class="hljs-keyword">while</span>(i &lt; j)&#123;<br><span class="hljs-comment">//当右边的数大于基准数时，略过，继续向左查找</span><br><span class="hljs-comment">//不满足条件时跳出循环，此时的j对应的元素是小于基准元素的</span><br>            <span class="hljs-keyword">while</span>(i&lt;j &amp;&amp; arr[j] &gt; temp)&#123;<br>                j--;<br>            &#125;<br><span class="hljs-comment">//将右边小于等于基准元素的数填入右边相应位置</span><br>            arr[i] = arr[j];<br>            <span class="hljs-comment">//当左边的数小于等于基准数时，略过，继续向右查找</span><br>            <span class="hljs-comment">//(重复的基准元素集合到左区间)</span><br>            <span class="hljs-comment">//不满足条件时跳出循环，此时的i对应的元素是大于等于基准元素的</span><br>            <span class="hljs-keyword">while</span>(i&lt;j &amp;&amp; arr[i] &lt;= temp)&#123;<br>                i++;<br>            &#125;<br>            <span class="hljs-comment">//将左边大于基准元素的数填入左边相应位置</span><br>            arr[j] = arr[i];<br>        &#125;<br><span class="hljs-comment">//将基准元素填入相应位置</span><br>        arr[i] = temp;<br>        <span class="hljs-comment">//此时的i即为基准元素的位置</span><br>        <span class="hljs-comment">//对基准元素的左边子区间进行相似的快速排序</span><br>        <span class="hljs-built_in">QuickSort</span>(arr,begin,i<span class="hljs-number">-1</span>);<br>        <span class="hljs-comment">//对基准元素的右边子区间进行相似的快速排序</span><br>        <span class="hljs-built_in">QuickSort</span>(arr,i+<span class="hljs-number">1</span>,end);<br>    &#125;<br>    <span class="hljs-comment">//如果区间只有一个数，则返回</span><br>    <span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//定义容器num存入原始数据 </span><br>    vector&lt;<span class="hljs-type">int</span>&gt; num;<span class="hljs-comment">//定义一个vector数组array</span><br>    <span class="hljs-type">int</span> number;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        cin &gt;&gt; number;<br>        num.<span class="hljs-built_in">push_back</span>(number);<span class="hljs-comment">//每输入一个数字就把它添加到数组的最后</span><br>        <span class="hljs-keyword">if</span> (cin.<span class="hljs-built_in">get</span>() == <span class="hljs-string">&#x27;\n&#x27;</span>)&#123;<span class="hljs-comment">//如果是回车符则跳出循环</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> n = num.<span class="hljs-built_in">size</span>();<span class="hljs-comment">//返回数组长度为len</span><br><span class="hljs-comment">//将容器转换为int数组buffer </span><br>    <span class="hljs-type">int</span> *buffer = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[num.<span class="hljs-built_in">size</span>()];<br>    <span class="hljs-keyword">if</span> (!num.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-built_in">memcpy</span>(buffer, &amp;num[<span class="hljs-number">0</span>], num.<span class="hljs-built_in">size</span>()*<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>    &#125;<br><span class="hljs-comment">//将数组参与排序 </span><br>    <span class="hljs-built_in">QuickSort</span>(buffer,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;排序后的数组为：&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//输出数组 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cout &lt;&lt; buffer[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>读取数组定义了一个vactor容器num，将数值存入容器后再将容器转换为普通数组buffer。函数排序定义了一个快速排序函数QuickSort，需要主函数的数组buffer，数组需要参与排序的第一个数字的下标，数组需要参与排序的最后一个数字的下标。在QuickSort函数中如果区间中不止一个数字，将区间的一个数作为基准数，定义从左到右进行查找时的“指针”i，指示当前左位置，定义从右到左进行查找时的“指针”j，指示当前右位置。当右边的数大于基准数时，略过，继续向左查找，不满足条件时跳出循环，此时的j对应的元素是小于基准元素的。在循环中将右边小于等于基准元素的数填入右边相应位置，当左边的数小于等于基准数时，略过，继续向右查找(重复的基准元素集合到左区间)不满足条件时跳出循环，此时的i对应的元素是大于等于基准元素的。将左边大于基准元素的数填入左边相应位置。然后将基准元素填入相应位置。最后，对基准元素的左边和右边子区间进行相似的快速排序。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>稳定匹配StableMaching</title>
      <link href="/2021/05/25/stablemaching/"/>
      <url>/2021/05/25/stablemaching/</url>
      
        <content type="html"><![CDATA[<h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 10      <span class="hljs-comment">//医院学生最多为MAX个 </span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> hospital_num, student_num;    <span class="hljs-comment">//医院学生的个数，需要输入 </span><br>    <span class="hljs-type">int</span> HospitalPref[MAX][MAX], StudentPref[MAX][MAX];     <span class="hljs-comment">//喜欢序列，需要输入（用数字表示医院学生） </span><br>    <span class="hljs-type">int</span> HospitalInverse[MAX][MAX], StudentInverse[MAX][MAX];<br>    <span class="hljs-type">int</span> confernstudent[MAX], confernhospital[MAX];    <span class="hljs-comment">//表示各个配对 </span><br>    <span class="hljs-type">int</span> count[MAX];    <span class="hljs-comment">// count[m]表示m提出配对的次数 </span><br>    queue&lt;<span class="hljs-type">int</span>&gt; FreeHospitals;   <span class="hljs-comment">// 表示未被配对的医院 </span><br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入医院或学生的总数：&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; hospital_num;<br>    student_num = hospital_num;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; hospital_num; i++)&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;请输入第&quot;</span> &lt;&lt; i+<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;个医院的喜好排序&quot;</span> &lt;&lt; endl;<br>        FreeHospitals.<span class="hljs-built_in">push</span>(i);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; student_num; j++)&#123;<br>            cin &gt;&gt; HospitalPref[i][j];<br>            HospitalPref[i][j]--;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; student_num; i++)&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;请输入第&quot;</span> &lt;&lt; i+<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;个学生的喜好排序&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; hospital_num; j++)&#123;<br>            cin &gt;&gt; StudentPref[i][j];<br>            StudentPref[i][j]--;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; hospital_num; i++)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; student_num; j++)&#123;<br>            HospitalInverse[i][HospitalPref[i][j]] = j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; student_num; i++)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; hospital_num; j++)&#123;<br>            StudentInverse[i][StudentPref[i][j]] = j;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//初始化每个医院和学生的状态，并将每个医院提出配对的次数赋值成0 </span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; hospital_num; i++)&#123;<br>        confernstudent[i] = <span class="hljs-number">-1</span>;<br>        confernhospital[i] = <span class="hljs-number">-1</span>;<br>        count[i] = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 当FreeHospitals的队列为空时结束循环 </span><br>    <span class="hljs-keyword">while</span>(FreeHospitals.<span class="hljs-built_in">size</span>() != <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// 取出队列中的第一个医院，hospital代表该医院的序号 </span><br>        <span class="hljs-type">int</span> hospital = FreeHospitals.<span class="hljs-built_in">front</span>();<br>        <span class="hljs-comment">// 医院按照自己的喜欢序列降序对学生提出配对直到医院被配对 </span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = count[hospital]; i &lt; student_num; count[hospital]++, i++)&#123;<br>            <span class="hljs-comment">// 如果这个学生未被配对 </span><br>            <span class="hljs-keyword">if</span> (confernstudent[HospitalPref[hospital][i]] == <span class="hljs-number">-1</span>)&#123;<br>                confernstudent[HospitalPref[hospital][i]] = hospital;<br>                confernhospital[hospital] = HospitalPref[hospital][i];   <span class="hljs-comment">//将医院学生配对 </span><br>                FreeHospitals.<span class="hljs-built_in">pop</span>();   <span class="hljs-comment">// 将该医院从队列删除 </span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>                <span class="hljs-comment">// 如果学生较之已配对医院更喜欢这个医院 </span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StudentInverse[hospital] &lt; StudentInverse[confernstudent[HospitalPref[hospital][i]]])&#123;<br>                FreeHospitals.<span class="hljs-built_in">push</span>(confernstudent[HospitalPref[hospital][i]]); <span class="hljs-comment">//将原配对医院加入未配对医院队列 </span><br>                confernhospital[confernstudent[HospitalPref[hospital][i]]] = <span class="hljs-number">-1</span>; <span class="hljs-comment">//将医院的状态设置成未配对</span><br>                <span class="hljs-comment">//（也可以不用设置） </span><br>                confernstudent[HospitalPref[hospital][i]] = hospital;<br>                confernhospital[hospital] = HospitalPref[hospital][i];       <span class="hljs-comment">//重新配对 </span><br>                FreeHospitals.<span class="hljs-built_in">pop</span>();  <span class="hljs-comment">// 将该医院从队列删除  </span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>                <span class="hljs-comment">// 否则学生拒绝医院的配对 </span><br>            <span class="hljs-keyword">else</span> &#123;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; hospital_num; i++)&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;医院&quot;</span> &lt;&lt; i+<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;-----学生&quot;</span> &lt;&lt; confernhospital[i]+<span class="hljs-number">1</span> &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>稳定匹配算法的实现我采用的是c++语言。在程序中，将医院与学生的喜好和医院与学生实际的匹配结果分别建立了四个二维数组；定义了配对次数和一个表示未配对医院的线性表。<br>程序首先读取医院（学生）的总数，再依次读取每个医院和学生的喜好排序，然后初始化每个医院和学生的状态，并将每个医院提出配对的次数赋值成0。进入循环依次取出队列中的第一个医院， 医院按照自己的喜欢序列降序对学生提出配对直到医院被配对，如果这个学生未被配对，将医院学生配对，将该医院从队列删除，如果学生较之已配对医院更喜欢这个医院，则将原配对医院加入未配对医院队列且医院的状态设置成未配对。待FreeHospitals的队列为空时结束循环后输出匹配结果。<br>程序使用了线性表queue，相比于数组而言大大缩短了运行所需时间。然而，在这样的场景中G-S匹配并不是公平的，由于每次迭代按照M中递减偏好尝试匹配，它是一种偏向于M节点的算法。算法产出的稳态匹配结果，所有的学校都匹配了尽可能好好的结果，而所有学生都匹配了尽可能不好的结果。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法分析与设计大作业——截止日期</title>
      <link href="/2021/05/20/deadline/"/>
      <url>/2021/05/20/deadline/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a><strong>问题描述：</strong></h2><p>某学科老师布置了n个题目，每个题目都有相应的分数及截止日期。各个题目的分数及截止日期可能并不相同。对某题目而言，如果在该题目的截止日期前完成则可获得对应的分数，否则无法得分。假设每个题目均需要花费一天的时间来完成，这期间无法完成其他题目。请你设计算法指定题目的完成计划，从而使总的得分最大。 下面给出一个包含了7个题目及相应的分数、截止日期的实例：  </p><table><thead><tr><th align="center">题目</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th></tr></thead><tbody><tr><td align="center">分数</td><td align="center">6</td><td align="center">7</td><td align="center">2</td><td align="center">1</td><td align="center">4</td><td align="center">5</td><td align="center">1</td></tr><tr><td align="center">截止日期（天）</td><td align="center">1</td><td align="center">1</td><td align="center">3</td><td align="center">3</td><td align="center">2</td><td align="center">2</td><td align="center">4</td></tr></tbody></table><p>对该实例而言，得分最大的作业完成方案为花费4天时间依次完成题目2,6,3,7。得分为15。</p><p><strong>【输入形式】</strong></p><p>输入数据第一行为一个整数n (0 &lt;= n &lt;= 10000), 表示题目数目 之后n行各有两个整数, 第i行为 pi, di (1 &lt;= pi, di &lt;= 10000)，分别表示第i个题目的分数和截止时间</p><p><strong>【输出形式】</strong></p><p>一个整数, 为当前条件下的最大得分 </p><p><strong>【样例输入】</strong></p><p>4<br>50 2<br>10 1<br>20 2<br>30 1 </p><p><strong>【样例输出】</strong></p><p>80</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a><strong>分析</strong></h2><p>本题适合用贪心算法来求解，先按照任务价值从大到小排序，然后依次取出后对任务进行判断。如果取出任务截至当天未被占用，则将该任务价值加入总价值后将当天标记为占用。如果之前判断的时间被占用，则往前推算一天后再进行判断。</p><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a><strong>伪代码</strong></h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">对于i = <span class="hljs-number">0</span> ~ n&#123;<br>如果任务i截止日期当天没有被占用&#123;<br>    结果加上第i个任务的分数<br>    任务i截止日期当天标记为已被占用;<br>&#125;<br>如果任务截止日期当天被占用&#123;<br>    对于<span class="hljs-keyword">j </span>= 任务i截止日期-<span class="hljs-number">1</span> ~ <span class="hljs-number">0</span>)&#123;<br>        如果第<span class="hljs-keyword">j天被占用&#123;</span><br><span class="hljs-keyword"></span>            结果加上第i个任务的分数<br>            第<span class="hljs-keyword">j天标记为已被占用</span><br><span class="hljs-keyword"></span>            跳出循环<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="代码（JAVA1）"><a href="#代码（JAVA1）" class="headerlink" title="代码（JAVA1）"></a><strong>代码（JAVA1）</strong></h2><h3 id="deadline类："><a href="#deadline类：" class="headerlink" title="deadline类："></a>deadline类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">deadline</span> &#123;<br>    <span class="hljs-type">int</span> score;<br>    <span class="hljs-type">int</span> day;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">deadline</span><span class="hljs-params">(<span class="hljs-type">int</span> score,<span class="hljs-type">int</span> day)</span> &#123;<br>        <span class="hljs-built_in">this</span>.score = score;<br>        <span class="hljs-built_in">this</span>.day = day;<br>        &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="test类："><a href="#test类：" class="headerlink" title="test类："></a>test类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Sort</span><span class="hljs-params">(deadline[] overdays)</span> &#123;<br>        Arrays.sort(overdays, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span> &lt; deadline &gt; () &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(deadline o1, deadline o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)(o2.getScore() - o1.score);<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">int</span> n, a, b, number = <span class="hljs-number">0</span>, count = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        n = input.nextInt();<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;0&quot;</span>);<br><br>        &#125;<br>        deadline[] overdays = <span class="hljs-keyword">new</span> <span class="hljs-title class_">deadline</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            overdays[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">deadline</span>(input.nextInt(), input.nextInt());<br>        &#125;<br>        input.close();<br>        Sort(overdays);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> overdays[<span class="hljs-number">0</span>].day;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (max &lt; overdays[i].day)<br>                max = overdays[i].day;<br>        &#125;<br>        <span class="hljs-type">int</span>[] days = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[max + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= max; i++)<br>            days[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (days[overdays[i].day] == <span class="hljs-number">1</span>) &#123;<br>                number += overdays[i].score;<br>                days[overdays[i].day] = <span class="hljs-number">0</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> overdays[i].day - <span class="hljs-number">1</span>; j &gt; <span class="hljs-number">0</span>; j--) &#123;<br>                    <span class="hljs-keyword">if</span> (days[j] == <span class="hljs-number">1</span>) &#123;<br>                        number += overdays[i].score;<br>                        days[j] = <span class="hljs-number">0</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(number);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码（JAVA2）"><a href="#代码（JAVA2）" class="headerlink" title="代码（JAVA2）"></a>代码（JAVA2）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">deadline</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxinarr</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> len)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> a[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            <span class="hljs-keyword">if</span> (max &lt; a[i])<br>                max = a[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swaparr</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> b[], <span class="hljs-type">int</span> len)</span> &#123;<br>        <span class="hljs-type">int</span> k;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; len - <span class="hljs-number">1</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (a[j] &lt; a[j + <span class="hljs-number">1</span>]) &#123;<br>                    k = a[j];<br>                    a[j] = a[j + <span class="hljs-number">1</span>];<br>                    a[j + <span class="hljs-number">1</span>] = k;<br>                    k = b[j];<br>                    b[j] = b[j + <span class="hljs-number">1</span>];<br>                    b[j + <span class="hljs-number">1</span>] = k;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> day[], <span class="hljs-type">int</span> data[], <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> data[n] - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> (day[i] == <span class="hljs-number">0</span>) &#123;<br>                day[i] = <span class="hljs-number">1</span>;<br>                ret = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> n;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        n = input.nextInt();<br>        <span class="hljs-type">int</span>[] score = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n]; <span class="hljs-comment">//成绩 </span><br>        <span class="hljs-type">int</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n]; <span class="hljs-comment">//截止日期 </span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            score[i] = input.nextInt();<br>            data[i] = input.nextInt();<br>        &#125;<br>        input.close();<br>        swaparr(score, data, n);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> maxinarr(data, n);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">allscore</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span>[] day = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[a]; <span class="hljs-comment">//每天任务情况</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a; i++) &#123;<br>            day[i] = <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (judge(day, data, i)) &#123;<br>                allscore += score[i];<br>                a--;<br>                <span class="hljs-keyword">if</span> (a == -<span class="hljs-number">1</span>)<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        System.out.println(allscore);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码（C-1）"><a href="#代码（C-1）" class="headerlink" title="代码（C++1）"></a>代码（C++1）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//定义结构体用来存放题目分数及截止日期</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sdata</span>&#123;<br>    <span class="hljs-type">int</span> score;<br>    <span class="hljs-type">int</span> deadline;<br>&#125;;<br><br><span class="hljs-comment">//用来给结构体内数据按照成绩排序 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">arrSort</span><span class="hljs-params">(sdata* pData, <span class="hljs-type">int</span> length)</span></span>&#123;<br>    sdata temp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; length<span class="hljs-number">-1</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span> (pData[j].score &lt; pData[j+<span class="hljs-number">1</span>].score)&#123;<br>                temp = pData[j];<br>                pData[j] = pData[j+<span class="hljs-number">1</span>];<br>                pData[j+<span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,a,b;<br>    <span class="hljs-type">int</span> answer = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br><br>    cin &gt;&gt; n;<br><span class="hljs-comment">//输入值n总天数如果为0则不需要计算 </span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;0&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    sdata *Data = <span class="hljs-keyword">new</span> sdata[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        cin &gt;&gt; a;<br>        cin &gt;&gt; b;<br><span class="hljs-comment">//如果题目分数或者截止日期存在0，则该条数据无效 </span><br>        <span class="hljs-keyword">if</span>(a*b==<span class="hljs-number">0</span>)&#123;<br>            x++;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        Data[i].score=a; Data[i].deadline=b;<br>    &#125;<br>    n -= x;<br><br><span class="hljs-comment">//排序 </span><br>    <span class="hljs-built_in">arrSort</span>(Data, n);<br><span class="hljs-comment">//寻需要最大时间的任务的天数max </span><br>    <span class="hljs-type">int</span> max=Data[<span class="hljs-number">0</span>].deadline;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(max&lt;Data[i].deadline)<br>            max=Data[i].deadline;<br>    &#125;<br><br><span class="hljs-comment">//根据max定义并且初始化时间表 </span><br>    <span class="hljs-type">int</span> schedule[max+<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= max; i++)<br>        schedule[i]=<span class="hljs-number">1</span>;<br><br><span class="hljs-comment">//计算过程（根据分数从大到小遍历每个任务） </span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br><span class="hljs-comment">//如果任务截止日期当天没有被占用 </span><br>        <span class="hljs-keyword">if</span>(schedule[Data[i].deadline]==<span class="hljs-number">1</span>)&#123;<br>            answer += Data[i].score;<br>            schedule[Data[i].deadline]=<span class="hljs-number">0</span>;<br>        &#125;<br><span class="hljs-comment">//如果任务截止日期当天被占用</span><br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=Data[i].deadline<span class="hljs-number">-1</span>;j&gt;<span class="hljs-number">0</span>;j--)&#123;<br>                <span class="hljs-keyword">if</span>(schedule[j]==<span class="hljs-number">1</span>)&#123;<br>                    answer+=Data[i].score;<br>                    schedule[j]=<span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>    cout &lt;&lt; answer;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="代码（C-2）"><a href="#代码（C-2）" class="headerlink" title="代码（C++2）"></a>代码（C++2）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//将两个数组按照前面数组的降序排列(数组a，数组b，数组长度len)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swaparr</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> b[], <span class="hljs-type">int</span> len)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;len<span class="hljs-number">-1</span>;j++)&#123;<br>            <span class="hljs-keyword">if</span>(a[j]&lt;a[j+<span class="hljs-number">1</span>])&#123;<br>                <span class="hljs-built_in">swap</span>(a[j],a[j+<span class="hljs-number">1</span>]);<br>                <span class="hljs-built_in">swap</span>(b[j],b[j+<span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//寻找数组中数字最大值(数组a，数组a长度len) </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxinarr</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> len)</span></span>&#123;<br>    <span class="hljs-type">int</span> max = a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>        <span class="hljs-keyword">if</span>(max&lt;a[i])<br>            max = a[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> max;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> day[], <span class="hljs-type">int</span> data[], <span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-type">bool</span> ret=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=data[n]<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        <span class="hljs-keyword">if</span>(day[i]==<span class="hljs-number">0</span>)&#123;<br>            day[i]=<span class="hljs-number">1</span>;<br>            ret = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> score[n];<span class="hljs-comment">//成绩 </span><br>    <span class="hljs-type">int</span> data[n];<span class="hljs-comment">//截止日期 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin &gt;&gt; score[i];<br>        cin &gt;&gt; data[i];<br>    &#125;<br>    <span class="hljs-built_in">swaparr</span>(score, data, n);<br>    <span class="hljs-type">int</span> a=<span class="hljs-built_in">maxinarr</span>(data,n);<br>    <span class="hljs-type">int</span> allscore=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> day[a];<span class="hljs-comment">//每天任务情况</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a;i++)&#123;<br>        day[i]=<span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(day,data,i))&#123;<br>            allscore += score[i];<br>            a--;<br>            <span class="hljs-keyword">if</span>(a==<span class="hljs-number">-1</span>)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; allscore;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="算法正确性分析"><a href="#算法正确性分析" class="headerlink" title="算法正确性分析"></a><strong>算法正确性分析</strong></h2><p>本算法对规定范围下不同的输入数据能够得出满足要求的结构，对于精心选择的典型、苛刻而带有刁难性的输入数据能够得出满足要求的结果，对于一切合法的输入数据都产生满足要求的结果。<br>对于核心算法，先按照任务价值从大到小排序，然后依次取出后对任务进行判断。如果取出任务截至当天未被占用，则将该任务价值加入总价值后将当天标记为占用。如果取出任务截止当天被占用，则往前推算一天进行判断。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>本题采用贪心算法，通过这次学习，我了解到贪心算法需要建立数学模型来描述问题；把求解的问题分成若干个子问题；对每一子问题求解，得到子问题的局部最优解；把子问题的解局部最优解合成原来解问题的一个解。解决问题需要从问题的某个初始解出发，采用循环语句，当可以向求解目标前进一步时，就根据局部最优策略，得到一个部分解，缩小问题的范围或规模，最后将所有部分解综合起来，得到问题的最终解。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C </category>
          
          <category> 算法 </category>
          
          <category> JAVA </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法分析与设计大作业——期末测试</title>
      <link href="/2021/05/20/finaltest/"/>
      <url>/2021/05/20/finaltest/</url>
      
        <content type="html"><![CDATA[<p>需要代码请评论或者与我联系！</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><p>助教小明给期末测验出了n道算法题目。他希望在即将到来的期末测验试卷中使用其中k道题目。每道算法题目都有一个难度等级。如果一次测验中的所有k道题目都有不同的难度等级，那么这次期末测试就是有区分度的。计算小明可以设计多少种有区分度的期末试卷。<br>注：两份测验试卷当且仅当一份试卷中存在某一题目p，而另一份试卷中不存在这个题p，这两份试卷才有区别。<br>输出结果对998,244,353取余。</p><h2 id="输入形式"><a href="#输入形式" class="headerlink" title="输入形式"></a>输入形式</h2><p>输入第一行包括两个用空格分隔开的整数n和k，1≤k≤n≤1000<br>输入第二行n个用空格分开隔的整数li，表示不同题目的难度，Li≤109</p><h2 id="输出形式"><a href="#输出形式" class="headerlink" title="输出形式"></a>输出形式</h2><p>一个整数，表示可设计的有区分度的期末试卷数目。结果对998,244,353取余</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><p>5 2<br>1 2 3 4 5</p><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><p>10</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>该题可采用动态规划算法来进行求解。首先将题目进行整理，按照题目难度排序后整理出不同难度的题目的个数，最后利用列表格动态规划求解出最终结果。或者利用递归和数学计算的方式求解，但是这种方式对于计算机计算需要大量的空间，解法不是最优。</p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a><strong>流程图</strong></h2><p><img src="https://img-blog.csdnimg.cn/20210520201132837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhbmRhbGxDaHU=,size_16,color_FFFFFF,t_70"></p><p>流程图</p><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a><strong>伪代码</strong></h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs prolog">枚举i=<span class="hljs-number">1</span>~count&#123;<br>    枚举j=<span class="hljs-number">0</span>~i&#123;<br>        如果j=<span class="hljs-number">0</span>成立&#123;<br>            sheet[i][j]=number[i][<span class="hljs-number">1</span>]+sheet[i<span class="hljs-number">-1</span>][j];<br>        &#125;<br>        如果i==j成立&#123;<br>            sheet[i][j]=(number[i][<span class="hljs-number">1</span>]*sheet[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]) <span class="hljs-comment">%998244353;</span><br>        &#125;<br>        否则&#123;<br>            sheet[i][j]=(sheet[i<span class="hljs-number">-1</span>][j]+sheet[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]*number[i][<span class="hljs-number">1</span>]) <span class="hljs-comment">%998244353;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码（C-）"><a href="#代码（C-）" class="headerlink" title="代码（C++）"></a><strong>代码（C++）</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> number[<span class="hljs-number">1000</span>][<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> n,k;<br>    cin &gt;&gt; n;<br>    cin &gt;&gt; k;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> data[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin &gt;&gt; data[i];<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(data, data+n);<br>    number[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=data[<span class="hljs-number">0</span>];<br>    number[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span>  count=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(data[i]==data[i<span class="hljs-number">-1</span>])&#123;<br>            number[count<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            number[count][<span class="hljs-number">0</span>]=data[i];<br>            number[count][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>            count++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span> i=<span class="hljs-number">0</span>;i&lt;count;i++)&#123;<br>        cout &lt;&lt; number[i][<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt;  number[i][<span class="hljs-number">1</span>] &lt;&lt;endl;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(count&lt;k)&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;0&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> sheet[count][k];<br>    sheet[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=number[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span> i=<span class="hljs-number">1</span>;i&lt;count;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)&#123;<br>            <span class="hljs-keyword">if</span>(j==<span class="hljs-number">0</span>)&#123;<br>                sheet[i][j]=number[i][<span class="hljs-number">1</span>]+sheet[i<span class="hljs-number">-1</span>][j];<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i==j)&#123;<br>                sheet[i][j]=(number[i][<span class="hljs-number">1</span>]*sheet[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>])%<span class="hljs-number">998244353</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                sheet[i][j]=(sheet[i<span class="hljs-number">-1</span>][j]+sheet[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]*number[i][<span class="hljs-number">1</span>])%<span class="hljs-number">998244353</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> suma=sheet[count<span class="hljs-number">-1</span>][k<span class="hljs-number">-1</span>];<br><br>    <span class="hljs-comment">//long long sum=jc(count)/(jc(k)*jc(count-k));</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">//for(long long i=0;i&lt;count;i++)&#123;</span><br>    <span class="hljs-comment">//sum=sum*(long long)number[i][1];</span><br>    <span class="hljs-comment">//&#125;</span><br>    <span class="hljs-comment">//cout &lt;&lt; sum &lt;&lt; endl;</span><br><br>    suma=suma%<span class="hljs-number">998244353</span>;<br>    cout &lt;&lt; suma;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>本算法对规定范围下不同的输入数据能够得出满足要求的结构，对于精心选择的典型、苛刻而带有刁难性的输入数据能够得出满足要求的结果，对于一切合法的输入数据都产生满足要求的结果。本算法要求考虑到边界条件当不同难度的算法题目数量小于要求。本算法的边界条件就是不同难度的题目数量可能会小于所需求的k，本程序以及提前判断出相关大小情况。 </p><p>核心代码问题：求解sheet表中第一列就是上一行的数值加上number[i][1]的值；求解sheet表中左上到右下的对角线上的格子的值sheet[i][j]就是number[i][1]乘上sheet[i-1][j-1]；求解其他的格子中的值就是sheet[i-1][j]加上sheet[i-1][j-1]乘以number[i][1]（n类里面挑选k个的个数等同于n-1类里挑选k个的个数或者n-1类里挑选k-1个，再在第n类挑选一个）。</p><table><thead><tr><th align="center"></th><th align="center">1</th><th align="center">2</th><th align="center">…</th><th align="center">k-1</th><th align="center">k</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">number[1][1]</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2</td><td align="center">sheet[1][1]+number[1][1]</td><td align="center">sheet[1][1]*number[2][1]</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">…</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">n-1</td><td align="center">sheet[n-1][1]</td><td align="center">sheet[n-1][2]</td><td align="center"></td><td align="center">sheet[n-1][k-1]</td><td align="center">sheet[n-1][k]</td></tr><tr><td align="center">n</td><td align="center">sheet[n-1][1]+number[n][1]</td><td align="center">sheet[n-1][2]+sheet[n-1][1]* number[n][1]</td><td align="center"></td><td align="center">sheet[n-1][k-1]+ sheet[n-1][k-2]* number[n][1]</td><td align="center">sheet[n-1][k]+ sheet[n-1][k-1]* number[n][1]</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>20春小学期程序设计实验报告</title>
      <link href="/2020/06/27/experimentalreportonprogramdesigninspring20/"/>
      <url>/2020/06/27/experimentalreportonprogramdesigninspring20/</url>
      
        <content type="html"><![CDATA[<p>Experimental report on program design in spring 20</p><h1 id="1-最长公字串"><a href="#1-最长公字串" class="headerlink" title="1. 最长公字串"></a>1. 最长公字串</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>编写一个程序，对输入的字符串s和t，求其最长的公共子字符串。输入形式：从屏幕分行读入串s和t。s和t由任意字符构成，长度都不超50个字符。输入数据确保只有唯一的最长公共子串。如果没有公共子串，打印No Answer。</p><p>输出形式：在单独行上输出串s和串t的最长公共子串，在结尾输出一个回车符。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>根据题意，将对应的行内字符串存入对应的数组a，b中，再比较a和b的长度，将较短的信息存入a，较长的存入b中。将a中以依次减少1个长度的原则取出对应的数组存入test数组中，再在b中取出相同长度的数组存入card数组中，比较test和card的区别来判断是否存在最大相同子串，如果相同就输出该子串，并且离开循环。如果最后循环完还未输出就输出No Answer。</p><h2 id="代码（c）"><a href="#代码（c）" class="headerlink" title="代码（c）"></a>代码（c）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">mystrncpy</span><span class="hljs-params">(<span class="hljs-type">char</span> *<span class="hljs-built_in">string</span>, <span class="hljs-type">int</span> n)</span>&#123;<span class="hljs-comment">//指向字符串的指针可以改变 </span><br>    <span class="hljs-type">char</span>*p=<span class="hljs-built_in">string</span>;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)&#123;<span class="hljs-comment">//如果截取的字符串是空的直接返回</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(*p!=<span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<span class="hljs-comment">//循环直到达n个字符串终止</span><br>            <span class="hljs-keyword">if</span>(i==n)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            i++;<br>            p++;<br>        &#125;<br>        *(p++)=<span class="hljs-string">&#x27;\0&#x27;</span>;<span class="hljs-comment">//赋值结束字符串</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> a[<span class="hljs-number">50</span>],b[<span class="hljs-number">50</span>];<br>    <span class="hljs-type">char</span> c[<span class="hljs-number">50</span>];<span class="hljs-comment">//中间变量 </span><br>    <span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i,j,k,m,n;<br>    gets(a);<span class="hljs-comment">//第一行字符串 </span><br>    gets(b);<span class="hljs-comment">//第二行字符串 </span><br>    <span class="hljs-type">int</span> lentha=<span class="hljs-built_in">strlen</span>(a);<span class="hljs-comment">//第一行字符串长度 </span><br>    <span class="hljs-type">int</span> lenthb=<span class="hljs-built_in">strlen</span>(b);<span class="hljs-comment">//第二行字符串长度 </span><br><br>    <span class="hljs-comment">/*检测输入*/</span><br>    <span class="hljs-comment">//printf(&quot;%s&quot;,a); </span><br>    <span class="hljs-comment">//printf(&quot;\n-------------------------\n&quot;);</span><br>    <span class="hljs-comment">//printf(&quot;%s&quot;,b);</span><br>    <span class="hljs-comment">//printf(&quot;\n-------------------------\n&quot;);</span><br>    <span class="hljs-comment">//printf(&quot;lentha=%d,lenthb=%d&quot;,lentha,lenthb);</span><br>    <span class="hljs-comment">//printf(&quot;\n-------------------------\n&quot;);</span><br><br>    <span class="hljs-comment">/*初处理数据，将短的的数据变到a*/</span><br>    <span class="hljs-keyword">if</span>(lentha&gt;lenthb)&#123;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">50</span>;i++)&#123;<br>            c[i]=a[i];<br>            a[i]=b[i];<br>            b[i]=c[i];<br>        &#125;<br>        i=lentha;<br>        lentha=lenthb;<br>        lenthb=i;<br>    &#125;<br><br>    <span class="hljs-comment">/*初处理检测*/</span><br>    <span class="hljs-comment">//printf(&quot;初处理%s&quot;,a); </span><br>    <span class="hljs-comment">//printf(&quot;\n-------------------------\n&quot;);</span><br>    <span class="hljs-comment">//printf(&quot;初处理%s&quot;,b);</span><br>    <span class="hljs-comment">//printf(&quot;\n-------------------------\n&quot;);</span><br>    <span class="hljs-comment">//printf(&quot;初处理lentha=%d,lenthb=%d&quot;,lentha,lenthb);</span><br>    <span class="hljs-comment">//printf(&quot;\n-------------------------\n&quot;);</span><br><br>    <span class="hljs-comment">/*运算部分*/</span><br>    <span class="hljs-keyword">for</span>(i=lentha;i&gt;<span class="hljs-number">0</span>;i--)&#123;<span class="hljs-comment">//从a的最长长度截取，依次减少 </span><br>        <span class="hljs-type">char</span> test[i];<span class="hljs-comment">//对应a中取得的值 </span><br>        <span class="hljs-type">char</span> card[i];<span class="hljs-comment">//对应b中取得的值 </span><br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;=lentha-i;j++)&#123;<br>            <span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;i;k++)&#123;<span class="hljs-comment">//将a中对应值覆到test </span><br>                test[k]=a[k+j];<br>            &#125;<br>            <span class="hljs-keyword">for</span>(m=<span class="hljs-number">0</span>;m&lt;lenthb-i+<span class="hljs-number">1</span>;m++)&#123;<br>                <span class="hljs-keyword">for</span>(n=<span class="hljs-number">0</span>;n&lt;i;n++)&#123;<span class="hljs-comment">//将b中对应值覆到card </span><br>                    card[n]=b[n+m];<br>                &#125;<br>                <span class="hljs-type">int</span> judge=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">for</span>(n=<span class="hljs-number">0</span>;n&lt;i;n++)&#123;<span class="hljs-comment">//判断card和test是否一致 </span><br>                    <span class="hljs-keyword">if</span>(test[n]!=card[n])&#123;<br>                        judge=<span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(judge)&#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,mystrncpy(test,i));<br>                    flag=<span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(flag)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No Answer&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本题用到了get();来获取字符串。gets()用于从标准输入流stdin读入一个整行（以bai’\n’或EOF）结束，写入ptr指向的字符数组，并返回这个指针；出错或遇到文件结束时则返回NULL。行末的’\n’从流中取出，但不写入数组。gets()不检查被写入的数组大小。程序运用逐个尝试的方法来获取最长公子串。在获取字符串时检查字符串长度，当a的长度大于b的长度时，运用了逐个代换的方法，将a，b中的元素互换位置。</p><h1 id="2-CCF-201712-5-商路"><a href="#2-CCF-201712-5-商路" class="headerlink" title="2. CCF 201712-5 商路"></a>2. CCF 201712-5 商路</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p>国王小w总共有八座城市，用1到n的整数编号。除首都1号城市外，每座城市都有唯一的直接上级城市，并有一条道路连接二者，即这些城市和道路构成了一棵有根树。对于城市i，我们记它的直接上级城市为ui，它到该城市道路的长度为si；同时，称i是么ui的直接下级城市。城市i的直接下级城市和直接下级城市的下级城市统称为城市i的下级城市。<br>每座城市的长官都想要建立一条由自己管辖的商路。对于城市i的长官，他管辖的商路必须形如a1a2…ak，其中a1=i：对于1≤j&lt;k,aj+1是aj的下级城市：k可以是你指定的正整数。即，一条商路是从城市i出发，依次向下级延伸的一条路径。注意路径只用向下级城市延伸即可，不限定为直接下级。城市i的价值由vi和fi两个参数描述。商路a1a2…ak的总价值为：</p><p><img src="http://blog.zhuanjie.ltd/img/uploads/2022/02/%E5%9B%BE%E7%89%871.png"></p><p>其中d(aj.aj+1）是连接aj和aj+1的道路总长度。形象地说，商路的总价值等于每小段的价值之和：vi和fi分别描述了i作为起点的最理想小段价值和最佳的小段长度：小段的价值等于以它们为参数，两座城市距离为自变量的二次函数。<br>如有必要，一条商路允许只包含长官所在的那一座城市，即k=1，此时商路的总价值为0。此外，不同城市长官建立的道路之间互相不影响，价值独立计算。<br>国王小W希望所有的n条商路的总价值之和最大，他现在请你帮忙。你可以替每座城市的长官决定商路的长度k和路径上除起点之外的城市，问最大的总价值之和是多少。</p><p>输入格式<br>从标准输入读入数据。<br>输入的第一行包含一个正整数个，表示数据的组数。对于测试数据，保证T=10。<br>接下来有T个部分，每个部分描述一组数据，其中：<br>每个部分第一行包含一个正整数n，表示城市的数量。<br>接下米n行，每行包含4个非负整数ui，si,vi,fi，分别表示直接上级城市的编号，连接直接上级城市道路的长度，最理想小段价值和最佳的小段长度。保证：0≤vi≤10^13，0≤fi≤10^9；对于2≤i≤n，保证1≤ui&lt;i,1≤si≤10^4；u1=s1=0，仅占位无实际意义（首都没有上级城市）。</p><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>根据题意输入的顺序是城市编号的顺序，而城市编号的顺序又直接决定了城市之间的上下级关系。虽然编号小的不一定是大编号的下级，但下级城市的编号一定比上级城市的编号小，如何利用这一点非常重要。假如城市A的下级城市是B,C,D ；那如果B,C,D 本身的商路价值都是最大话之后，A 只能在B,C,D 中挑选一个与之相连，或者不相连，来使自己的商路价值最大话。也就是如果B,C,D的商路价值都是已知的了，那A 的商路价值就都是已知的了。 如此以来，只需要按照逆序从后向前分别计算商路的最大值就可以了。</p><h2 id="代码（c-）"><a href="#代码（c-）" class="headerlink" title="代码（c++）"></a>代码（c++）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll MOD=<span class="hljs-number">1e18</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br>ll v[N],f[N],u[N],s[N];<br>ll ans[N];<br><span class="hljs-type">int</span> vis[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(ans,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(ans));<br>    <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(vis));<br>&#125;<br>queue&lt;<span class="hljs-type">int</span>&gt;q;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> T,n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;T);<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-built_in">init</span>(); <span class="hljs-comment">//初始化 </span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;u[i],&amp;s[i],&amp;v[i],&amp;f[i]);<br>            vis[u[i]]++; <span class="hljs-comment">//vis数组保存这个点的直接下级数量 </span><br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-comment">//这里类似拓扑排序，直接下级数量为零入队 </span><br>            <span class="hljs-keyword">if</span>(!vis[i]) q.<span class="hljs-built_in">push</span>(i);<br>        <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-type">int</span> k=q.<span class="hljs-built_in">front</span>();q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-type">int</span> t=u[k],d=s[k];<br>            vis[t]--;<br>            <span class="hljs-keyword">if</span>(!vis[t]) q.<span class="hljs-built_in">push</span>(t);<span class="hljs-comment">//直接下级全都处理过了，入队 </span><br>            <span class="hljs-keyword">while</span>(t) <span class="hljs-comment">//寻找所有上级，计算上级城市到这里的获利，取最大值 </span><br>            &#123;<br>                ans[t]=<span class="hljs-built_in">max</span>(ans[t],(ans[k]+v[t]-(f[t]-d)*(f[t]-d))); <span class="hljs-comment">//ans里保存了以这个城市为开头的商路最大价值 </span><br>                d+=s[t];<br>                t=u[t];<br>            &#125;<br>        &#125;<br>        ll sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) sum=(sum+ans[i])%MOD; <span class="hljs-comment">//计算总价值 </span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,sum);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>此程序涉及到了未学过的知识点，了解了拓扑排序。由某个集合上的一个偏序得到该集合上的一个全序，这个操作称之为拓扑排序。</p><h1 id="3-Vigenere加密算法"><a href="#3-Vigenere加密算法" class="headerlink" title="3. Vigenere加密算法"></a>3. Vigenere加密算法</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><p>单一字母替换密码很容易通过字母频率分析而破解。而一种被称为Vigenere的密码克服了这一缺点，其方法是对于待加密信息中不同位置上的字母应用不同的字母加密对应关系。首先选择一个密钥，例如TIGER，然后，对于待加密信息中的第一个字符，采用如下的字母对应关系加密：上述加密字母表是经过固定移位的字母表，其首字母是T（TIGER的首字母，先是T～Z，然后是A～S）。例如：字母A加密转换成T，字母Q转换成J，不在A～Z之间的字符，不进行转换。对待加密信息中的第二个字符，采用如下的字母对应关系加密：</p><p>对于待加密信息的第3个、第4个、第5个字符，分别采用以G、E、R开头的移位字母表对其加密。因为密钥只有5个字母长，所以对于待加密信息中的第6个字符，将采用与第1个字符相同的对应关系加密，以此类推。假定待加密信息中的字母全为大写字母，并且输入的密钥也全为大写字母；密钥长度不超过20，待加密信息不超过200个字符。</p><p>输入形式：从标准输入中输入密钥串，然后在下一行输入待加密信息（末尾有回车换行）。</p><p>输出形式：加密后结果输出到标准输出（末尾要有回车换行）。</p><h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><p>由题意，创建两个数组，依次存放密钥跟密文，再利用循环依次获取每一位的加密后的文字并输出。如果不在A~Z之间就直接输出。</p><h2 id="代码（c）-1"><a href="#代码（c）-1" class="headerlink" title="代码（c）"></a>代码（c）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> key[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">char</span> mas[<span class="hljs-number">200</span>];<br>    gets(key);<br>    gets(mas);<br>    <span class="hljs-type">int</span> i,j;<span class="hljs-comment">//循环次数标识，i表示加密信息的下标，j表示key的下标 </span><br>    <span class="hljs-type">int</span> lkey=<span class="hljs-built_in">strlen</span>(key);<br>    <span class="hljs-type">int</span> lmas=<span class="hljs-built_in">strlen</span>(mas);<span class="hljs-comment">//获取key和mas的长度，除去&#x27;\n&#x27; </span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;i&lt;lmas;i++,j++)&#123;<br>        <span class="hljs-keyword">if</span>(j&gt;=lkey)&#123;<span class="hljs-comment">//如果key下标超出最大值，将其初始化为0 </span><br>            j=<span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">65</span>&gt;mas[i]||mas[i]&gt;<span class="hljs-number">90</span>)&#123;<span class="hljs-comment">//如果加密信息不在A~Z之间就直接输出 </span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,mas[i]);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">char</span> out=mas[i]+(key[j]<span class="hljs-number">-65</span>);<span class="hljs-comment">//新的加密后信息运算 </span><br>        <span class="hljs-keyword">if</span>(out&gt;<span class="hljs-number">90</span>)&#123;<br>            out-=<span class="hljs-number">26</span>;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,out);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>本题利用大写字母所对应的ASCII码字母和后移实际上就是ASCII码的后移，超过90的ASCII码就利用判断，将其减少26就在65到90之间了。如果ASCII码不在65~90之间就直接输出。</p><h1 id="4-字符串转换双精度浮点数"><a href="#4-字符串转换双精度浮点数" class="headerlink" title="4. 字符串转换双精度浮点数"></a>4. 字符串转换双精度浮点数</h1><h2 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h2><p>编写函数atof(s),把字符串s转化成相应的双精度浮点数.输入字符串可能含有如下几部分：正负号，整数部分，小数点，小数部分。该函数还能够处理形如123.45e-5的指数型字符串输入.输入字符串中不含有空格.编写一个程序,使用该函数,将输入的字符串转换成相应的双精度浮点数。</p><p>输入形式：控制台输入字符串s.它可以含有正负号,小数点,整数部分和小数部分,以及字符&rsquo;e&rsquo;和相应的指数部分。</p><p>输出形式：控制台输出转换后的双精度数.格式化输出,使用”%f”,即不需指定字段宽度,由系统自动指定,使整数部分全部如数输出，并保留6位小数部分。</p><h2 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h2><p>根据题意，将字符串存入scr数组中，利用java中的Double.parseDouble()获得double类型数据，然后控制输出位数。</p><h2 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">atof</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">inp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">scr</span> <span class="hljs-operator">=</span> inp.next();<br>        inp.close();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> Double.parseDouble(scr);<br>        System.out.printf(<span class="hljs-string">&quot;%.6f&quot;</span>,d);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><p>该程序将字符串存入scr数组中，利用java中的Double.parseDouble()获得double类型数据d，然后利用System.out.printf(“%.6f”,d)控制输出位数。</p><h1 id="5-素数判断"><a href="#5-素数判断" class="headerlink" title="5. 素数判断"></a>5. 素数判断</h1><h2 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h2><p>编写一个函数isprime(n).判断整数n是否为素数.编写程序使用此函数,当输入一个整数时,对它进行判断,当为素数时,输出1.否则,输出0.</p><p>输入形式：控制台输入一个整数.</p><p>输出形式：控制台输出判断结果0或者1.</p><h2 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h2><p>判断一个数字n是否为素数要用该数字依次除以从2到根号n，一旦有一个可以除尽的数字就不是素数。</p><h2 id="代码（c）-2"><a href="#代码（c）-2" class="headerlink" title="代码（c）"></a>代码（c）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">isprime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">int</span> flag=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(n%i==<span class="hljs-number">0</span>)&#123;<br>            flag=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    m=isprime(n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,m);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h2><p>本程序创建isprime()函数，其中参数为数字n，利用循环，将n除以2一直除到根号n，判断是否能除尽，有一个能除尽就返回0，否则返回1。</p><h1 id="6-消除游戏"><a href="#6-消除游戏" class="headerlink" title="6. 消除游戏"></a>6. 消除游戏</h1><h2 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h2><p>消除类游戏是深受大众欢迎的一种游戏，游戏在一个包含有n行m列的游戏棋盘上进行，棋盘的每一行每一列的方格上放着一个有颜色的棋子，当一行或一列上有连续三个或更多的相同颜色的棋子时，这些棋子都被消除。当有多处可以被消除时，这些地方的棋子将同时被消除。</p><p>现在给定一个n行m列的棋盘，棋盘中的每一个方格上有一个棋子（用数字1-9表示各种颜色的棋子），请给出经过消除后的棋盘。</p><p>请注意：一个棋子可能在某一行和某一列同时被消除。</p><p>输入形式：从标准输入读取数据，第一行包含两个整数n和m，分别表示棋盘的行数和列数（行数和列数都大于等于3，小于等于9），以一个空格分隔这两个整数。</p><p>接下来输入n行，每行m个整数，用一个空格分隔各个整数，这些整数分别表示每一个方格中棋子的颜色（大于等于1，小于等于9）。</p><p>输出形式：向标准输出上输出n行，每行m个整数，相邻整数之间以一个空格分隔，表示经过消除后的棋盘。如果一个方格中的棋子被消除，则对应的方格输出数字0，否则输出代表原棋子颜色的整数。每行最后一个整数后也要有一个空格。</p><h2 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h2><p>根据题意创建二维数组存放原始数据。将原始数据复制到两个新的数组中，利用循环依次判断行与列该消除的数只需要按行遍历一次，再按列遍历一次，每次只需要判断三个数，就可以解决这个问题。将其变为0，最后合并这两个数组并输出。</p><h2 id="代码（Java）-1"><a href="#代码（Java）-1" class="headerlink" title="代码（Java）"></a>代码（Java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">exam1</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">output</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] a, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span> &#123;<span class="hljs-comment">//输出函数output，参数：数据存放数组a，行n，列m</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>                System.out.print(a[i][j]);<br>                <span class="hljs-keyword">if</span> (j==m-<span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i==n-<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> input.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> input.nextInt();<br>        <span class="hljs-type">int</span>[][] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][m];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<span class="hljs-comment">//输入</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>                a[i][j] = input.nextInt();<br>            &#125;<br>        &#125;<br>        input.close();<br>        <span class="hljs-comment">//output(a,n,m);</span><br>        <span class="hljs-type">int</span>[][] row = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][m];<span class="hljs-comment">//行变换消除后的数据</span><br>        <span class="hljs-type">int</span>[][] col = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][m];<span class="hljs-comment">//列变换消除后的数据</span><br>        <span class="hljs-type">int</span>[][] fin = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][m];<span class="hljs-comment">//最终整合的数据</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>                row[i][j] = a[i][j];<br>                col[i][j] = a[i][j];<br>                fin[i][j] = a[i][j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//output(row,n,m);</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<span class="hljs-comment">//行变换消除数据</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; m-<span class="hljs-number">2</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (a[i][j]==a[i][j+<span class="hljs-number">1</span>]&amp;&amp;a[i][j]==a[i][j+<span class="hljs-number">2</span>]) &#123;<br>                    row[i][j] = <span class="hljs-number">0</span>;<br>                    row[i][j+<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>                    row[i][j+<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//output(row,n,m);</span><br>        <span class="hljs-comment">//System.out.println();</span><br>        <span class="hljs-comment">//System.out.println();</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n-<span class="hljs-number">2</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (a[j][i]==a[j+<span class="hljs-number">1</span>][i]&amp;&amp;a[j][i]==a[j+<span class="hljs-number">2</span>][i]) &#123;<br>                    col[j][i] = <span class="hljs-number">0</span>;<br>                    col[j+<span class="hljs-number">1</span>][i] = <span class="hljs-number">0</span>;<br>                    col[j+<span class="hljs-number">2</span>][i] = <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//output(col,n,m);</span><br>        <span class="hljs-comment">//System.out.println();</span><br>        <span class="hljs-comment">//System.out.println();</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>                <span class="hljs-keyword">if</span> (row[i][j]==0col[i][j]==<span class="hljs-number">0</span>) &#123;<br>                    fin[i][j] = <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        output(fin, n, m);<br>        <span class="hljs-comment">//System.out.println();</span><br>        <span class="hljs-comment">//System.out.println();</span><br>        <span class="hljs-comment">//output(a,n,m);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h2><p>本程序要保留下来原始数组，以免判断完行后列的数据不全导致判断错误。我都程序新建了一个output方法，将输出部分区块化方便在代码中间判断输出情况。</p><h1 id="7-合数分解2"><a href="#7-合数分解2" class="headerlink" title="7. 合数分解2"></a>7. 合数分解2</h1><h2 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h2><p>由数学基本定理可知：任何一个大于1的非素数整数（即合数）都可以唯一分解成若干个素数的乘积。编写程序，从控制台读入一个合数（合数的大小不会超过int数据类型表示的范围），求这个合数可以分解成的多次出现的素数（即出现次数大于1的素数）。例如合数1260分解成素数乘积为：2*2*3*3*5*7,2和3出现两次，5和7出现一次，所以求得的结果为2和3。</p><p>输入形式：从控制台输入一个合数。</p><p>输出形式：在标准输出上按照由小到大的顺序输出分解后的多次出现的素数，各素数之间以一个空格分隔，最后一个素数后也可以有一个空格。若没有多次出现的素数，则什么都不输出。</p><h2 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h2><p>根据题意，应该先判断输入数字num的所有质因子。然后循环将num依次除以从2到num的数字i，如果能整除，i不加1，同时再加入一个循环向其中添加一个参数，多次出现的质因子输出出来。</p><h2 id="代码（Java）-2"><a href="#代码（Java）-2" class="headerlink" title="代码（Java）"></a>代码（Java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">primes</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> input.nextInt();<br>        input.close();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; num; i++) &#123;<br>            <span class="hljs-keyword">if</span> (num%i==<span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; num%i==<span class="hljs-number">0</span>; j++) &#123;<br>                    num = num/i;<br>                    <span class="hljs-keyword">if</span> (j==<span class="hljs-number">1</span>) &#123;<br>                        System.out.print(i+<span class="hljs-string">&quot; &quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h2><p>该程序运用到了两层for循环嵌套，其中里面还有俩if判断，其中参数j在等于1的时候才会输出数字，其意义就是该质因子出现两次的时候会输出，同题目中的意思出现多次时输出一次该数字。</p><h1 id="8-摄氏华氏温度转换"><a href="#8-摄氏华氏温度转换" class="headerlink" title="8. 摄氏华氏温度转换"></a>8. 摄氏华氏温度转换</h1><h2 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h2><p>假如用C表示摄氏温度，F表示华氏温度，则有：F=C*9/5+32。输入一整数表示摄氏温度，根据该公式编程求对应的华氏温度，结果小数点后保留一位有效数字。</p><p>输入形式：从控制台读入一个整数，表示摄氏温度。</p><p>输出形式：向控制台输出转换后的华氏温度，结果小数点后保留一位有效数字。</p><h2 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h2><p>由题意，题目中给出了公式，利用scanf读取数字然后按照题目中的公式计算，然后输出数据即可。</p><h2 id="代码（c）-3"><a href="#代码（c）-3" class="headerlink" title="代码（c）"></a>代码（c）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">double</span> m,n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>,&amp;m);<br>    n=m*<span class="hljs-number">9</span>/<span class="hljs-number">5</span>+<span class="hljs-number">32</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.1lf&quot;</span>,n);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h2><p>本题程序中，输入的数据m也要变为double以免利用公式运算的时候出现小数部分没有计算入内的情况，输出的保留一位小数利用printf(“%.2lf”)即可完成题目要求。</p><h1 id="9-CCF-201612-1-中间数"><a href="#9-CCF-201612-1-中间数" class="headerlink" title="9. CCF 201612-1 中间数"></a>9. CCF 201612-1 中间数</h1><h2 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h2><p>在一个整数序列a1, a2, …, an中，如果存在某个数，大于它的整数数量等于小于它的整数数量，则称其为中间数。在一个序列中，可能存在多个下标不相同的中间数，这些中间数的值是相同的。给定一个整数序列，请找出这个整数序列的中间数的值。</p><p>输入形式：输入的第一行包含了一个整数n，表示整数序列中数的个数。第二行包含n个正整数，依次表示a1, a2, …, an。</p><p>输出形式：如果约定序列的中间数存在，则输出中间数的值，否则输出-1表示不存在中间数。</p><h2 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h2><p>由题意，由于输入的数据没有排序要求，本题采用暴力法，依次判断每个数字前比它小的数字，每个数字后比他大的数字的个数是否相等。</p><h2 id="代码（c）-4"><a href="#代码（c）-4" class="headerlink" title="代码（c）"></a>代码（c）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-type">int</span> a[n];<br>    <span class="hljs-type">int</span> i,j,e,f;<br>    <span class="hljs-type">int</span> flag=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        e=<span class="hljs-number">0</span>;<br>        f=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>            <span class="hljs-keyword">if</span>(a[j]&lt;a[i])&#123;<br>                e++;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[j]&gt;a[i])&#123;<br>                f++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(e==f&amp;&amp;e!=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a[i]);<br>            flag=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(flag)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h2><p>本程序用暴力法依次计算前后大小的数字是否一致，利用flag来表示是否存在这样的数字，如果不存在这样的数字，根据flag等于0会输出-1。</p><h1 id="10-最小素数集"><a href="#10-最小素数集" class="headerlink" title="10. 最小素数集"></a>10. 最小素数集</h1><h2 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h2><p>由数学基本定理可知：任何一个大于1的非素数整数都可以唯一分解成若干个素数的乘积。编写程序，从控制台读入一组大于1的整数（小于等于20个，且每个整数的大小不会超过int数据类型表示的范围），求这些整数分解成素数的最小集。该最小素数集是所有整数分解成的素数的并集（若输入的整数是素数，则该素数可以直接加入最小素数集），并且重复的素数只保留一个。按从小到大的顺序输出求得的最小素数集。</p><p>输入形式：先从控制台输入整数的个数，然后在下一行输入所有整数，各整数之间以一个空格分隔。</p><p>输出形式：在标准输出上按从小到大顺序输出求得的最小素数集，各素数之间以一个空格分隔，最后一个整数后也可以有一个空格。</p><h2 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h2><p>根据题意先求出所有的数字的质因子，放在同一个数组里，然后从小到大依次排列，最后在依次输出，每个数字只输出一遍。</p><p>代码（Java）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">primes</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123; <span class="hljs-comment">//判断是否为素数，是素数返回true</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= Math.sqrt((<span class="hljs-type">double</span>) x); i++) &#123;<br>            <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>) &#123;<br>                flag = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sti</span><span class="hljs-params">(String a)</span> &#123; <span class="hljs-comment">//string形转int型</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            result = Integer.parseInt(a);<br>        &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> input.nextInt(); <span class="hljs-comment">//输入数组个数</span><br>        <span class="hljs-type">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n]; <span class="hljs-comment">//表示存放数字的数组</span><br>        ArrayList &lt; String &gt; midarray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span> &lt; String &gt; ();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>            a[i] = input.nextInt();<br><br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; j &lt;= a[i]; j++) &#123;<br>                <span class="hljs-keyword">if</span> (judge(a[i])) &#123;<br>                    midarray.add(<span class="hljs-string">&quot;&quot;</span> + a[i]);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (a[i] % j == <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-keyword">for</span> (; a[i] % j == <span class="hljs-number">0</span>;) &#123;<br>                            a[i] /= j;<br>                        &#125;<br>                        midarray.add(<span class="hljs-string">&quot;&quot;</span> + j);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        input.close();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> midarray.size();<br>        <span class="hljs-type">int</span>[] num = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[l];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; l; i++) &#123;<br>            num[i] = sti(midarray.get(i));<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; l; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; l - <span class="hljs-number">1</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (num[j] &gt; num[j + <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> num[j];<br>                    num[j] = num[j + <span class="hljs-number">1</span>];<br>                    num[j + <span class="hljs-number">1</span>] = k;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (l &gt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; l - <span class="hljs-number">1</span>; i++) &#123;<br>                <span class="hljs-keyword">if</span> (num[i] &lt; num[i + <span class="hljs-number">1</span>]) &#123;<br>                    w = i + <span class="hljs-number">1</span>;<br>                    System.out.print(num[i]);<br>                    <span class="hljs-keyword">if</span> (i == l - <span class="hljs-number">2</span>) &#123;<br>                        flag = <span class="hljs-literal">true</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (num[l - <span class="hljs-number">1</span>] &gt; num[l - <span class="hljs-number">2</span>]) &#123;<br>                <span class="hljs-keyword">if</span> (flag) &#123;<br>                    System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>                &#125;<br>                System.out.print(num[l - <span class="hljs-number">1</span>]);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num[l - <span class="hljs-number">1</span>] == num[w]) &#123;<br>                System.out.print(num[w]);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l == <span class="hljs-number">1</span>) &#123;<br>            System.out.print(num[<span class="hljs-number">0</span>]);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">if</span> (num[<span class="hljs-number">0</span>] == num[<span class="hljs-number">1</span>]) &#123;<br>                System.out.print(num[<span class="hljs-number">0</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.print(num[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot; &quot;</span> + num[<span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结-9"><a href="#总结-9" class="headerlink" title="总结"></a>总结</h2><p>本程序中用judge方法来判断是否为素数，是素数返回true，用sti方法将string形数据转为int型数据。并在输出的时候建立一个标识w，让w称为最后一个数字的初始下标，以免少数出一个数字。</p><h1 id="11-求三角形面积"><a href="#11-求三角形面积" class="headerlink" title="11. 求三角形面积"></a>11. 求三角形面积</h1><h2 id="题目-10"><a href="#题目-10" class="headerlink" title="题目"></a>题目</h2><p>若已知三角形三个边的长度分别为a,b,c（并假设三个边长度的单位一致，在本编程题中忽略其单位），则可以利用公式 求得三角形的面积，其中：s=(a+b+c)/2。编程实现从控制台读入以整数表示的三个边的长度（假设输入的长度肯定可以形成三角形），然后利用上述公式计算面积并输出，结果小数点后保留3位有效数字。</p><p>输入形式：从控制台输入三个整数表示三角形三个边的长度，以空格分隔三个整数。</p><p>输出形式：向控制台输出求得的三角形的面积，小数点后保留三位有效数字。</p><h2 id="分析-10"><a href="#分析-10" class="headerlink" title="分析"></a>分析</h2><p>由题意，题目中给出了公式，利用scanf读取数字然后按照题目中的公式计算，然后输出数据即可。</p><h2 id="代码（c）-5"><a href="#代码（c）-5" class="headerlink" title="代码（c）"></a>代码（c）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">double</span> a,b,c,p,s;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf %lf %lf&quot;</span>,&amp;a,&amp;b,&amp;c);<br>    p=(a+b+c)/<span class="hljs-number">2</span>;<br>    s=<span class="hljs-built_in">sqrt</span>(p*(p-a)*(p-b)*(p-c));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.3lf&quot;</span>,s);<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="总结-10"><a href="#总结-10" class="headerlink" title="总结"></a>总结</h2><p>本程序中用p表示半周长，然后根据公式计算得出面积的值，最后利用printf(“%.3lf”)输出保留了小数点后的三位数字。</p><h1 id="12-回文数"><a href="#12-回文数" class="headerlink" title="12. 回文数"></a>12. 回文数</h1><h2 id="题目-11"><a href="#题目-11" class="headerlink" title="题目"></a>题目</h2><p>“回文数”是一种数字。如：98789, 这个数字正读是98789,倒读也是98789,正读倒读一样，所以这个数字就是回文数。编写一个程序，判断给出的数m是否为回文数（m的位数&lt;=1000）。</p><p>输入描述：一个整数m</p><p>输出描述：如果m是回文数，则输出yes，否则输出no（yes和no均为小写）</p><h2 id="分析-11"><a href="#分析-11" class="headerlink" title="分析"></a>分析</h2><p>根据题意，我将输入的数字视为字符串存入数组，然后判断数组实际长度，反过来存到另一个数组里，比较实际长度那么多的字符是否一致即可</p><p>代码（c）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> a[<span class="hljs-number">100</span>],b[<span class="hljs-number">100</span>];<br>    gets(a);<br>    <span class="hljs-type">int</span> lentha=<span class="hljs-built_in">strlen</span>(a);<br>    <span class="hljs-type">int</span> i=lentha<span class="hljs-number">-1</span>,j;<br>    <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        b[j]=a[i];<br>        j++;<br>    &#125;<br>    <span class="hljs-type">int</span> key=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;lentha;i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[i]!=b[i])&#123;<br>            key=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(key)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yes&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结-11"><a href="#总结-11" class="headerlink" title="总结"></a>总结</h2><p>本题用到了get();来获取字符串。gets()用于从标准输入流stdin读入一个整行（以bai’\n’或EOF）结束，写入ptr指向的字符数组，并返回这个指针；出错或遇到文件结束时则返回NULL。行末的’\n’从流中取出，但不写入数组。gets()不检查被写入的数组大小。利用strlen()判断数组实际长度，然后反向写入另一个数组。依次判断两个数组中的每个数字是否一样，一旦出现一个不一样，将key标记为0。最后根据key输出yes或no。</p><h1 id="13-CCF-201703-4-地铁修建"><a href="#13-CCF-201703-4-地铁修建" class="headerlink" title="13. CCF 201703-4 地铁修建"></a>13. CCF 201703-4 地铁修建</h1><h2 id="题目-12"><a href="#题目-12" class="headerlink" title="题目"></a>题目</h2><p>A市有n个交通枢纽，其中1号和n号非常重要，为了加强运输能力，A市决定在1号到n号枢纽间修建一条地铁。地铁由很多段隧道组成，每段隧道连接两个交通枢纽。经过勘探，有m段隧道作为候选，两个交通枢纽之间最多只有一条候选的隧道，没有隧道两端连接着同一个交通枢纽。现在有n家隧道施工的公司，每段候选的隧道只能由一个公司施工，每家公司施工需要的天数一致。而每家公司最多只能修建一条候选隧道。所有公司同时开始施工。作为项目负责人，你获得了候选隧道的信息，现在你可以按自己的想法选择一部分隧道进行施工，请问修建整条地铁最少需要多少天。</p><p>输入形式：输入的第一行包含两个整数n, m，用一个空格分隔，分别表示交通枢纽的数量和候选隧道的数量。第2行到第m+1行，每行包含三个整数a, b, c，表示枢纽a和枢纽b之间可以修建一条隧道，需要的时间为c天。</p><p>输出形式：输出一个整数，修建整条地铁线路最少需要的天数。</p><h2 id="分析-12"><a href="#分析-12" class="headerlink" title="分析"></a>分析</h2><p>由题意本体就是最小生成树的题目。</p><p>代码（Java）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">subway</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] fathers;<br>    <span class="hljs-keyword">static</span> Comparator &lt; <span class="hljs-type">int</span>[] &gt; cmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span> &lt; <span class="hljs-type">int</span>[] &gt; () &#123;@<br>        Override<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">int</span>[] o1, <span class="hljs-type">int</span>[] o2)</span> &#123;<br>            <span class="hljs-keyword">return</span> o1[<span class="hljs-number">2</span>] - o2[<span class="hljs-number">2</span>];<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-comment">// 优先队列方法</span><br>    <span class="hljs-comment">// 85分，超时</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">MST</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">route</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        PriorityQueue &lt; <span class="hljs-type">int</span>[] &gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span> &lt; &gt; (cmp);<br>        <span class="hljs-comment">// 初始化并查集</span><br>        fathers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[num + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= num; i++) &#123;<br>            fathers[i] = i;<br>        &#125;<br>        <span class="hljs-comment">// 读取边</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; route; i++) &#123;<br>            <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++) &#123;<br>                arr[j] = scanner.nextInt();<br>            &#125;<br>            queue.add(arr);<br>        &#125;<br>        scanner.close();<br><br>        <span class="hljs-comment">// Kruskal算法</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; route; i++) &#123;<br>            <span class="hljs-type">int</span>[] edges = queue.poll();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> edges[<span class="hljs-number">0</span>], b = edges[<span class="hljs-number">1</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">father_a</span> <span class="hljs-operator">=</span> findfathers(a);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">father_b</span> <span class="hljs-operator">=</span> findfathers(b);<br>            <span class="hljs-keyword">if</span> (father_a != father_b) &#123;<br>                fathers[father_a] = father_b;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (findfathers(<span class="hljs-number">1</span>) == findfathers(num)) &#123;<br>                System.out.println(edges[<span class="hljs-number">2</span>]);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findfathers</span><span class="hljs-params">(<span class="hljs-type">int</span> child)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">father</span> <span class="hljs-operator">=</span> child;<br>        <span class="hljs-keyword">while</span> (fathers[father] != father) &#123;<br>            father = fathers[father];<br>        &#125;<br>        <span class="hljs-comment">// 路径压缩</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> child, j;<br>        <span class="hljs-keyword">while</span> (i != father) &#123;<br>            j = fathers[i];<br>            fathers[i] = father;<br>            i = j;<br>        &#125;<br>        <span class="hljs-keyword">return</span> father;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        MST();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结-12"><a href="#总结-12" class="headerlink" title="总结"></a>总结</h2><p>利用最小生成树算法。最小生成树性质：设G=(V，E）是一个连通网络，U是顶点集V的一个非空真子集。若(u，v）是G中一条“一个端点在U中（例如：u∈U），另一个端点不在U中的边（例如：v∈V-U），且（u，v）具有最小权值，则一定存在G的一棵最小生成树包括此边（u，v）。</p><h1 id="14-CCF-201512-1-数位之和"><a href="#14-CCF-201512-1-数位之和" class="headerlink" title="14. CCF 201512-1 数位之和"></a>14. CCF 201512-1 数位之和</h1><h2 id="题目-13"><a href="#题目-13" class="headerlink" title="题目"></a>题目</h2><p>给定一个十进制整数n，输出n的各位数字之和。</p><p>输入形式：输入一个整数n。</p><p>输出形式：输出一个整数，表示答案。</p><h2 id="分析-13"><a href="#分析-13" class="headerlink" title="分析"></a>分析</h2><p>根据题意将数字看成字符串然后根据每个字符串改为数字，最后将所有的数字加在一起能得出答案。</p><h2 id="代码（c）-6"><a href="#代码（c）-6" class="headerlink" title="代码（c）"></a>代码（c）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> chartonumber(x) (x-<span class="hljs-string">&#x27;0&#x27;</span>)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> a[<span class="hljs-number">10</span>];<br>    fgets(a, <span class="hljs-number">10</span>, <span class="hljs-built_in">stdin</span>);<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">strlen</span>(a)<span class="hljs-number">-1</span>;i++)&#123;<br>        sum+=chartonumber(a[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,sum);<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="总结-13"><a href="#总结-13" class="headerlink" title="总结"></a>总结</h2><p>本程序用fgets()获取字符，fgets函数功能为从指定的流中读取数据，每次读取一行。其原型为：char *fgets(char *str, int n, FILE *stream);从指定的流 stream 读取一行，并把它存储在 str 所指向的字符串内。当读取 (n-1) 个字符时，或者读取到换行符时，或者到达文件末尾时，它会停止，具体视情况而定。利用宏定义#define chartonumber(x) (x-‘0’)将char类型数据转换为int类型数据。</p><h1 id="15-逆序乘积式"><a href="#15-逆序乘积式" class="headerlink" title="15. 逆序乘积式"></a>15. 逆序乘积式</h1><h2 id="题目-14"><a href="#题目-14" class="headerlink" title="题目"></a>题目</h2><p>若两个正整数的乘积，等于两正整数各自逆序后的乘积，则称其为逆序乘积式。编写程序读入两个正整数，然后判断这两个正整数能否构成逆序乘积式。假设两个正整数的乘积不会超过int数据类型的表示范围。</p><p>输入形式：从控制台输入以一个空格分隔的两个正整数。</p><p>输出形式：若两个正整数能够构成逆序乘积式，则输出两个正整数及其逆序的乘积形式，并且中间用一个等号相连；若不能构成逆序乘积式，则输出两个正整数及其逆序的乘积形式，并且中间用一个不等号相连。</p><p>注意：输出的字符之间没有空格分隔。若逆序后最高位为0，则为0的最高位不输出。</p><h2 id="分析-14"><a href="#分析-14" class="headerlink" title="分析"></a>分析</h2><p>根据题意，本程序结合了将数字反过来读取，和判断乘积是否相等。</p><h2 id="代码（Java）-3"><a href="#代码（Java）-3" class="headerlink" title="代码（Java）"></a>代码（Java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">exam</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">changetonumber</span><span class="hljs-params">(String y)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            result = Integer.parseInt(y);<br>        &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(input.next());<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(input.next());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sa</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span> + a;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span> + b;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">backa</span> <span class="hljs-operator">=</span> a;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">backb</span> <span class="hljs-operator">=</span> b;<br>        backa.reverse();<br>        backb.reverse();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sbacka</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span> + backa;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sbackb</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span> + backb;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">numa</span> <span class="hljs-operator">=</span> changetonumber(sa);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">numb</span> <span class="hljs-operator">=</span> changetonumber(sb);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">numba</span> <span class="hljs-operator">=</span> changetonumber(sbacka);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">numbb</span> <span class="hljs-operator">=</span> changetonumber(sbackb);<br>        <span class="hljs-keyword">if</span> (numa * numb == numba * numbb) &#123;<br>            flag = <span class="hljs-literal">false</span>;<br>        &#125;<br>        input.close();<br>        System.out.print(numa + <span class="hljs-string">&quot;*&quot;</span> + numb);<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            System.out.print(<span class="hljs-string">&quot;!&quot;</span>);<br>        &#125;<br>        System.out.print(<span class="hljs-string">&quot;=&quot;</span> + numba + <span class="hljs-string">&quot;*&quot;</span> + numbb);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结-14"><a href="#总结-14" class="headerlink" title="总结"></a>总结</h2><p>本程序利用一个changetonumber方法将字符串转换为数字返回，先读取字符串，然后将字符串复制到另一个StringBuilder类型数据里，将其反向，然后利用新建的方法将其转换为数字，最后判断输出结果。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C </category>
          
          <category> 算法 </category>
          
          <category> JAVA </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
